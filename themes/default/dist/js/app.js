/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@splidejs/splide/dist/js/splide.esm.js":
/*!*************************************************************!*\
  !*** ./node_modules/@splidejs/splide/dist/js/splide.esm.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CLASSES\": function() { return /* binding */ CLASSES; },\n/* harmony export */   \"CLASS_ACTIVE\": function() { return /* binding */ CLASS_ACTIVE; },\n/* harmony export */   \"CLASS_ARROW\": function() { return /* binding */ CLASS_ARROW; },\n/* harmony export */   \"CLASS_ARROWS\": function() { return /* binding */ CLASS_ARROWS; },\n/* harmony export */   \"CLASS_ARROW_NEXT\": function() { return /* binding */ CLASS_ARROW_NEXT; },\n/* harmony export */   \"CLASS_ARROW_PREV\": function() { return /* binding */ CLASS_ARROW_PREV; },\n/* harmony export */   \"CLASS_CLONE\": function() { return /* binding */ CLASS_CLONE; },\n/* harmony export */   \"CLASS_CONTAINER\": function() { return /* binding */ CLASS_CONTAINER; },\n/* harmony export */   \"CLASS_FOCUS_IN\": function() { return /* binding */ CLASS_FOCUS_IN; },\n/* harmony export */   \"CLASS_INITIALIZED\": function() { return /* binding */ CLASS_INITIALIZED; },\n/* harmony export */   \"CLASS_LIST\": function() { return /* binding */ CLASS_LIST; },\n/* harmony export */   \"CLASS_LOADING\": function() { return /* binding */ CLASS_LOADING; },\n/* harmony export */   \"CLASS_NEXT\": function() { return /* binding */ CLASS_NEXT; },\n/* harmony export */   \"CLASS_OVERFLOW\": function() { return /* binding */ CLASS_OVERFLOW; },\n/* harmony export */   \"CLASS_PAGINATION\": function() { return /* binding */ CLASS_PAGINATION; },\n/* harmony export */   \"CLASS_PAGINATION_PAGE\": function() { return /* binding */ CLASS_PAGINATION_PAGE; },\n/* harmony export */   \"CLASS_PREV\": function() { return /* binding */ CLASS_PREV; },\n/* harmony export */   \"CLASS_PROGRESS\": function() { return /* binding */ CLASS_PROGRESS; },\n/* harmony export */   \"CLASS_PROGRESS_BAR\": function() { return /* binding */ CLASS_PROGRESS_BAR; },\n/* harmony export */   \"CLASS_ROOT\": function() { return /* binding */ CLASS_ROOT; },\n/* harmony export */   \"CLASS_SLIDE\": function() { return /* binding */ CLASS_SLIDE; },\n/* harmony export */   \"CLASS_SPINNER\": function() { return /* binding */ CLASS_SPINNER; },\n/* harmony export */   \"CLASS_SR\": function() { return /* binding */ CLASS_SR; },\n/* harmony export */   \"CLASS_TOGGLE\": function() { return /* binding */ CLASS_TOGGLE; },\n/* harmony export */   \"CLASS_TOGGLE_PAUSE\": function() { return /* binding */ CLASS_TOGGLE_PAUSE; },\n/* harmony export */   \"CLASS_TOGGLE_PLAY\": function() { return /* binding */ CLASS_TOGGLE_PLAY; },\n/* harmony export */   \"CLASS_TRACK\": function() { return /* binding */ CLASS_TRACK; },\n/* harmony export */   \"CLASS_VISIBLE\": function() { return /* binding */ CLASS_VISIBLE; },\n/* harmony export */   \"DEFAULTS\": function() { return /* binding */ DEFAULTS; },\n/* harmony export */   \"EVENT_ACTIVE\": function() { return /* binding */ EVENT_ACTIVE; },\n/* harmony export */   \"EVENT_ARROWS_MOUNTED\": function() { return /* binding */ EVENT_ARROWS_MOUNTED; },\n/* harmony export */   \"EVENT_ARROWS_UPDATED\": function() { return /* binding */ EVENT_ARROWS_UPDATED; },\n/* harmony export */   \"EVENT_AUTOPLAY_PAUSE\": function() { return /* binding */ EVENT_AUTOPLAY_PAUSE; },\n/* harmony export */   \"EVENT_AUTOPLAY_PLAY\": function() { return /* binding */ EVENT_AUTOPLAY_PLAY; },\n/* harmony export */   \"EVENT_AUTOPLAY_PLAYING\": function() { return /* binding */ EVENT_AUTOPLAY_PLAYING; },\n/* harmony export */   \"EVENT_CLICK\": function() { return /* binding */ EVENT_CLICK; },\n/* harmony export */   \"EVENT_DESTROY\": function() { return /* binding */ EVENT_DESTROY; },\n/* harmony export */   \"EVENT_DRAG\": function() { return /* binding */ EVENT_DRAG; },\n/* harmony export */   \"EVENT_DRAGGED\": function() { return /* binding */ EVENT_DRAGGED; },\n/* harmony export */   \"EVENT_DRAGGING\": function() { return /* binding */ EVENT_DRAGGING; },\n/* harmony export */   \"EVENT_END_INDEX_CHANGED\": function() { return /* binding */ EVENT_END_INDEX_CHANGED; },\n/* harmony export */   \"EVENT_HIDDEN\": function() { return /* binding */ EVENT_HIDDEN; },\n/* harmony export */   \"EVENT_INACTIVE\": function() { return /* binding */ EVENT_INACTIVE; },\n/* harmony export */   \"EVENT_LAZYLOAD_LOADED\": function() { return /* binding */ EVENT_LAZYLOAD_LOADED; },\n/* harmony export */   \"EVENT_MOUNTED\": function() { return /* binding */ EVENT_MOUNTED; },\n/* harmony export */   \"EVENT_MOVE\": function() { return /* binding */ EVENT_MOVE; },\n/* harmony export */   \"EVENT_MOVED\": function() { return /* binding */ EVENT_MOVED; },\n/* harmony export */   \"EVENT_NAVIGATION_MOUNTED\": function() { return /* binding */ EVENT_NAVIGATION_MOUNTED; },\n/* harmony export */   \"EVENT_OVERFLOW\": function() { return /* binding */ EVENT_OVERFLOW; },\n/* harmony export */   \"EVENT_PAGINATION_MOUNTED\": function() { return /* binding */ EVENT_PAGINATION_MOUNTED; },\n/* harmony export */   \"EVENT_PAGINATION_UPDATED\": function() { return /* binding */ EVENT_PAGINATION_UPDATED; },\n/* harmony export */   \"EVENT_READY\": function() { return /* binding */ EVENT_READY; },\n/* harmony export */   \"EVENT_REFRESH\": function() { return /* binding */ EVENT_REFRESH; },\n/* harmony export */   \"EVENT_RESIZE\": function() { return /* binding */ EVENT_RESIZE; },\n/* harmony export */   \"EVENT_RESIZED\": function() { return /* binding */ EVENT_RESIZED; },\n/* harmony export */   \"EVENT_SCROLL\": function() { return /* binding */ EVENT_SCROLL; },\n/* harmony export */   \"EVENT_SCROLLED\": function() { return /* binding */ EVENT_SCROLLED; },\n/* harmony export */   \"EVENT_SHIFTED\": function() { return /* binding */ EVENT_SHIFTED; },\n/* harmony export */   \"EVENT_SLIDE_KEYDOWN\": function() { return /* binding */ EVENT_SLIDE_KEYDOWN; },\n/* harmony export */   \"EVENT_UPDATED\": function() { return /* binding */ EVENT_UPDATED; },\n/* harmony export */   \"EVENT_VISIBLE\": function() { return /* binding */ EVENT_VISIBLE; },\n/* harmony export */   \"EventBinder\": function() { return /* binding */ EventBinder; },\n/* harmony export */   \"EventInterface\": function() { return /* binding */ EventInterface; },\n/* harmony export */   \"FADE\": function() { return /* binding */ FADE; },\n/* harmony export */   \"LOOP\": function() { return /* binding */ LOOP; },\n/* harmony export */   \"LTR\": function() { return /* binding */ LTR; },\n/* harmony export */   \"RTL\": function() { return /* binding */ RTL; },\n/* harmony export */   \"RequestInterval\": function() { return /* binding */ RequestInterval; },\n/* harmony export */   \"SLIDE\": function() { return /* binding */ SLIDE; },\n/* harmony export */   \"STATUS_CLASSES\": function() { return /* binding */ STATUS_CLASSES; },\n/* harmony export */   \"Splide\": function() { return /* binding */ Splide; },\n/* harmony export */   \"SplideRenderer\": function() { return /* binding */ SplideRenderer; },\n/* harmony export */   \"State\": function() { return /* binding */ State; },\n/* harmony export */   \"TTB\": function() { return /* binding */ TTB; },\n/* harmony export */   \"Throttle\": function() { return /* binding */ Throttle; },\n/* harmony export */   \"default\": function() { return /* binding */ Splide; }\n/* harmony export */ });\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n/*!\n * Splide.js\n * Version  : 4.1.3\n * License  : MIT\n * Copyright: 2022 Naotoshi Fujita\n */\n\n\nvar MEDIA_PREFERS_REDUCED_MOTION = \"(prefers-reduced-motion: reduce)\";\nvar CREATED = 1;\nvar MOUNTED = 2;\nvar IDLE = 3;\nvar MOVING = 4;\nvar SCROLLING = 5;\nvar DRAGGING = 6;\nvar DESTROYED = 7;\nvar STATES = {\n  CREATED: CREATED,\n  MOUNTED: MOUNTED,\n  IDLE: IDLE,\n  MOVING: MOVING,\n  SCROLLING: SCROLLING,\n  DRAGGING: DRAGGING,\n  DESTROYED: DESTROYED\n};\n\nfunction empty(array) {\n  array.length = 0;\n}\n\nfunction slice(arrayLike, start, end) {\n  return Array.prototype.slice.call(arrayLike, start, end);\n}\n\nfunction apply(func) {\n  return func.bind.apply(func, [null].concat(slice(arguments, 1)));\n}\n\nvar nextTick = setTimeout;\n\nvar noop = function noop() {};\n\nfunction raf(func) {\n  return requestAnimationFrame(func);\n}\n\nfunction typeOf(type, subject) {\n  return _typeof(subject) === type;\n}\n\nfunction isObject(subject) {\n  return !isNull(subject) && typeOf(\"object\", subject);\n}\n\nvar isArray = Array.isArray;\nvar isFunction = apply(typeOf, \"function\");\nvar isString = apply(typeOf, \"string\");\nvar isUndefined = apply(typeOf, \"undefined\");\n\nfunction isNull(subject) {\n  return subject === null;\n}\n\nfunction isHTMLElement(subject) {\n  try {\n    return subject instanceof (subject.ownerDocument.defaultView || window).HTMLElement;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction toArray(value) {\n  return isArray(value) ? value : [value];\n}\n\nfunction forEach(values, iteratee) {\n  toArray(values).forEach(iteratee);\n}\n\nfunction includes(array, value) {\n  return array.indexOf(value) > -1;\n}\n\nfunction push(array, items) {\n  array.push.apply(array, toArray(items));\n  return array;\n}\n\nfunction toggleClass(elm, classes, add) {\n  if (elm) {\n    forEach(classes, function (name) {\n      if (name) {\n        elm.classList[add ? \"add\" : \"remove\"](name);\n      }\n    });\n  }\n}\n\nfunction addClass(elm, classes) {\n  toggleClass(elm, isString(classes) ? classes.split(\" \") : classes, true);\n}\n\nfunction append(parent, children) {\n  forEach(children, parent.appendChild.bind(parent));\n}\n\nfunction before(nodes, ref) {\n  forEach(nodes, function (node) {\n    var parent = (ref || node).parentNode;\n\n    if (parent) {\n      parent.insertBefore(node, ref);\n    }\n  });\n}\n\nfunction matches(elm, selector) {\n  return isHTMLElement(elm) && (elm[\"msMatchesSelector\"] || elm.matches).call(elm, selector);\n}\n\nfunction children(parent, selector) {\n  var children2 = parent ? slice(parent.children) : [];\n  return selector ? children2.filter(function (child) {\n    return matches(child, selector);\n  }) : children2;\n}\n\nfunction child(parent, selector) {\n  return selector ? children(parent, selector)[0] : parent.firstElementChild;\n}\n\nvar ownKeys = Object.keys;\n\nfunction forOwn(object, iteratee, right) {\n  if (object) {\n    (right ? ownKeys(object).reverse() : ownKeys(object)).forEach(function (key) {\n      key !== \"__proto__\" && iteratee(object[key], key);\n    });\n  }\n\n  return object;\n}\n\nfunction assign(object) {\n  slice(arguments, 1).forEach(function (source) {\n    forOwn(source, function (value, key) {\n      object[key] = source[key];\n    });\n  });\n  return object;\n}\n\nfunction merge(object) {\n  slice(arguments, 1).forEach(function (source) {\n    forOwn(source, function (value, key) {\n      if (isArray(value)) {\n        object[key] = value.slice();\n      } else if (isObject(value)) {\n        object[key] = merge({}, isObject(object[key]) ? object[key] : {}, value);\n      } else {\n        object[key] = value;\n      }\n    });\n  });\n  return object;\n}\n\nfunction omit(object, keys) {\n  forEach(keys || ownKeys(object), function (key) {\n    delete object[key];\n  });\n}\n\nfunction removeAttribute(elms, attrs) {\n  forEach(elms, function (elm) {\n    forEach(attrs, function (attr) {\n      elm && elm.removeAttribute(attr);\n    });\n  });\n}\n\nfunction setAttribute(elms, attrs, value) {\n  if (isObject(attrs)) {\n    forOwn(attrs, function (value2, name) {\n      setAttribute(elms, name, value2);\n    });\n  } else {\n    forEach(elms, function (elm) {\n      isNull(value) || value === \"\" ? removeAttribute(elm, attrs) : elm.setAttribute(attrs, String(value));\n    });\n  }\n}\n\nfunction create(tag, attrs, parent) {\n  var elm = document.createElement(tag);\n\n  if (attrs) {\n    isString(attrs) ? addClass(elm, attrs) : setAttribute(elm, attrs);\n  }\n\n  parent && append(parent, elm);\n  return elm;\n}\n\nfunction style(elm, prop, value) {\n  if (isUndefined(value)) {\n    return getComputedStyle(elm)[prop];\n  }\n\n  if (!isNull(value)) {\n    elm.style[prop] = \"\" + value;\n  }\n}\n\nfunction display(elm, display2) {\n  style(elm, \"display\", display2);\n}\n\nfunction focus(elm) {\n  elm[\"setActive\"] && elm[\"setActive\"]() || elm.focus({\n    preventScroll: true\n  });\n}\n\nfunction getAttribute(elm, attr) {\n  return elm.getAttribute(attr);\n}\n\nfunction hasClass(elm, className) {\n  return elm && elm.classList.contains(className);\n}\n\nfunction rect(target) {\n  return target.getBoundingClientRect();\n}\n\nfunction remove(nodes) {\n  forEach(nodes, function (node) {\n    if (node && node.parentNode) {\n      node.parentNode.removeChild(node);\n    }\n  });\n}\n\nfunction parseHtml(html) {\n  return child(new DOMParser().parseFromString(html, \"text/html\").body);\n}\n\nfunction prevent(e, stopPropagation) {\n  e.preventDefault();\n\n  if (stopPropagation) {\n    e.stopPropagation();\n    e.stopImmediatePropagation();\n  }\n}\n\nfunction query(parent, selector) {\n  return parent && parent.querySelector(selector);\n}\n\nfunction queryAll(parent, selector) {\n  return selector ? slice(parent.querySelectorAll(selector)) : [];\n}\n\nfunction removeClass(elm, classes) {\n  toggleClass(elm, classes, false);\n}\n\nfunction timeOf(e) {\n  return e.timeStamp;\n}\n\nfunction unit(value) {\n  return isString(value) ? value : value ? value + \"px\" : \"\";\n}\n\nvar PROJECT_CODE = \"splide\";\nvar DATA_ATTRIBUTE = \"data-\" + PROJECT_CODE;\n\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(\"[\" + PROJECT_CODE + \"] \" + (message || \"\"));\n  }\n}\n\nvar min = Math.min,\n    max = Math.max,\n    floor = Math.floor,\n    ceil = Math.ceil,\n    abs = Math.abs;\n\nfunction approximatelyEqual(x, y, epsilon) {\n  return abs(x - y) < epsilon;\n}\n\nfunction between(number, x, y, exclusive) {\n  var minimum = min(x, y);\n  var maximum = max(x, y);\n  return exclusive ? minimum < number && number < maximum : minimum <= number && number <= maximum;\n}\n\nfunction clamp(number, x, y) {\n  var minimum = min(x, y);\n  var maximum = max(x, y);\n  return min(max(minimum, number), maximum);\n}\n\nfunction sign(x) {\n  return +(x > 0) - +(x < 0);\n}\n\nfunction camelToKebab(string) {\n  return string.replace(/([a-z0-9])([A-Z])/g, \"$1-$2\").toLowerCase();\n}\n\nfunction format(string, replacements) {\n  forEach(replacements, function (replacement) {\n    string = string.replace(\"%s\", \"\" + replacement);\n  });\n  return string;\n}\n\nfunction pad(number) {\n  return number < 10 ? \"0\" + number : \"\" + number;\n}\n\nvar ids = {};\n\nfunction uniqueId(prefix) {\n  return \"\" + prefix + pad(ids[prefix] = (ids[prefix] || 0) + 1);\n}\n\nfunction EventBinder() {\n  var listeners = [];\n\n  function bind(targets, events, callback, options) {\n    forEachEvent(targets, events, function (target, event, namespace) {\n      var isEventTarget = (\"addEventListener\" in target);\n      var remover = isEventTarget ? target.removeEventListener.bind(target, event, callback, options) : target[\"removeListener\"].bind(target, callback);\n      isEventTarget ? target.addEventListener(event, callback, options) : target[\"addListener\"](callback);\n      listeners.push([target, event, namespace, callback, remover]);\n    });\n  }\n\n  function unbind(targets, events, callback) {\n    forEachEvent(targets, events, function (target, event, namespace) {\n      listeners = listeners.filter(function (listener) {\n        if (listener[0] === target && listener[1] === event && listener[2] === namespace && (!callback || listener[3] === callback)) {\n          listener[4]();\n          return false;\n        }\n\n        return true;\n      });\n    });\n  }\n\n  function dispatch(target, type, detail) {\n    var e;\n    var bubbles = true;\n\n    if (typeof CustomEvent === \"function\") {\n      e = new CustomEvent(type, {\n        bubbles: bubbles,\n        detail: detail\n      });\n    } else {\n      e = document.createEvent(\"CustomEvent\");\n      e.initCustomEvent(type, bubbles, false, detail);\n    }\n\n    target.dispatchEvent(e);\n    return e;\n  }\n\n  function forEachEvent(targets, events, iteratee) {\n    forEach(targets, function (target) {\n      target && forEach(events, function (events2) {\n        events2.split(\" \").forEach(function (eventNS) {\n          var fragment = eventNS.split(\".\");\n          iteratee(target, fragment[0], fragment[1]);\n        });\n      });\n    });\n  }\n\n  function destroy() {\n    listeners.forEach(function (data) {\n      data[4]();\n    });\n    empty(listeners);\n  }\n\n  return {\n    bind: bind,\n    unbind: unbind,\n    dispatch: dispatch,\n    destroy: destroy\n  };\n}\n\nvar EVENT_MOUNTED = \"mounted\";\nvar EVENT_READY = \"ready\";\nvar EVENT_MOVE = \"move\";\nvar EVENT_MOVED = \"moved\";\nvar EVENT_CLICK = \"click\";\nvar EVENT_ACTIVE = \"active\";\nvar EVENT_INACTIVE = \"inactive\";\nvar EVENT_VISIBLE = \"visible\";\nvar EVENT_HIDDEN = \"hidden\";\nvar EVENT_REFRESH = \"refresh\";\nvar EVENT_UPDATED = \"updated\";\nvar EVENT_RESIZE = \"resize\";\nvar EVENT_RESIZED = \"resized\";\nvar EVENT_DRAG = \"drag\";\nvar EVENT_DRAGGING = \"dragging\";\nvar EVENT_DRAGGED = \"dragged\";\nvar EVENT_SCROLL = \"scroll\";\nvar EVENT_SCROLLED = \"scrolled\";\nvar EVENT_OVERFLOW = \"overflow\";\nvar EVENT_DESTROY = \"destroy\";\nvar EVENT_ARROWS_MOUNTED = \"arrows:mounted\";\nvar EVENT_ARROWS_UPDATED = \"arrows:updated\";\nvar EVENT_PAGINATION_MOUNTED = \"pagination:mounted\";\nvar EVENT_PAGINATION_UPDATED = \"pagination:updated\";\nvar EVENT_NAVIGATION_MOUNTED = \"navigation:mounted\";\nvar EVENT_AUTOPLAY_PLAY = \"autoplay:play\";\nvar EVENT_AUTOPLAY_PLAYING = \"autoplay:playing\";\nvar EVENT_AUTOPLAY_PAUSE = \"autoplay:pause\";\nvar EVENT_LAZYLOAD_LOADED = \"lazyload:loaded\";\nvar EVENT_SLIDE_KEYDOWN = \"sk\";\nvar EVENT_SHIFTED = \"sh\";\nvar EVENT_END_INDEX_CHANGED = \"ei\";\n\nfunction EventInterface(Splide2) {\n  var bus = Splide2 ? Splide2.event.bus : document.createDocumentFragment();\n  var binder = EventBinder();\n\n  function on(events, callback) {\n    binder.bind(bus, toArray(events).join(\" \"), function (e) {\n      callback.apply(callback, isArray(e.detail) ? e.detail : []);\n    });\n  }\n\n  function emit(event) {\n    binder.dispatch(bus, event, slice(arguments, 1));\n  }\n\n  if (Splide2) {\n    Splide2.event.on(EVENT_DESTROY, binder.destroy);\n  }\n\n  return assign(binder, {\n    bus: bus,\n    on: on,\n    off: apply(binder.unbind, bus),\n    emit: emit\n  });\n}\n\nfunction RequestInterval(interval, onInterval, onUpdate, limit) {\n  var now = Date.now;\n  var startTime;\n  var rate = 0;\n  var id;\n  var paused = true;\n  var count = 0;\n\n  function update() {\n    if (!paused) {\n      rate = interval ? min((now() - startTime) / interval, 1) : 1;\n      onUpdate && onUpdate(rate);\n\n      if (rate >= 1) {\n        onInterval();\n        startTime = now();\n\n        if (limit && ++count >= limit) {\n          return pause();\n        }\n      }\n\n      id = raf(update);\n    }\n  }\n\n  function start(resume) {\n    resume || cancel();\n    startTime = now() - (resume ? rate * interval : 0);\n    paused = false;\n    id = raf(update);\n  }\n\n  function pause() {\n    paused = true;\n  }\n\n  function rewind() {\n    startTime = now();\n    rate = 0;\n\n    if (onUpdate) {\n      onUpdate(rate);\n    }\n  }\n\n  function cancel() {\n    id && cancelAnimationFrame(id);\n    rate = 0;\n    id = 0;\n    paused = true;\n  }\n\n  function set(time) {\n    interval = time;\n  }\n\n  function isPaused() {\n    return paused;\n  }\n\n  return {\n    start: start,\n    rewind: rewind,\n    pause: pause,\n    cancel: cancel,\n    set: set,\n    isPaused: isPaused\n  };\n}\n\nfunction State(initialState) {\n  var state = initialState;\n\n  function set(value) {\n    state = value;\n  }\n\n  function is(states) {\n    return includes(toArray(states), state);\n  }\n\n  return {\n    set: set,\n    is: is\n  };\n}\n\nfunction Throttle(func, duration) {\n  var interval = RequestInterval(duration || 0, func, null, 1);\n  return function () {\n    interval.isPaused() && interval.start();\n  };\n}\n\nfunction Media(Splide2, Components2, options) {\n  var state = Splide2.state;\n  var breakpoints = options.breakpoints || {};\n  var reducedMotion = options.reducedMotion || {};\n  var binder = EventBinder();\n  var queries = [];\n\n  function setup() {\n    var isMin = options.mediaQuery === \"min\";\n    ownKeys(breakpoints).sort(function (n, m) {\n      return isMin ? +n - +m : +m - +n;\n    }).forEach(function (key) {\n      register(breakpoints[key], \"(\" + (isMin ? \"min\" : \"max\") + \"-width:\" + key + \"px)\");\n    });\n    register(reducedMotion, MEDIA_PREFERS_REDUCED_MOTION);\n    update();\n  }\n\n  function destroy(completely) {\n    if (completely) {\n      binder.destroy();\n    }\n  }\n\n  function register(options2, query) {\n    var queryList = matchMedia(query);\n    binder.bind(queryList, \"change\", update);\n    queries.push([options2, queryList]);\n  }\n\n  function update() {\n    var destroyed = state.is(DESTROYED);\n    var direction = options.direction;\n    var merged = queries.reduce(function (merged2, entry) {\n      return merge(merged2, entry[1].matches ? entry[0] : {});\n    }, {});\n    omit(options);\n    set(merged);\n\n    if (options.destroy) {\n      Splide2.destroy(options.destroy === \"completely\");\n    } else if (destroyed) {\n      destroy(true);\n      Splide2.mount();\n    } else {\n      direction !== options.direction && Splide2.refresh();\n    }\n  }\n\n  function reduce(enable) {\n    if (matchMedia(MEDIA_PREFERS_REDUCED_MOTION).matches) {\n      enable ? merge(options, reducedMotion) : omit(options, ownKeys(reducedMotion));\n    }\n  }\n\n  function set(opts, base, notify) {\n    merge(options, opts);\n    base && merge(Object.getPrototypeOf(options), opts);\n\n    if (notify || !state.is(CREATED)) {\n      Splide2.emit(EVENT_UPDATED, options);\n    }\n  }\n\n  return {\n    setup: setup,\n    destroy: destroy,\n    reduce: reduce,\n    set: set\n  };\n}\n\nvar ARROW = \"Arrow\";\nvar ARROW_LEFT = ARROW + \"Left\";\nvar ARROW_RIGHT = ARROW + \"Right\";\nvar ARROW_UP = ARROW + \"Up\";\nvar ARROW_DOWN = ARROW + \"Down\";\nvar LTR = \"ltr\";\nvar RTL = \"rtl\";\nvar TTB = \"ttb\";\nvar ORIENTATION_MAP = {\n  width: [\"height\"],\n  left: [\"top\", \"right\"],\n  right: [\"bottom\", \"left\"],\n  x: [\"y\"],\n  X: [\"Y\"],\n  Y: [\"X\"],\n  ArrowLeft: [ARROW_UP, ARROW_RIGHT],\n  ArrowRight: [ARROW_DOWN, ARROW_LEFT]\n};\n\nfunction Direction(Splide2, Components2, options) {\n  function resolve(prop, axisOnly, direction) {\n    direction = direction || options.direction;\n    var index = direction === RTL && !axisOnly ? 1 : direction === TTB ? 0 : -1;\n    return ORIENTATION_MAP[prop] && ORIENTATION_MAP[prop][index] || prop.replace(/width|left|right/i, function (match, offset) {\n      var replacement = ORIENTATION_MAP[match.toLowerCase()][index] || match;\n      return offset > 0 ? replacement.charAt(0).toUpperCase() + replacement.slice(1) : replacement;\n    });\n  }\n\n  function orient(value) {\n    return value * (options.direction === RTL ? 1 : -1);\n  }\n\n  return {\n    resolve: resolve,\n    orient: orient\n  };\n}\n\nvar ROLE = \"role\";\nvar TAB_INDEX = \"tabindex\";\nvar DISABLED = \"disabled\";\nvar ARIA_PREFIX = \"aria-\";\nvar ARIA_CONTROLS = ARIA_PREFIX + \"controls\";\nvar ARIA_CURRENT = ARIA_PREFIX + \"current\";\nvar ARIA_SELECTED = ARIA_PREFIX + \"selected\";\nvar ARIA_LABEL = ARIA_PREFIX + \"label\";\nvar ARIA_LABELLEDBY = ARIA_PREFIX + \"labelledby\";\nvar ARIA_HIDDEN = ARIA_PREFIX + \"hidden\";\nvar ARIA_ORIENTATION = ARIA_PREFIX + \"orientation\";\nvar ARIA_ROLEDESCRIPTION = ARIA_PREFIX + \"roledescription\";\nvar ARIA_LIVE = ARIA_PREFIX + \"live\";\nvar ARIA_BUSY = ARIA_PREFIX + \"busy\";\nvar ARIA_ATOMIC = ARIA_PREFIX + \"atomic\";\nvar ALL_ATTRIBUTES = [ROLE, TAB_INDEX, DISABLED, ARIA_CONTROLS, ARIA_CURRENT, ARIA_LABEL, ARIA_LABELLEDBY, ARIA_HIDDEN, ARIA_ORIENTATION, ARIA_ROLEDESCRIPTION];\nvar CLASS_PREFIX = PROJECT_CODE + \"__\";\nvar STATUS_CLASS_PREFIX = \"is-\";\nvar CLASS_ROOT = PROJECT_CODE;\nvar CLASS_TRACK = CLASS_PREFIX + \"track\";\nvar CLASS_LIST = CLASS_PREFIX + \"list\";\nvar CLASS_SLIDE = CLASS_PREFIX + \"slide\";\nvar CLASS_CLONE = CLASS_SLIDE + \"--clone\";\nvar CLASS_CONTAINER = CLASS_SLIDE + \"__container\";\nvar CLASS_ARROWS = CLASS_PREFIX + \"arrows\";\nvar CLASS_ARROW = CLASS_PREFIX + \"arrow\";\nvar CLASS_ARROW_PREV = CLASS_ARROW + \"--prev\";\nvar CLASS_ARROW_NEXT = CLASS_ARROW + \"--next\";\nvar CLASS_PAGINATION = CLASS_PREFIX + \"pagination\";\nvar CLASS_PAGINATION_PAGE = CLASS_PAGINATION + \"__page\";\nvar CLASS_PROGRESS = CLASS_PREFIX + \"progress\";\nvar CLASS_PROGRESS_BAR = CLASS_PROGRESS + \"__bar\";\nvar CLASS_TOGGLE = CLASS_PREFIX + \"toggle\";\nvar CLASS_TOGGLE_PLAY = CLASS_TOGGLE + \"__play\";\nvar CLASS_TOGGLE_PAUSE = CLASS_TOGGLE + \"__pause\";\nvar CLASS_SPINNER = CLASS_PREFIX + \"spinner\";\nvar CLASS_SR = CLASS_PREFIX + \"sr\";\nvar CLASS_INITIALIZED = STATUS_CLASS_PREFIX + \"initialized\";\nvar CLASS_ACTIVE = STATUS_CLASS_PREFIX + \"active\";\nvar CLASS_PREV = STATUS_CLASS_PREFIX + \"prev\";\nvar CLASS_NEXT = STATUS_CLASS_PREFIX + \"next\";\nvar CLASS_VISIBLE = STATUS_CLASS_PREFIX + \"visible\";\nvar CLASS_LOADING = STATUS_CLASS_PREFIX + \"loading\";\nvar CLASS_FOCUS_IN = STATUS_CLASS_PREFIX + \"focus-in\";\nvar CLASS_OVERFLOW = STATUS_CLASS_PREFIX + \"overflow\";\nvar STATUS_CLASSES = [CLASS_ACTIVE, CLASS_VISIBLE, CLASS_PREV, CLASS_NEXT, CLASS_LOADING, CLASS_FOCUS_IN, CLASS_OVERFLOW];\nvar CLASSES = {\n  slide: CLASS_SLIDE,\n  clone: CLASS_CLONE,\n  arrows: CLASS_ARROWS,\n  arrow: CLASS_ARROW,\n  prev: CLASS_ARROW_PREV,\n  next: CLASS_ARROW_NEXT,\n  pagination: CLASS_PAGINATION,\n  page: CLASS_PAGINATION_PAGE,\n  spinner: CLASS_SPINNER\n};\n\nfunction closest(from, selector) {\n  if (isFunction(from.closest)) {\n    return from.closest(selector);\n  }\n\n  var elm = from;\n\n  while (elm && elm.nodeType === 1) {\n    if (matches(elm, selector)) {\n      break;\n    }\n\n    elm = elm.parentElement;\n  }\n\n  return elm;\n}\n\nvar FRICTION = 5;\nvar LOG_INTERVAL = 200;\nvar POINTER_DOWN_EVENTS = \"touchstart mousedown\";\nvar POINTER_MOVE_EVENTS = \"touchmove mousemove\";\nvar POINTER_UP_EVENTS = \"touchend touchcancel mouseup click\";\n\nfunction Elements(Splide2, Components2, options) {\n  var _EventInterface = EventInterface(Splide2),\n      on = _EventInterface.on,\n      bind = _EventInterface.bind;\n\n  var root = Splide2.root;\n  var i18n = options.i18n;\n  var elements = {};\n  var slides = [];\n  var rootClasses = [];\n  var trackClasses = [];\n  var track;\n  var list;\n  var isUsingKey;\n\n  function setup() {\n    collect();\n    init();\n    update();\n  }\n\n  function mount() {\n    on(EVENT_REFRESH, destroy);\n    on(EVENT_REFRESH, setup);\n    on(EVENT_UPDATED, update);\n    bind(document, POINTER_DOWN_EVENTS + \" keydown\", function (e) {\n      isUsingKey = e.type === \"keydown\";\n    }, {\n      capture: true\n    });\n    bind(root, \"focusin\", function () {\n      toggleClass(root, CLASS_FOCUS_IN, !!isUsingKey);\n    });\n  }\n\n  function destroy(completely) {\n    var attrs = ALL_ATTRIBUTES.concat(\"style\");\n    empty(slides);\n    removeClass(root, rootClasses);\n    removeClass(track, trackClasses);\n    removeAttribute([track, list], attrs);\n    removeAttribute(root, completely ? attrs : [\"style\", ARIA_ROLEDESCRIPTION]);\n  }\n\n  function update() {\n    removeClass(root, rootClasses);\n    removeClass(track, trackClasses);\n    rootClasses = getClasses(CLASS_ROOT);\n    trackClasses = getClasses(CLASS_TRACK);\n    addClass(root, rootClasses);\n    addClass(track, trackClasses);\n    setAttribute(root, ARIA_LABEL, options.label);\n    setAttribute(root, ARIA_LABELLEDBY, options.labelledby);\n  }\n\n  function collect() {\n    track = find(\".\" + CLASS_TRACK);\n    list = child(track, \".\" + CLASS_LIST);\n    assert(track && list, \"A track/list element is missing.\");\n    push(slides, children(list, \".\" + CLASS_SLIDE + \":not(.\" + CLASS_CLONE + \")\"));\n    forOwn({\n      arrows: CLASS_ARROWS,\n      pagination: CLASS_PAGINATION,\n      prev: CLASS_ARROW_PREV,\n      next: CLASS_ARROW_NEXT,\n      bar: CLASS_PROGRESS_BAR,\n      toggle: CLASS_TOGGLE\n    }, function (className, key) {\n      elements[key] = find(\".\" + className);\n    });\n    assign(elements, {\n      root: root,\n      track: track,\n      list: list,\n      slides: slides\n    });\n  }\n\n  function init() {\n    var id = root.id || uniqueId(PROJECT_CODE);\n    var role = options.role;\n    root.id = id;\n    track.id = track.id || id + \"-track\";\n    list.id = list.id || id + \"-list\";\n\n    if (!getAttribute(root, ROLE) && root.tagName !== \"SECTION\" && role) {\n      setAttribute(root, ROLE, role);\n    }\n\n    setAttribute(root, ARIA_ROLEDESCRIPTION, i18n.carousel);\n    setAttribute(list, ROLE, \"presentation\");\n  }\n\n  function find(selector) {\n    var elm = query(root, selector);\n    return elm && closest(elm, \".\" + CLASS_ROOT) === root ? elm : void 0;\n  }\n\n  function getClasses(base) {\n    return [base + \"--\" + options.type, base + \"--\" + options.direction, options.drag && base + \"--draggable\", options.isNavigation && base + \"--nav\", base === CLASS_ROOT && CLASS_ACTIVE];\n  }\n\n  return assign(elements, {\n    setup: setup,\n    mount: mount,\n    destroy: destroy\n  });\n}\n\nvar SLIDE = \"slide\";\nvar LOOP = \"loop\";\nvar FADE = \"fade\";\n\nfunction Slide$1(Splide2, index, slideIndex, slide) {\n  var event = EventInterface(Splide2);\n  var on = event.on,\n      emit = event.emit,\n      bind = event.bind;\n  var Components = Splide2.Components,\n      root = Splide2.root,\n      options = Splide2.options;\n  var isNavigation = options.isNavigation,\n      updateOnMove = options.updateOnMove,\n      i18n = options.i18n,\n      pagination = options.pagination,\n      slideFocus = options.slideFocus;\n  var resolve = Components.Direction.resolve;\n  var styles = getAttribute(slide, \"style\");\n  var label = getAttribute(slide, ARIA_LABEL);\n  var isClone = slideIndex > -1;\n  var container = child(slide, \".\" + CLASS_CONTAINER);\n  var destroyed;\n\n  function mount() {\n    if (!isClone) {\n      slide.id = root.id + \"-slide\" + pad(index + 1);\n      setAttribute(slide, ROLE, pagination ? \"tabpanel\" : \"group\");\n      setAttribute(slide, ARIA_ROLEDESCRIPTION, i18n.slide);\n      setAttribute(slide, ARIA_LABEL, label || format(i18n.slideLabel, [index + 1, Splide2.length]));\n    }\n\n    listen();\n  }\n\n  function listen() {\n    bind(slide, \"click\", apply(emit, EVENT_CLICK, self));\n    bind(slide, \"keydown\", apply(emit, EVENT_SLIDE_KEYDOWN, self));\n    on([EVENT_MOVED, EVENT_SHIFTED, EVENT_SCROLLED], update);\n    on(EVENT_NAVIGATION_MOUNTED, initNavigation);\n\n    if (updateOnMove) {\n      on(EVENT_MOVE, onMove);\n    }\n  }\n\n  function destroy() {\n    destroyed = true;\n    event.destroy();\n    removeClass(slide, STATUS_CLASSES);\n    removeAttribute(slide, ALL_ATTRIBUTES);\n    setAttribute(slide, \"style\", styles);\n    setAttribute(slide, ARIA_LABEL, label || \"\");\n  }\n\n  function initNavigation() {\n    var controls = Splide2.splides.map(function (target) {\n      var Slide2 = target.splide.Components.Slides.getAt(index);\n      return Slide2 ? Slide2.slide.id : \"\";\n    }).join(\" \");\n    setAttribute(slide, ARIA_LABEL, format(i18n.slideX, (isClone ? slideIndex : index) + 1));\n    setAttribute(slide, ARIA_CONTROLS, controls);\n    setAttribute(slide, ROLE, slideFocus ? \"button\" : \"\");\n    slideFocus && removeAttribute(slide, ARIA_ROLEDESCRIPTION);\n  }\n\n  function onMove() {\n    if (!destroyed) {\n      update();\n    }\n  }\n\n  function update() {\n    if (!destroyed) {\n      var curr = Splide2.index;\n      updateActivity();\n      updateVisibility();\n      toggleClass(slide, CLASS_PREV, index === curr - 1);\n      toggleClass(slide, CLASS_NEXT, index === curr + 1);\n    }\n  }\n\n  function updateActivity() {\n    var active = isActive();\n\n    if (active !== hasClass(slide, CLASS_ACTIVE)) {\n      toggleClass(slide, CLASS_ACTIVE, active);\n      setAttribute(slide, ARIA_CURRENT, isNavigation && active || \"\");\n      emit(active ? EVENT_ACTIVE : EVENT_INACTIVE, self);\n    }\n  }\n\n  function updateVisibility() {\n    var visible = isVisible();\n    var hidden = !visible && (!isActive() || isClone);\n\n    if (!Splide2.state.is([MOVING, SCROLLING])) {\n      setAttribute(slide, ARIA_HIDDEN, hidden || \"\");\n    }\n\n    setAttribute(queryAll(slide, options.focusableNodes || \"\"), TAB_INDEX, hidden ? -1 : \"\");\n\n    if (slideFocus) {\n      setAttribute(slide, TAB_INDEX, hidden ? -1 : 0);\n    }\n\n    if (visible !== hasClass(slide, CLASS_VISIBLE)) {\n      toggleClass(slide, CLASS_VISIBLE, visible);\n      emit(visible ? EVENT_VISIBLE : EVENT_HIDDEN, self);\n    }\n\n    if (!visible && document.activeElement === slide) {\n      var Slide2 = Components.Slides.getAt(Splide2.index);\n      Slide2 && focus(Slide2.slide);\n    }\n  }\n\n  function style$1(prop, value, useContainer) {\n    style(useContainer && container || slide, prop, value);\n  }\n\n  function isActive() {\n    var curr = Splide2.index;\n    return curr === index || options.cloneStatus && curr === slideIndex;\n  }\n\n  function isVisible() {\n    if (Splide2.is(FADE)) {\n      return isActive();\n    }\n\n    var trackRect = rect(Components.Elements.track);\n    var slideRect = rect(slide);\n    var left = resolve(\"left\", true);\n    var right = resolve(\"right\", true);\n    return floor(trackRect[left]) <= ceil(slideRect[left]) && floor(slideRect[right]) <= ceil(trackRect[right]);\n  }\n\n  function isWithin(from, distance) {\n    var diff = abs(from - index);\n\n    if (!isClone && (options.rewind || Splide2.is(LOOP))) {\n      diff = min(diff, Splide2.length - diff);\n    }\n\n    return diff <= distance;\n  }\n\n  var self = {\n    index: index,\n    slideIndex: slideIndex,\n    slide: slide,\n    container: container,\n    isClone: isClone,\n    mount: mount,\n    destroy: destroy,\n    update: update,\n    style: style$1,\n    isWithin: isWithin\n  };\n  return self;\n}\n\nfunction Slides(Splide2, Components2, options) {\n  var _EventInterface2 = EventInterface(Splide2),\n      on = _EventInterface2.on,\n      emit = _EventInterface2.emit,\n      bind = _EventInterface2.bind;\n\n  var _Components2$Elements = Components2.Elements,\n      slides = _Components2$Elements.slides,\n      list = _Components2$Elements.list;\n  var Slides2 = [];\n\n  function mount() {\n    init();\n    on(EVENT_REFRESH, destroy);\n    on(EVENT_REFRESH, init);\n  }\n\n  function init() {\n    slides.forEach(function (slide, index) {\n      register(slide, index, -1);\n    });\n  }\n\n  function destroy() {\n    forEach$1(function (Slide2) {\n      Slide2.destroy();\n    });\n    empty(Slides2);\n  }\n\n  function update() {\n    forEach$1(function (Slide2) {\n      Slide2.update();\n    });\n  }\n\n  function register(slide, index, slideIndex) {\n    var object = Slide$1(Splide2, index, slideIndex, slide);\n    object.mount();\n    Slides2.push(object);\n    Slides2.sort(function (Slide1, Slide2) {\n      return Slide1.index - Slide2.index;\n    });\n  }\n\n  function get(excludeClones) {\n    return excludeClones ? filter(function (Slide2) {\n      return !Slide2.isClone;\n    }) : Slides2;\n  }\n\n  function getIn(page) {\n    var Controller = Components2.Controller;\n    var index = Controller.toIndex(page);\n    var max = Controller.hasFocus() ? 1 : options.perPage;\n    return filter(function (Slide2) {\n      return between(Slide2.index, index, index + max - 1);\n    });\n  }\n\n  function getAt(index) {\n    return filter(index)[0];\n  }\n\n  function add(items, index) {\n    forEach(items, function (slide) {\n      if (isString(slide)) {\n        slide = parseHtml(slide);\n      }\n\n      if (isHTMLElement(slide)) {\n        var ref = slides[index];\n        ref ? before(slide, ref) : append(list, slide);\n        addClass(slide, options.classes.slide);\n        observeImages(slide, apply(emit, EVENT_RESIZE));\n      }\n    });\n    emit(EVENT_REFRESH);\n  }\n\n  function remove$1(matcher) {\n    remove(filter(matcher).map(function (Slide2) {\n      return Slide2.slide;\n    }));\n    emit(EVENT_REFRESH);\n  }\n\n  function forEach$1(iteratee, excludeClones) {\n    get(excludeClones).forEach(iteratee);\n  }\n\n  function filter(matcher) {\n    return Slides2.filter(isFunction(matcher) ? matcher : function (Slide2) {\n      return isString(matcher) ? matches(Slide2.slide, matcher) : includes(toArray(matcher), Slide2.index);\n    });\n  }\n\n  function style(prop, value, useContainer) {\n    forEach$1(function (Slide2) {\n      Slide2.style(prop, value, useContainer);\n    });\n  }\n\n  function observeImages(elm, callback) {\n    var images = queryAll(elm, \"img\");\n    var length = images.length;\n\n    if (length) {\n      images.forEach(function (img) {\n        bind(img, \"load error\", function () {\n          if (! --length) {\n            callback();\n          }\n        });\n      });\n    } else {\n      callback();\n    }\n  }\n\n  function getLength(excludeClones) {\n    return excludeClones ? slides.length : Slides2.length;\n  }\n\n  function isEnough() {\n    return Slides2.length > options.perPage;\n  }\n\n  return {\n    mount: mount,\n    destroy: destroy,\n    update: update,\n    register: register,\n    get: get,\n    getIn: getIn,\n    getAt: getAt,\n    add: add,\n    remove: remove$1,\n    forEach: forEach$1,\n    filter: filter,\n    style: style,\n    getLength: getLength,\n    isEnough: isEnough\n  };\n}\n\nfunction Layout(Splide2, Components2, options) {\n  var _EventInterface3 = EventInterface(Splide2),\n      on = _EventInterface3.on,\n      bind = _EventInterface3.bind,\n      emit = _EventInterface3.emit;\n\n  var Slides = Components2.Slides;\n  var resolve = Components2.Direction.resolve;\n  var _Components2$Elements2 = Components2.Elements,\n      root = _Components2$Elements2.root,\n      track = _Components2$Elements2.track,\n      list = _Components2$Elements2.list;\n  var getAt = Slides.getAt,\n      styleSlides = Slides.style;\n  var vertical;\n  var rootRect;\n  var overflow;\n\n  function mount() {\n    init();\n    bind(window, \"resize load\", Throttle(apply(emit, EVENT_RESIZE)));\n    on([EVENT_UPDATED, EVENT_REFRESH], init);\n    on(EVENT_RESIZE, resize);\n  }\n\n  function init() {\n    vertical = options.direction === TTB;\n    style(root, \"maxWidth\", unit(options.width));\n    style(track, resolve(\"paddingLeft\"), cssPadding(false));\n    style(track, resolve(\"paddingRight\"), cssPadding(true));\n    resize(true);\n  }\n\n  function resize(force) {\n    var newRect = rect(root);\n\n    if (force || rootRect.width !== newRect.width || rootRect.height !== newRect.height) {\n      style(track, \"height\", cssTrackHeight());\n      styleSlides(resolve(\"marginRight\"), unit(options.gap));\n      styleSlides(\"width\", cssSlideWidth());\n      styleSlides(\"height\", cssSlideHeight(), true);\n      rootRect = newRect;\n      emit(EVENT_RESIZED);\n\n      if (overflow !== (overflow = isOverflow())) {\n        toggleClass(root, CLASS_OVERFLOW, overflow);\n        emit(EVENT_OVERFLOW, overflow);\n      }\n    }\n  }\n\n  function cssPadding(right) {\n    var padding = options.padding;\n    var prop = resolve(right ? \"right\" : \"left\");\n    return padding && unit(padding[prop] || (isObject(padding) ? 0 : padding)) || \"0px\";\n  }\n\n  function cssTrackHeight() {\n    var height = \"\";\n\n    if (vertical) {\n      height = cssHeight();\n      assert(height, \"height or heightRatio is missing.\");\n      height = \"calc(\" + height + \" - \" + cssPadding(false) + \" - \" + cssPadding(true) + \")\";\n    }\n\n    return height;\n  }\n\n  function cssHeight() {\n    return unit(options.height || rect(list).width * options.heightRatio);\n  }\n\n  function cssSlideWidth() {\n    return options.autoWidth ? null : unit(options.fixedWidth) || (vertical ? \"\" : cssSlideSize());\n  }\n\n  function cssSlideHeight() {\n    return unit(options.fixedHeight) || (vertical ? options.autoHeight ? null : cssSlideSize() : cssHeight());\n  }\n\n  function cssSlideSize() {\n    var gap = unit(options.gap);\n    return \"calc((100%\" + (gap && \" + \" + gap) + \")/\" + (options.perPage || 1) + (gap && \" - \" + gap) + \")\";\n  }\n\n  function listSize() {\n    return rect(list)[resolve(\"width\")];\n  }\n\n  function slideSize(index, withoutGap) {\n    var Slide = getAt(index || 0);\n    return Slide ? rect(Slide.slide)[resolve(\"width\")] + (withoutGap ? 0 : getGap()) : 0;\n  }\n\n  function totalSize(index, withoutGap) {\n    var Slide = getAt(index);\n\n    if (Slide) {\n      var right = rect(Slide.slide)[resolve(\"right\")];\n      var left = rect(list)[resolve(\"left\")];\n      return abs(right - left) + (withoutGap ? 0 : getGap());\n    }\n\n    return 0;\n  }\n\n  function sliderSize(withoutGap) {\n    return totalSize(Splide2.length - 1) - totalSize(0) + slideSize(0, withoutGap);\n  }\n\n  function getGap() {\n    var Slide = getAt(0);\n    return Slide && parseFloat(style(Slide.slide, resolve(\"marginRight\"))) || 0;\n  }\n\n  function getPadding(right) {\n    return parseFloat(style(track, resolve(\"padding\" + (right ? \"Right\" : \"Left\")))) || 0;\n  }\n\n  function isOverflow() {\n    return Splide2.is(FADE) || sliderSize(true) > listSize();\n  }\n\n  return {\n    mount: mount,\n    resize: resize,\n    listSize: listSize,\n    slideSize: slideSize,\n    sliderSize: sliderSize,\n    totalSize: totalSize,\n    getPadding: getPadding,\n    isOverflow: isOverflow\n  };\n}\n\nvar MULTIPLIER = 2;\n\nfunction Clones(Splide2, Components2, options) {\n  var event = EventInterface(Splide2);\n  var on = event.on;\n  var Elements = Components2.Elements,\n      Slides = Components2.Slides;\n  var resolve = Components2.Direction.resolve;\n  var clones = [];\n  var cloneCount;\n\n  function mount() {\n    on(EVENT_REFRESH, remount);\n    on([EVENT_UPDATED, EVENT_RESIZE], observe);\n\n    if (cloneCount = computeCloneCount()) {\n      generate(cloneCount);\n      Components2.Layout.resize(true);\n    }\n  }\n\n  function remount() {\n    destroy();\n    mount();\n  }\n\n  function destroy() {\n    remove(clones);\n    empty(clones);\n    event.destroy();\n  }\n\n  function observe() {\n    var count = computeCloneCount();\n\n    if (cloneCount !== count) {\n      if (cloneCount < count || !count) {\n        event.emit(EVENT_REFRESH);\n      }\n    }\n  }\n\n  function generate(count) {\n    var slides = Slides.get().slice();\n    var length = slides.length;\n\n    if (length) {\n      while (slides.length < count) {\n        push(slides, slides);\n      }\n\n      push(slides.slice(-count), slides.slice(0, count)).forEach(function (Slide, index) {\n        var isHead = index < count;\n        var clone = cloneDeep(Slide.slide, index);\n        isHead ? before(clone, slides[0].slide) : append(Elements.list, clone);\n        push(clones, clone);\n        Slides.register(clone, index - count + (isHead ? 0 : length), Slide.index);\n      });\n    }\n  }\n\n  function cloneDeep(elm, index) {\n    var clone = elm.cloneNode(true);\n    addClass(clone, options.classes.clone);\n    clone.id = Splide2.root.id + \"-clone\" + pad(index + 1);\n    return clone;\n  }\n\n  function computeCloneCount() {\n    var clones2 = options.clones;\n\n    if (!Splide2.is(LOOP)) {\n      clones2 = 0;\n    } else if (isUndefined(clones2)) {\n      var fixedSize = options[resolve(\"fixedWidth\")] && Components2.Layout.slideSize(0);\n      var fixedCount = fixedSize && ceil(rect(Elements.track)[resolve(\"width\")] / fixedSize);\n      clones2 = fixedCount || options[resolve(\"autoWidth\")] && Splide2.length || options.perPage * MULTIPLIER;\n    }\n\n    return clones2;\n  }\n\n  return {\n    mount: mount,\n    destroy: destroy\n  };\n}\n\nfunction Move(Splide2, Components2, options) {\n  var _EventInterface4 = EventInterface(Splide2),\n      on = _EventInterface4.on,\n      emit = _EventInterface4.emit;\n\n  var set = Splide2.state.set;\n  var _Components2$Layout = Components2.Layout,\n      slideSize = _Components2$Layout.slideSize,\n      getPadding = _Components2$Layout.getPadding,\n      totalSize = _Components2$Layout.totalSize,\n      listSize = _Components2$Layout.listSize,\n      sliderSize = _Components2$Layout.sliderSize;\n  var _Components2$Directio = Components2.Direction,\n      resolve = _Components2$Directio.resolve,\n      orient = _Components2$Directio.orient;\n  var _Components2$Elements3 = Components2.Elements,\n      list = _Components2$Elements3.list,\n      track = _Components2$Elements3.track;\n  var Transition;\n\n  function mount() {\n    Transition = Components2.Transition;\n    on([EVENT_MOUNTED, EVENT_RESIZED, EVENT_UPDATED, EVENT_REFRESH], reposition);\n  }\n\n  function reposition() {\n    if (!Components2.Controller.isBusy()) {\n      Components2.Scroll.cancel();\n      jump(Splide2.index);\n      Components2.Slides.update();\n    }\n  }\n\n  function move(dest, index, prev, callback) {\n    if (dest !== index && canShift(dest > prev)) {\n      cancel();\n      translate(shift(getPosition(), dest > prev), true);\n    }\n\n    set(MOVING);\n    emit(EVENT_MOVE, index, prev, dest);\n    Transition.start(index, function () {\n      set(IDLE);\n      emit(EVENT_MOVED, index, prev, dest);\n      callback && callback();\n    });\n  }\n\n  function jump(index) {\n    translate(toPosition(index, true));\n  }\n\n  function translate(position, preventLoop) {\n    if (!Splide2.is(FADE)) {\n      var destination = preventLoop ? position : loop(position);\n      style(list, \"transform\", \"translate\" + resolve(\"X\") + \"(\" + destination + \"px)\");\n      position !== destination && emit(EVENT_SHIFTED);\n    }\n  }\n\n  function loop(position) {\n    if (Splide2.is(LOOP)) {\n      var index = toIndex(position);\n      var exceededMax = index > Components2.Controller.getEnd();\n      var exceededMin = index < 0;\n\n      if (exceededMin || exceededMax) {\n        position = shift(position, exceededMax);\n      }\n    }\n\n    return position;\n  }\n\n  function shift(position, backwards) {\n    var excess = position - getLimit(backwards);\n    var size = sliderSize();\n    position -= orient(size * (ceil(abs(excess) / size) || 1)) * (backwards ? 1 : -1);\n    return position;\n  }\n\n  function cancel() {\n    translate(getPosition(), true);\n    Transition.cancel();\n  }\n\n  function toIndex(position) {\n    var Slides = Components2.Slides.get();\n    var index = 0;\n    var minDistance = Infinity;\n\n    for (var i = 0; i < Slides.length; i++) {\n      var slideIndex = Slides[i].index;\n      var distance = abs(toPosition(slideIndex, true) - position);\n\n      if (distance <= minDistance) {\n        minDistance = distance;\n        index = slideIndex;\n      } else {\n        break;\n      }\n    }\n\n    return index;\n  }\n\n  function toPosition(index, trimming) {\n    var position = orient(totalSize(index - 1) - offset(index));\n    return trimming ? trim(position) : position;\n  }\n\n  function getPosition() {\n    var left = resolve(\"left\");\n    return rect(list)[left] - rect(track)[left] + orient(getPadding(false));\n  }\n\n  function trim(position) {\n    if (options.trimSpace && Splide2.is(SLIDE)) {\n      position = clamp(position, 0, orient(sliderSize(true) - listSize()));\n    }\n\n    return position;\n  }\n\n  function offset(index) {\n    var focus = options.focus;\n    return focus === \"center\" ? (listSize() - slideSize(index, true)) / 2 : +focus * slideSize(index) || 0;\n  }\n\n  function getLimit(max) {\n    return toPosition(max ? Components2.Controller.getEnd() : 0, !!options.trimSpace);\n  }\n\n  function canShift(backwards) {\n    var shifted = orient(shift(getPosition(), backwards));\n    return backwards ? shifted >= 0 : shifted <= list[resolve(\"scrollWidth\")] - rect(track)[resolve(\"width\")];\n  }\n\n  function exceededLimit(max, position) {\n    position = isUndefined(position) ? getPosition() : position;\n    var exceededMin = max !== true && orient(position) < orient(getLimit(false));\n    var exceededMax = max !== false && orient(position) > orient(getLimit(true));\n    return exceededMin || exceededMax;\n  }\n\n  return {\n    mount: mount,\n    move: move,\n    jump: jump,\n    translate: translate,\n    shift: shift,\n    cancel: cancel,\n    toIndex: toIndex,\n    toPosition: toPosition,\n    getPosition: getPosition,\n    getLimit: getLimit,\n    exceededLimit: exceededLimit,\n    reposition: reposition\n  };\n}\n\nfunction Controller(Splide2, Components2, options) {\n  var _EventInterface5 = EventInterface(Splide2),\n      on = _EventInterface5.on,\n      emit = _EventInterface5.emit;\n\n  var Move = Components2.Move;\n  var getPosition = Move.getPosition,\n      getLimit = Move.getLimit,\n      toPosition = Move.toPosition;\n  var _Components2$Slides = Components2.Slides,\n      isEnough = _Components2$Slides.isEnough,\n      getLength = _Components2$Slides.getLength;\n  var omitEnd = options.omitEnd;\n  var isLoop = Splide2.is(LOOP);\n  var isSlide = Splide2.is(SLIDE);\n  var getNext = apply(getAdjacent, false);\n  var getPrev = apply(getAdjacent, true);\n  var currIndex = options.start || 0;\n  var endIndex;\n  var prevIndex = currIndex;\n  var slideCount;\n  var perMove;\n  var perPage;\n\n  function mount() {\n    init();\n    on([EVENT_UPDATED, EVENT_REFRESH, EVENT_END_INDEX_CHANGED], init);\n    on(EVENT_RESIZED, onResized);\n  }\n\n  function init() {\n    slideCount = getLength(true);\n    perMove = options.perMove;\n    perPage = options.perPage;\n    endIndex = getEnd();\n    var index = clamp(currIndex, 0, omitEnd ? endIndex : slideCount - 1);\n\n    if (index !== currIndex) {\n      currIndex = index;\n      Move.reposition();\n    }\n  }\n\n  function onResized() {\n    if (endIndex !== getEnd()) {\n      emit(EVENT_END_INDEX_CHANGED);\n    }\n  }\n\n  function go(control, allowSameIndex, callback) {\n    if (!isBusy()) {\n      var dest = parse(control);\n      var index = loop(dest);\n\n      if (index > -1 && (allowSameIndex || index !== currIndex)) {\n        setIndex(index);\n        Move.move(dest, index, prevIndex, callback);\n      }\n    }\n  }\n\n  function scroll(destination, duration, snap, callback) {\n    Components2.Scroll.scroll(destination, duration, snap, function () {\n      var index = loop(Move.toIndex(getPosition()));\n      setIndex(omitEnd ? min(index, endIndex) : index);\n      callback && callback();\n    });\n  }\n\n  function parse(control) {\n    var index = currIndex;\n\n    if (isString(control)) {\n      var _ref = control.match(/([+\\-<>])(\\d+)?/) || [],\n          indicator = _ref[1],\n          number = _ref[2];\n\n      if (indicator === \"+\" || indicator === \"-\") {\n        index = computeDestIndex(currIndex + +(\"\" + indicator + (+number || 1)), currIndex);\n      } else if (indicator === \">\") {\n        index = number ? toIndex(+number) : getNext(true);\n      } else if (indicator === \"<\") {\n        index = getPrev(true);\n      }\n    } else {\n      index = isLoop ? control : clamp(control, 0, endIndex);\n    }\n\n    return index;\n  }\n\n  function getAdjacent(prev, destination) {\n    var number = perMove || (hasFocus() ? 1 : perPage);\n    var dest = computeDestIndex(currIndex + number * (prev ? -1 : 1), currIndex, !(perMove || hasFocus()));\n\n    if (dest === -1 && isSlide) {\n      if (!approximatelyEqual(getPosition(), getLimit(!prev), 1)) {\n        return prev ? 0 : endIndex;\n      }\n    }\n\n    return destination ? dest : loop(dest);\n  }\n\n  function computeDestIndex(dest, from, snapPage) {\n    if (isEnough() || hasFocus()) {\n      var index = computeMovableDestIndex(dest);\n\n      if (index !== dest) {\n        from = dest;\n        dest = index;\n        snapPage = false;\n      }\n\n      if (dest < 0 || dest > endIndex) {\n        if (!perMove && (between(0, dest, from, true) || between(endIndex, from, dest, true))) {\n          dest = toIndex(toPage(dest));\n        } else {\n          if (isLoop) {\n            dest = snapPage ? dest < 0 ? -(slideCount % perPage || perPage) : slideCount : dest;\n          } else if (options.rewind) {\n            dest = dest < 0 ? endIndex : 0;\n          } else {\n            dest = -1;\n          }\n        }\n      } else {\n        if (snapPage && dest !== from) {\n          dest = toIndex(toPage(from) + (dest < from ? -1 : 1));\n        }\n      }\n    } else {\n      dest = -1;\n    }\n\n    return dest;\n  }\n\n  function computeMovableDestIndex(dest) {\n    if (isSlide && options.trimSpace === \"move\" && dest !== currIndex) {\n      var position = getPosition();\n\n      while (position === toPosition(dest, true) && between(dest, 0, Splide2.length - 1, !options.rewind)) {\n        dest < currIndex ? --dest : ++dest;\n      }\n    }\n\n    return dest;\n  }\n\n  function loop(index) {\n    return isLoop ? (index + slideCount) % slideCount || 0 : index;\n  }\n\n  function getEnd() {\n    var end = slideCount - (hasFocus() || isLoop && perMove ? 1 : perPage);\n\n    while (omitEnd && end-- > 0) {\n      if (toPosition(slideCount - 1, true) !== toPosition(end, true)) {\n        end++;\n        break;\n      }\n    }\n\n    return clamp(end, 0, slideCount - 1);\n  }\n\n  function toIndex(page) {\n    return clamp(hasFocus() ? page : perPage * page, 0, endIndex);\n  }\n\n  function toPage(index) {\n    return hasFocus() ? min(index, endIndex) : floor((index >= endIndex ? slideCount - 1 : index) / perPage);\n  }\n\n  function toDest(destination) {\n    var closest = Move.toIndex(destination);\n    return isSlide ? clamp(closest, 0, endIndex) : closest;\n  }\n\n  function setIndex(index) {\n    if (index !== currIndex) {\n      prevIndex = currIndex;\n      currIndex = index;\n    }\n  }\n\n  function getIndex(prev) {\n    return prev ? prevIndex : currIndex;\n  }\n\n  function hasFocus() {\n    return !isUndefined(options.focus) || options.isNavigation;\n  }\n\n  function isBusy() {\n    return Splide2.state.is([MOVING, SCROLLING]) && !!options.waitForTransition;\n  }\n\n  return {\n    mount: mount,\n    go: go,\n    scroll: scroll,\n    getNext: getNext,\n    getPrev: getPrev,\n    getAdjacent: getAdjacent,\n    getEnd: getEnd,\n    setIndex: setIndex,\n    getIndex: getIndex,\n    toIndex: toIndex,\n    toPage: toPage,\n    toDest: toDest,\n    hasFocus: hasFocus,\n    isBusy: isBusy\n  };\n}\n\nvar XML_NAME_SPACE = \"http://www.w3.org/2000/svg\";\nvar PATH = \"m15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z\";\nvar SIZE = 40;\n\nfunction Arrows(Splide2, Components2, options) {\n  var event = EventInterface(Splide2);\n  var on = event.on,\n      bind = event.bind,\n      emit = event.emit;\n  var classes = options.classes,\n      i18n = options.i18n;\n  var Elements = Components2.Elements,\n      Controller = Components2.Controller;\n  var placeholder = Elements.arrows,\n      track = Elements.track;\n  var wrapper = placeholder;\n  var prev = Elements.prev;\n  var next = Elements.next;\n  var created;\n  var wrapperClasses;\n  var arrows = {};\n\n  function mount() {\n    init();\n    on(EVENT_UPDATED, remount);\n  }\n\n  function remount() {\n    destroy();\n    mount();\n  }\n\n  function init() {\n    var enabled = options.arrows;\n\n    if (enabled && !(prev && next)) {\n      createArrows();\n    }\n\n    if (prev && next) {\n      assign(arrows, {\n        prev: prev,\n        next: next\n      });\n      display(wrapper, enabled ? \"\" : \"none\");\n      addClass(wrapper, wrapperClasses = CLASS_ARROWS + \"--\" + options.direction);\n\n      if (enabled) {\n        listen();\n        update();\n        setAttribute([prev, next], ARIA_CONTROLS, track.id);\n        emit(EVENT_ARROWS_MOUNTED, prev, next);\n      }\n    }\n  }\n\n  function destroy() {\n    event.destroy();\n    removeClass(wrapper, wrapperClasses);\n\n    if (created) {\n      remove(placeholder ? [prev, next] : wrapper);\n      prev = next = null;\n    } else {\n      removeAttribute([prev, next], ALL_ATTRIBUTES);\n    }\n  }\n\n  function listen() {\n    on([EVENT_MOUNTED, EVENT_MOVED, EVENT_REFRESH, EVENT_SCROLLED, EVENT_END_INDEX_CHANGED], update);\n    bind(next, \"click\", apply(go, \">\"));\n    bind(prev, \"click\", apply(go, \"<\"));\n  }\n\n  function go(control) {\n    Controller.go(control, true);\n  }\n\n  function createArrows() {\n    wrapper = placeholder || create(\"div\", classes.arrows);\n    prev = createArrow(true);\n    next = createArrow(false);\n    created = true;\n    append(wrapper, [prev, next]);\n    !placeholder && before(wrapper, track);\n  }\n\n  function createArrow(prev2) {\n    var arrow = \"<button class=\\\"\" + classes.arrow + \" \" + (prev2 ? classes.prev : classes.next) + \"\\\" type=\\\"button\\\"><svg xmlns=\\\"\" + XML_NAME_SPACE + \"\\\" viewBox=\\\"0 0 \" + SIZE + \" \" + SIZE + \"\\\" width=\\\"\" + SIZE + \"\\\" height=\\\"\" + SIZE + \"\\\" focusable=\\\"false\\\"><path d=\\\"\" + (options.arrowPath || PATH) + \"\\\" />\";\n    return parseHtml(arrow);\n  }\n\n  function update() {\n    if (prev && next) {\n      var index = Splide2.index;\n      var prevIndex = Controller.getPrev();\n      var nextIndex = Controller.getNext();\n      var prevLabel = prevIndex > -1 && index < prevIndex ? i18n.last : i18n.prev;\n      var nextLabel = nextIndex > -1 && index > nextIndex ? i18n.first : i18n.next;\n      prev.disabled = prevIndex < 0;\n      next.disabled = nextIndex < 0;\n      setAttribute(prev, ARIA_LABEL, prevLabel);\n      setAttribute(next, ARIA_LABEL, nextLabel);\n      emit(EVENT_ARROWS_UPDATED, prev, next, prevIndex, nextIndex);\n    }\n  }\n\n  return {\n    arrows: arrows,\n    mount: mount,\n    destroy: destroy,\n    update: update\n  };\n}\n\nvar INTERVAL_DATA_ATTRIBUTE = DATA_ATTRIBUTE + \"-interval\";\n\nfunction Autoplay(Splide2, Components2, options) {\n  var _EventInterface6 = EventInterface(Splide2),\n      on = _EventInterface6.on,\n      bind = _EventInterface6.bind,\n      emit = _EventInterface6.emit;\n\n  var interval = RequestInterval(options.interval, Splide2.go.bind(Splide2, \">\"), onAnimationFrame);\n  var isPaused = interval.isPaused;\n  var Elements = Components2.Elements,\n      _Components2$Elements4 = Components2.Elements,\n      root = _Components2$Elements4.root,\n      toggle = _Components2$Elements4.toggle;\n  var autoplay = options.autoplay;\n  var hovered;\n  var focused;\n  var stopped = autoplay === \"pause\";\n\n  function mount() {\n    if (autoplay) {\n      listen();\n      toggle && setAttribute(toggle, ARIA_CONTROLS, Elements.track.id);\n      stopped || play();\n      update();\n    }\n  }\n\n  function listen() {\n    if (options.pauseOnHover) {\n      bind(root, \"mouseenter mouseleave\", function (e) {\n        hovered = e.type === \"mouseenter\";\n        autoToggle();\n      });\n    }\n\n    if (options.pauseOnFocus) {\n      bind(root, \"focusin focusout\", function (e) {\n        focused = e.type === \"focusin\";\n        autoToggle();\n      });\n    }\n\n    if (toggle) {\n      bind(toggle, \"click\", function () {\n        stopped ? play() : pause(true);\n      });\n    }\n\n    on([EVENT_MOVE, EVENT_SCROLL, EVENT_REFRESH], interval.rewind);\n    on(EVENT_MOVE, onMove);\n  }\n\n  function play() {\n    if (isPaused() && Components2.Slides.isEnough()) {\n      interval.start(!options.resetProgress);\n      focused = hovered = stopped = false;\n      update();\n      emit(EVENT_AUTOPLAY_PLAY);\n    }\n  }\n\n  function pause(stop) {\n    if (stop === void 0) {\n      stop = true;\n    }\n\n    stopped = !!stop;\n    update();\n\n    if (!isPaused()) {\n      interval.pause();\n      emit(EVENT_AUTOPLAY_PAUSE);\n    }\n  }\n\n  function autoToggle() {\n    if (!stopped) {\n      hovered || focused ? pause(false) : play();\n    }\n  }\n\n  function update() {\n    if (toggle) {\n      toggleClass(toggle, CLASS_ACTIVE, !stopped);\n      setAttribute(toggle, ARIA_LABEL, options.i18n[stopped ? \"play\" : \"pause\"]);\n    }\n  }\n\n  function onAnimationFrame(rate) {\n    var bar = Elements.bar;\n    bar && style(bar, \"width\", rate * 100 + \"%\");\n    emit(EVENT_AUTOPLAY_PLAYING, rate);\n  }\n\n  function onMove(index) {\n    var Slide = Components2.Slides.getAt(index);\n    interval.set(Slide && +getAttribute(Slide.slide, INTERVAL_DATA_ATTRIBUTE) || options.interval);\n  }\n\n  return {\n    mount: mount,\n    destroy: interval.cancel,\n    play: play,\n    pause: pause,\n    isPaused: isPaused\n  };\n}\n\nfunction Cover(Splide2, Components2, options) {\n  var _EventInterface7 = EventInterface(Splide2),\n      on = _EventInterface7.on;\n\n  function mount() {\n    if (options.cover) {\n      on(EVENT_LAZYLOAD_LOADED, apply(toggle, true));\n      on([EVENT_MOUNTED, EVENT_UPDATED, EVENT_REFRESH], apply(cover, true));\n    }\n  }\n\n  function cover(cover2) {\n    Components2.Slides.forEach(function (Slide) {\n      var img = child(Slide.container || Slide.slide, \"img\");\n\n      if (img && img.src) {\n        toggle(cover2, img, Slide);\n      }\n    });\n  }\n\n  function toggle(cover2, img, Slide) {\n    Slide.style(\"background\", cover2 ? \"center/cover no-repeat url(\\\"\" + img.src + \"\\\")\" : \"\", true);\n    display(img, cover2 ? \"none\" : \"\");\n  }\n\n  return {\n    mount: mount,\n    destroy: apply(cover, false)\n  };\n}\n\nvar BOUNCE_DIFF_THRESHOLD = 10;\nvar BOUNCE_DURATION = 600;\nvar FRICTION_FACTOR = 0.6;\nvar BASE_VELOCITY = 1.5;\nvar MIN_DURATION = 800;\n\nfunction Scroll(Splide2, Components2, options) {\n  var _EventInterface8 = EventInterface(Splide2),\n      on = _EventInterface8.on,\n      emit = _EventInterface8.emit;\n\n  var set = Splide2.state.set;\n  var Move = Components2.Move;\n  var getPosition = Move.getPosition,\n      getLimit = Move.getLimit,\n      exceededLimit = Move.exceededLimit,\n      translate = Move.translate;\n  var isSlide = Splide2.is(SLIDE);\n  var interval;\n  var callback;\n  var friction = 1;\n\n  function mount() {\n    on(EVENT_MOVE, clear);\n    on([EVENT_UPDATED, EVENT_REFRESH], cancel);\n  }\n\n  function scroll(destination, duration, snap, onScrolled, noConstrain) {\n    var from = getPosition();\n    clear();\n\n    if (snap && (!isSlide || !exceededLimit())) {\n      var size = Components2.Layout.sliderSize();\n      var offset = sign(destination) * size * floor(abs(destination) / size) || 0;\n      destination = Move.toPosition(Components2.Controller.toDest(destination % size)) + offset;\n    }\n\n    var noDistance = approximatelyEqual(from, destination, 1);\n    friction = 1;\n    duration = noDistance ? 0 : duration || max(abs(destination - from) / BASE_VELOCITY, MIN_DURATION);\n    callback = onScrolled;\n    interval = RequestInterval(duration, onEnd, apply(update, from, destination, noConstrain), 1);\n    set(SCROLLING);\n    emit(EVENT_SCROLL);\n    interval.start();\n  }\n\n  function onEnd() {\n    set(IDLE);\n    callback && callback();\n    emit(EVENT_SCROLLED);\n  }\n\n  function update(from, to, noConstrain, rate) {\n    var position = getPosition();\n    var target = from + (to - from) * easing(rate);\n    var diff = (target - position) * friction;\n    translate(position + diff);\n\n    if (isSlide && !noConstrain && exceededLimit()) {\n      friction *= FRICTION_FACTOR;\n\n      if (abs(diff) < BOUNCE_DIFF_THRESHOLD) {\n        scroll(getLimit(exceededLimit(true)), BOUNCE_DURATION, false, callback, true);\n      }\n    }\n  }\n\n  function clear() {\n    if (interval) {\n      interval.cancel();\n    }\n  }\n\n  function cancel() {\n    if (interval && !interval.isPaused()) {\n      clear();\n      onEnd();\n    }\n  }\n\n  function easing(t) {\n    var easingFunc = options.easingFunc;\n    return easingFunc ? easingFunc(t) : 1 - Math.pow(1 - t, 4);\n  }\n\n  return {\n    mount: mount,\n    destroy: clear,\n    scroll: scroll,\n    cancel: cancel\n  };\n}\n\nvar SCROLL_LISTENER_OPTIONS = {\n  passive: false,\n  capture: true\n};\n\nfunction Drag(Splide2, Components2, options) {\n  var _EventInterface9 = EventInterface(Splide2),\n      on = _EventInterface9.on,\n      emit = _EventInterface9.emit,\n      bind = _EventInterface9.bind,\n      unbind = _EventInterface9.unbind;\n\n  var state = Splide2.state;\n  var Move = Components2.Move,\n      Scroll = Components2.Scroll,\n      Controller = Components2.Controller,\n      track = Components2.Elements.track,\n      reduce = Components2.Media.reduce;\n  var _Components2$Directio2 = Components2.Direction,\n      resolve = _Components2$Directio2.resolve,\n      orient = _Components2$Directio2.orient;\n  var getPosition = Move.getPosition,\n      exceededLimit = Move.exceededLimit;\n  var basePosition;\n  var baseEvent;\n  var prevBaseEvent;\n  var isFree;\n  var dragging;\n  var exceeded = false;\n  var clickPrevented;\n  var disabled;\n  var target;\n\n  function mount() {\n    bind(track, POINTER_MOVE_EVENTS, noop, SCROLL_LISTENER_OPTIONS);\n    bind(track, POINTER_UP_EVENTS, noop, SCROLL_LISTENER_OPTIONS);\n    bind(track, POINTER_DOWN_EVENTS, onPointerDown, SCROLL_LISTENER_OPTIONS);\n    bind(track, \"click\", onClick, {\n      capture: true\n    });\n    bind(track, \"dragstart\", prevent);\n    on([EVENT_MOUNTED, EVENT_UPDATED], init);\n  }\n\n  function init() {\n    var drag = options.drag;\n    disable(!drag);\n    isFree = drag === \"free\";\n  }\n\n  function onPointerDown(e) {\n    clickPrevented = false;\n\n    if (!disabled) {\n      var isTouch = isTouchEvent(e);\n\n      if (isDraggable(e.target) && (isTouch || !e.button)) {\n        if (!Controller.isBusy()) {\n          target = isTouch ? track : window;\n          dragging = state.is([MOVING, SCROLLING]);\n          prevBaseEvent = null;\n          bind(target, POINTER_MOVE_EVENTS, onPointerMove, SCROLL_LISTENER_OPTIONS);\n          bind(target, POINTER_UP_EVENTS, onPointerUp, SCROLL_LISTENER_OPTIONS);\n          Move.cancel();\n          Scroll.cancel();\n          save(e);\n        } else {\n          prevent(e, true);\n        }\n      }\n    }\n  }\n\n  function onPointerMove(e) {\n    if (!state.is(DRAGGING)) {\n      state.set(DRAGGING);\n      emit(EVENT_DRAG);\n    }\n\n    if (e.cancelable) {\n      if (dragging) {\n        Move.translate(basePosition + constrain(diffCoord(e)));\n        var expired = diffTime(e) > LOG_INTERVAL;\n        var hasExceeded = exceeded !== (exceeded = exceededLimit());\n\n        if (expired || hasExceeded) {\n          save(e);\n        }\n\n        clickPrevented = true;\n        emit(EVENT_DRAGGING);\n        prevent(e);\n      } else if (isSliderDirection(e)) {\n        dragging = shouldStart(e);\n        prevent(e);\n      }\n    }\n  }\n\n  function onPointerUp(e) {\n    if (state.is(DRAGGING)) {\n      state.set(IDLE);\n      emit(EVENT_DRAGGED);\n    }\n\n    if (dragging) {\n      move(e);\n      prevent(e);\n    }\n\n    unbind(target, POINTER_MOVE_EVENTS, onPointerMove);\n    unbind(target, POINTER_UP_EVENTS, onPointerUp);\n    dragging = false;\n  }\n\n  function onClick(e) {\n    if (!disabled && clickPrevented) {\n      prevent(e, true);\n    }\n  }\n\n  function save(e) {\n    prevBaseEvent = baseEvent;\n    baseEvent = e;\n    basePosition = getPosition();\n  }\n\n  function move(e) {\n    var velocity = computeVelocity(e);\n    var destination = computeDestination(velocity);\n    var rewind = options.rewind && options.rewindByDrag;\n    reduce(false);\n\n    if (isFree) {\n      Controller.scroll(destination, 0, options.snap);\n    } else if (Splide2.is(FADE)) {\n      Controller.go(orient(sign(velocity)) < 0 ? rewind ? \"<\" : \"-\" : rewind ? \">\" : \"+\");\n    } else if (Splide2.is(SLIDE) && exceeded && rewind) {\n      Controller.go(exceededLimit(true) ? \">\" : \"<\");\n    } else {\n      Controller.go(Controller.toDest(destination), true);\n    }\n\n    reduce(true);\n  }\n\n  function shouldStart(e) {\n    var thresholds = options.dragMinThreshold;\n    var isObj = isObject(thresholds);\n    var mouse = isObj && thresholds.mouse || 0;\n    var touch = (isObj ? thresholds.touch : +thresholds) || 10;\n    return abs(diffCoord(e)) > (isTouchEvent(e) ? touch : mouse);\n  }\n\n  function isSliderDirection(e) {\n    return abs(diffCoord(e)) > abs(diffCoord(e, true));\n  }\n\n  function computeVelocity(e) {\n    if (Splide2.is(LOOP) || !exceeded) {\n      var time = diffTime(e);\n\n      if (time && time < LOG_INTERVAL) {\n        return diffCoord(e) / time;\n      }\n    }\n\n    return 0;\n  }\n\n  function computeDestination(velocity) {\n    return getPosition() + sign(velocity) * min(abs(velocity) * (options.flickPower || 600), isFree ? Infinity : Components2.Layout.listSize() * (options.flickMaxPages || 1));\n  }\n\n  function diffCoord(e, orthogonal) {\n    return coordOf(e, orthogonal) - coordOf(getBaseEvent(e), orthogonal);\n  }\n\n  function diffTime(e) {\n    return timeOf(e) - timeOf(getBaseEvent(e));\n  }\n\n  function getBaseEvent(e) {\n    return baseEvent === e && prevBaseEvent || baseEvent;\n  }\n\n  function coordOf(e, orthogonal) {\n    return (isTouchEvent(e) ? e.changedTouches[0] : e)[\"page\" + resolve(orthogonal ? \"Y\" : \"X\")];\n  }\n\n  function constrain(diff) {\n    return diff / (exceeded && Splide2.is(SLIDE) ? FRICTION : 1);\n  }\n\n  function isDraggable(target2) {\n    var noDrag = options.noDrag;\n    return !matches(target2, \".\" + CLASS_PAGINATION_PAGE + \", .\" + CLASS_ARROW) && (!noDrag || !matches(target2, noDrag));\n  }\n\n  function isTouchEvent(e) {\n    return typeof TouchEvent !== \"undefined\" && e instanceof TouchEvent;\n  }\n\n  function isDragging() {\n    return dragging;\n  }\n\n  function disable(value) {\n    disabled = value;\n  }\n\n  return {\n    mount: mount,\n    disable: disable,\n    isDragging: isDragging\n  };\n}\n\nvar NORMALIZATION_MAP = {\n  Spacebar: \" \",\n  Right: ARROW_RIGHT,\n  Left: ARROW_LEFT,\n  Up: ARROW_UP,\n  Down: ARROW_DOWN\n};\n\nfunction normalizeKey(key) {\n  key = isString(key) ? key : key.key;\n  return NORMALIZATION_MAP[key] || key;\n}\n\nvar KEYBOARD_EVENT = \"keydown\";\n\nfunction Keyboard(Splide2, Components2, options) {\n  var _EventInterface10 = EventInterface(Splide2),\n      on = _EventInterface10.on,\n      bind = _EventInterface10.bind,\n      unbind = _EventInterface10.unbind;\n\n  var root = Splide2.root;\n  var resolve = Components2.Direction.resolve;\n  var target;\n  var disabled;\n\n  function mount() {\n    init();\n    on(EVENT_UPDATED, destroy);\n    on(EVENT_UPDATED, init);\n    on(EVENT_MOVE, onMove);\n  }\n\n  function init() {\n    var keyboard = options.keyboard;\n\n    if (keyboard) {\n      target = keyboard === \"global\" ? window : root;\n      bind(target, KEYBOARD_EVENT, onKeydown);\n    }\n  }\n\n  function destroy() {\n    unbind(target, KEYBOARD_EVENT);\n  }\n\n  function disable(value) {\n    disabled = value;\n  }\n\n  function onMove() {\n    var _disabled = disabled;\n    disabled = true;\n    nextTick(function () {\n      disabled = _disabled;\n    });\n  }\n\n  function onKeydown(e) {\n    if (!disabled) {\n      var key = normalizeKey(e);\n\n      if (key === resolve(ARROW_LEFT)) {\n        Splide2.go(\"<\");\n      } else if (key === resolve(ARROW_RIGHT)) {\n        Splide2.go(\">\");\n      }\n    }\n  }\n\n  return {\n    mount: mount,\n    destroy: destroy,\n    disable: disable\n  };\n}\n\nvar SRC_DATA_ATTRIBUTE = DATA_ATTRIBUTE + \"-lazy\";\nvar SRCSET_DATA_ATTRIBUTE = SRC_DATA_ATTRIBUTE + \"-srcset\";\nvar IMAGE_SELECTOR = \"[\" + SRC_DATA_ATTRIBUTE + \"], [\" + SRCSET_DATA_ATTRIBUTE + \"]\";\n\nfunction LazyLoad(Splide2, Components2, options) {\n  var _EventInterface11 = EventInterface(Splide2),\n      on = _EventInterface11.on,\n      off = _EventInterface11.off,\n      bind = _EventInterface11.bind,\n      emit = _EventInterface11.emit;\n\n  var isSequential = options.lazyLoad === \"sequential\";\n  var events = [EVENT_MOVED, EVENT_SCROLLED];\n  var entries = [];\n\n  function mount() {\n    if (options.lazyLoad) {\n      init();\n      on(EVENT_REFRESH, init);\n    }\n  }\n\n  function init() {\n    empty(entries);\n    register();\n\n    if (isSequential) {\n      loadNext();\n    } else {\n      off(events);\n      on(events, check);\n      check();\n    }\n  }\n\n  function register() {\n    Components2.Slides.forEach(function (Slide) {\n      queryAll(Slide.slide, IMAGE_SELECTOR).forEach(function (img) {\n        var src = getAttribute(img, SRC_DATA_ATTRIBUTE);\n        var srcset = getAttribute(img, SRCSET_DATA_ATTRIBUTE);\n\n        if (src !== img.src || srcset !== img.srcset) {\n          var className = options.classes.spinner;\n          var parent = img.parentElement;\n          var spinner = child(parent, \".\" + className) || create(\"span\", className, parent);\n          entries.push([img, Slide, spinner]);\n          img.src || display(img, \"none\");\n        }\n      });\n    });\n  }\n\n  function check() {\n    entries = entries.filter(function (data) {\n      var distance = options.perPage * ((options.preloadPages || 1) + 1) - 1;\n      return data[1].isWithin(Splide2.index, distance) ? load(data) : true;\n    });\n    entries.length || off(events);\n  }\n\n  function load(data) {\n    var img = data[0];\n    addClass(data[1].slide, CLASS_LOADING);\n    bind(img, \"load error\", apply(onLoad, data));\n    setAttribute(img, \"src\", getAttribute(img, SRC_DATA_ATTRIBUTE));\n    setAttribute(img, \"srcset\", getAttribute(img, SRCSET_DATA_ATTRIBUTE));\n    removeAttribute(img, SRC_DATA_ATTRIBUTE);\n    removeAttribute(img, SRCSET_DATA_ATTRIBUTE);\n  }\n\n  function onLoad(data, e) {\n    var img = data[0],\n        Slide = data[1];\n    removeClass(Slide.slide, CLASS_LOADING);\n\n    if (e.type !== \"error\") {\n      remove(data[2]);\n      display(img, \"\");\n      emit(EVENT_LAZYLOAD_LOADED, img, Slide);\n      emit(EVENT_RESIZE);\n    }\n\n    isSequential && loadNext();\n  }\n\n  function loadNext() {\n    entries.length && load(entries.shift());\n  }\n\n  return {\n    mount: mount,\n    destroy: apply(empty, entries),\n    check: check\n  };\n}\n\nfunction Pagination(Splide2, Components2, options) {\n  var event = EventInterface(Splide2);\n  var on = event.on,\n      emit = event.emit,\n      bind = event.bind;\n  var Slides = Components2.Slides,\n      Elements = Components2.Elements,\n      Controller = Components2.Controller;\n  var hasFocus = Controller.hasFocus,\n      getIndex = Controller.getIndex,\n      go = Controller.go;\n  var resolve = Components2.Direction.resolve;\n  var placeholder = Elements.pagination;\n  var items = [];\n  var list;\n  var paginationClasses;\n\n  function mount() {\n    destroy();\n    on([EVENT_UPDATED, EVENT_REFRESH, EVENT_END_INDEX_CHANGED], mount);\n    var enabled = options.pagination;\n    placeholder && display(placeholder, enabled ? \"\" : \"none\");\n\n    if (enabled) {\n      on([EVENT_MOVE, EVENT_SCROLL, EVENT_SCROLLED], update);\n      createPagination();\n      update();\n      emit(EVENT_PAGINATION_MOUNTED, {\n        list: list,\n        items: items\n      }, getAt(Splide2.index));\n    }\n  }\n\n  function destroy() {\n    if (list) {\n      remove(placeholder ? slice(list.children) : list);\n      removeClass(list, paginationClasses);\n      empty(items);\n      list = null;\n    }\n\n    event.destroy();\n  }\n\n  function createPagination() {\n    var length = Splide2.length;\n    var classes = options.classes,\n        i18n = options.i18n,\n        perPage = options.perPage;\n    var max = hasFocus() ? Controller.getEnd() + 1 : ceil(length / perPage);\n    list = placeholder || create(\"ul\", classes.pagination, Elements.track.parentElement);\n    addClass(list, paginationClasses = CLASS_PAGINATION + \"--\" + getDirection());\n    setAttribute(list, ROLE, \"tablist\");\n    setAttribute(list, ARIA_LABEL, i18n.select);\n    setAttribute(list, ARIA_ORIENTATION, getDirection() === TTB ? \"vertical\" : \"\");\n\n    for (var i = 0; i < max; i++) {\n      var li = create(\"li\", null, list);\n      var button = create(\"button\", {\n        \"class\": classes.page,\n        type: \"button\"\n      }, li);\n      var controls = Slides.getIn(i).map(function (Slide) {\n        return Slide.slide.id;\n      });\n      var text = !hasFocus() && perPage > 1 ? i18n.pageX : i18n.slideX;\n      bind(button, \"click\", apply(onClick, i));\n\n      if (options.paginationKeyboard) {\n        bind(button, \"keydown\", apply(onKeydown, i));\n      }\n\n      setAttribute(li, ROLE, \"presentation\");\n      setAttribute(button, ROLE, \"tab\");\n      setAttribute(button, ARIA_CONTROLS, controls.join(\" \"));\n      setAttribute(button, ARIA_LABEL, format(text, i + 1));\n      setAttribute(button, TAB_INDEX, -1);\n      items.push({\n        li: li,\n        button: button,\n        page: i\n      });\n    }\n  }\n\n  function onClick(page) {\n    go(\">\" + page, true);\n  }\n\n  function onKeydown(page, e) {\n    var length = items.length;\n    var key = normalizeKey(e);\n    var dir = getDirection();\n    var nextPage = -1;\n\n    if (key === resolve(ARROW_RIGHT, false, dir)) {\n      nextPage = ++page % length;\n    } else if (key === resolve(ARROW_LEFT, false, dir)) {\n      nextPage = (--page + length) % length;\n    } else if (key === \"Home\") {\n      nextPage = 0;\n    } else if (key === \"End\") {\n      nextPage = length - 1;\n    }\n\n    var item = items[nextPage];\n\n    if (item) {\n      focus(item.button);\n      go(\">\" + nextPage);\n      prevent(e, true);\n    }\n  }\n\n  function getDirection() {\n    return options.paginationDirection || options.direction;\n  }\n\n  function getAt(index) {\n    return items[Controller.toPage(index)];\n  }\n\n  function update() {\n    var prev = getAt(getIndex(true));\n    var curr = getAt(getIndex());\n\n    if (prev) {\n      var button = prev.button;\n      removeClass(button, CLASS_ACTIVE);\n      removeAttribute(button, ARIA_SELECTED);\n      setAttribute(button, TAB_INDEX, -1);\n    }\n\n    if (curr) {\n      var _button = curr.button;\n      addClass(_button, CLASS_ACTIVE);\n      setAttribute(_button, ARIA_SELECTED, true);\n      setAttribute(_button, TAB_INDEX, \"\");\n    }\n\n    emit(EVENT_PAGINATION_UPDATED, {\n      list: list,\n      items: items\n    }, prev, curr);\n  }\n\n  return {\n    items: items,\n    mount: mount,\n    destroy: destroy,\n    getAt: getAt,\n    update: update\n  };\n}\n\nvar TRIGGER_KEYS = [\" \", \"Enter\"];\n\nfunction Sync(Splide2, Components2, options) {\n  var isNavigation = options.isNavigation,\n      slideFocus = options.slideFocus;\n  var events = [];\n\n  function mount() {\n    Splide2.splides.forEach(function (target) {\n      if (!target.isParent) {\n        sync(Splide2, target.splide);\n        sync(target.splide, Splide2);\n      }\n    });\n\n    if (isNavigation) {\n      navigate();\n    }\n  }\n\n  function destroy() {\n    events.forEach(function (event) {\n      event.destroy();\n    });\n    empty(events);\n  }\n\n  function remount() {\n    destroy();\n    mount();\n  }\n\n  function sync(splide, target) {\n    var event = EventInterface(splide);\n    event.on(EVENT_MOVE, function (index, prev, dest) {\n      target.go(target.is(LOOP) ? dest : index);\n    });\n    events.push(event);\n  }\n\n  function navigate() {\n    var event = EventInterface(Splide2);\n    var on = event.on;\n    on(EVENT_CLICK, onClick);\n    on(EVENT_SLIDE_KEYDOWN, onKeydown);\n    on([EVENT_MOUNTED, EVENT_UPDATED], update);\n    events.push(event);\n    event.emit(EVENT_NAVIGATION_MOUNTED, Splide2.splides);\n  }\n\n  function update() {\n    setAttribute(Components2.Elements.list, ARIA_ORIENTATION, options.direction === TTB ? \"vertical\" : \"\");\n  }\n\n  function onClick(Slide) {\n    Splide2.go(Slide.index);\n  }\n\n  function onKeydown(Slide, e) {\n    if (includes(TRIGGER_KEYS, normalizeKey(e))) {\n      onClick(Slide);\n      prevent(e);\n    }\n  }\n\n  return {\n    setup: apply(Components2.Media.set, {\n      slideFocus: isUndefined(slideFocus) ? isNavigation : slideFocus\n    }, true),\n    mount: mount,\n    destroy: destroy,\n    remount: remount\n  };\n}\n\nfunction Wheel(Splide2, Components2, options) {\n  var _EventInterface12 = EventInterface(Splide2),\n      bind = _EventInterface12.bind;\n\n  var lastTime = 0;\n\n  function mount() {\n    if (options.wheel) {\n      bind(Components2.Elements.track, \"wheel\", onWheel, SCROLL_LISTENER_OPTIONS);\n    }\n  }\n\n  function onWheel(e) {\n    if (e.cancelable) {\n      var deltaY = e.deltaY;\n      var backwards = deltaY < 0;\n      var timeStamp = timeOf(e);\n\n      var _min = options.wheelMinThreshold || 0;\n\n      var sleep = options.wheelSleep || 0;\n\n      if (abs(deltaY) > _min && timeStamp - lastTime > sleep) {\n        Splide2.go(backwards ? \"<\" : \">\");\n        lastTime = timeStamp;\n      }\n\n      shouldPrevent(backwards) && prevent(e);\n    }\n  }\n\n  function shouldPrevent(backwards) {\n    return !options.releaseWheel || Splide2.state.is(MOVING) || Components2.Controller.getAdjacent(backwards) !== -1;\n  }\n\n  return {\n    mount: mount\n  };\n}\n\nvar SR_REMOVAL_DELAY = 90;\n\nfunction Live(Splide2, Components2, options) {\n  var _EventInterface13 = EventInterface(Splide2),\n      on = _EventInterface13.on;\n\n  var track = Components2.Elements.track;\n  var enabled = options.live && !options.isNavigation;\n  var sr = create(\"span\", CLASS_SR);\n  var interval = RequestInterval(SR_REMOVAL_DELAY, apply(toggle, false));\n\n  function mount() {\n    if (enabled) {\n      disable(!Components2.Autoplay.isPaused());\n      setAttribute(track, ARIA_ATOMIC, true);\n      sr.textContent = \"\\u2026\";\n      on(EVENT_AUTOPLAY_PLAY, apply(disable, true));\n      on(EVENT_AUTOPLAY_PAUSE, apply(disable, false));\n      on([EVENT_MOVED, EVENT_SCROLLED], apply(toggle, true));\n    }\n  }\n\n  function toggle(active) {\n    setAttribute(track, ARIA_BUSY, active);\n\n    if (active) {\n      append(track, sr);\n      interval.start();\n    } else {\n      remove(sr);\n      interval.cancel();\n    }\n  }\n\n  function destroy() {\n    removeAttribute(track, [ARIA_LIVE, ARIA_ATOMIC, ARIA_BUSY]);\n    remove(sr);\n  }\n\n  function disable(disabled) {\n    if (enabled) {\n      setAttribute(track, ARIA_LIVE, disabled ? \"off\" : \"polite\");\n    }\n  }\n\n  return {\n    mount: mount,\n    disable: disable,\n    destroy: destroy\n  };\n}\n\nvar ComponentConstructors = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  Media: Media,\n  Direction: Direction,\n  Elements: Elements,\n  Slides: Slides,\n  Layout: Layout,\n  Clones: Clones,\n  Move: Move,\n  Controller: Controller,\n  Arrows: Arrows,\n  Autoplay: Autoplay,\n  Cover: Cover,\n  Scroll: Scroll,\n  Drag: Drag,\n  Keyboard: Keyboard,\n  LazyLoad: LazyLoad,\n  Pagination: Pagination,\n  Sync: Sync,\n  Wheel: Wheel,\n  Live: Live\n});\nvar I18N = {\n  prev: \"Previous slide\",\n  next: \"Next slide\",\n  first: \"Go to first slide\",\n  last: \"Go to last slide\",\n  slideX: \"Go to slide %s\",\n  pageX: \"Go to page %s\",\n  play: \"Start autoplay\",\n  pause: \"Pause autoplay\",\n  carousel: \"carousel\",\n  slide: \"slide\",\n  select: \"Select a slide to show\",\n  slideLabel: \"%s of %s\"\n};\nvar DEFAULTS = {\n  type: \"slide\",\n  role: \"region\",\n  speed: 400,\n  perPage: 1,\n  cloneStatus: true,\n  arrows: true,\n  pagination: true,\n  paginationKeyboard: true,\n  interval: 5e3,\n  pauseOnHover: true,\n  pauseOnFocus: true,\n  resetProgress: true,\n  easing: \"cubic-bezier(0.25, 1, 0.5, 1)\",\n  drag: true,\n  direction: \"ltr\",\n  trimSpace: true,\n  focusableNodes: \"a, button, textarea, input, select, iframe\",\n  live: true,\n  classes: CLASSES,\n  i18n: I18N,\n  reducedMotion: {\n    speed: 0,\n    rewindSpeed: 0,\n    autoplay: \"pause\"\n  }\n};\n\nfunction Fade(Splide2, Components2, options) {\n  var Slides = Components2.Slides;\n\n  function mount() {\n    EventInterface(Splide2).on([EVENT_MOUNTED, EVENT_REFRESH], init);\n  }\n\n  function init() {\n    Slides.forEach(function (Slide) {\n      Slide.style(\"transform\", \"translateX(-\" + 100 * Slide.index + \"%)\");\n    });\n  }\n\n  function start(index, done) {\n    Slides.style(\"transition\", \"opacity \" + options.speed + \"ms \" + options.easing);\n    nextTick(done);\n  }\n\n  return {\n    mount: mount,\n    start: start,\n    cancel: noop\n  };\n}\n\nfunction Slide(Splide2, Components2, options) {\n  var Move = Components2.Move,\n      Controller = Components2.Controller,\n      Scroll = Components2.Scroll;\n  var list = Components2.Elements.list;\n  var transition = apply(style, list, \"transition\");\n  var endCallback;\n\n  function mount() {\n    EventInterface(Splide2).bind(list, \"transitionend\", function (e) {\n      if (e.target === list && endCallback) {\n        cancel();\n        endCallback();\n      }\n    });\n  }\n\n  function start(index, done) {\n    var destination = Move.toPosition(index, true);\n    var position = Move.getPosition();\n    var speed = getSpeed(index);\n\n    if (abs(destination - position) >= 1 && speed >= 1) {\n      if (options.useScroll) {\n        Scroll.scroll(destination, speed, false, done);\n      } else {\n        transition(\"transform \" + speed + \"ms \" + options.easing);\n        Move.translate(destination, true);\n        endCallback = done;\n      }\n    } else {\n      Move.jump(index);\n      done();\n    }\n  }\n\n  function cancel() {\n    transition(\"\");\n    Scroll.cancel();\n  }\n\n  function getSpeed(index) {\n    var rewindSpeed = options.rewindSpeed;\n\n    if (Splide2.is(SLIDE) && rewindSpeed) {\n      var prev = Controller.getIndex(true);\n      var end = Controller.getEnd();\n\n      if (prev === 0 && index >= end || prev >= end && index === 0) {\n        return rewindSpeed;\n      }\n    }\n\n    return options.speed;\n  }\n\n  return {\n    mount: mount,\n    start: start,\n    cancel: cancel\n  };\n}\n\nvar _Splide = /*#__PURE__*/function () {\n  function _Splide(target, options) {\n    this.event = EventInterface();\n    this.Components = {};\n    this.state = State(CREATED);\n    this.splides = [];\n    this._o = {};\n    this._E = {};\n    var root = isString(target) ? query(document, target) : target;\n    assert(root, root + \" is invalid.\");\n    this.root = root;\n    options = merge({\n      label: getAttribute(root, ARIA_LABEL) || \"\",\n      labelledby: getAttribute(root, ARIA_LABELLEDBY) || \"\"\n    }, DEFAULTS, _Splide.defaults, options || {});\n\n    try {\n      merge(options, JSON.parse(getAttribute(root, DATA_ATTRIBUTE)));\n    } catch (e) {\n      assert(false, \"Invalid JSON\");\n    }\n\n    this._o = Object.create(merge({}, options));\n  }\n\n  var _proto = _Splide.prototype;\n\n  _proto.mount = function mount(Extensions, Transition) {\n    var _this = this;\n\n    var state = this.state,\n        Components2 = this.Components;\n    assert(state.is([CREATED, DESTROYED]), \"Already mounted!\");\n    state.set(CREATED);\n    this._C = Components2;\n    this._T = Transition || this._T || (this.is(FADE) ? Fade : Slide);\n    this._E = Extensions || this._E;\n    var Constructors = assign({}, ComponentConstructors, this._E, {\n      Transition: this._T\n    });\n    forOwn(Constructors, function (Component, key) {\n      var component = Component(_this, Components2, _this._o);\n      Components2[key] = component;\n      component.setup && component.setup();\n    });\n    forOwn(Components2, function (component) {\n      component.mount && component.mount();\n    });\n    this.emit(EVENT_MOUNTED);\n    addClass(this.root, CLASS_INITIALIZED);\n    state.set(IDLE);\n    this.emit(EVENT_READY);\n    return this;\n  };\n\n  _proto.sync = function sync(splide) {\n    this.splides.push({\n      splide: splide\n    });\n    splide.splides.push({\n      splide: this,\n      isParent: true\n    });\n\n    if (this.state.is(IDLE)) {\n      this._C.Sync.remount();\n\n      splide.Components.Sync.remount();\n    }\n\n    return this;\n  };\n\n  _proto.go = function go(control) {\n    this._C.Controller.go(control);\n\n    return this;\n  };\n\n  _proto.on = function on(events, callback) {\n    this.event.on(events, callback);\n    return this;\n  };\n\n  _proto.off = function off(events) {\n    this.event.off(events);\n    return this;\n  };\n\n  _proto.emit = function emit(event) {\n    var _this$event;\n\n    (_this$event = this.event).emit.apply(_this$event, [event].concat(slice(arguments, 1)));\n\n    return this;\n  };\n\n  _proto.add = function add(slides, index) {\n    this._C.Slides.add(slides, index);\n\n    return this;\n  };\n\n  _proto.remove = function remove(matcher) {\n    this._C.Slides.remove(matcher);\n\n    return this;\n  };\n\n  _proto.is = function is(type) {\n    return this._o.type === type;\n  };\n\n  _proto.refresh = function refresh() {\n    this.emit(EVENT_REFRESH);\n    return this;\n  };\n\n  _proto.destroy = function destroy(completely) {\n    if (completely === void 0) {\n      completely = true;\n    }\n\n    var event = this.event,\n        state = this.state;\n\n    if (state.is(CREATED)) {\n      EventInterface(this).on(EVENT_READY, this.destroy.bind(this, completely));\n    } else {\n      forOwn(this._C, function (component) {\n        component.destroy && component.destroy(completely);\n      }, true);\n      event.emit(EVENT_DESTROY);\n      event.destroy();\n      completely && empty(this.splides);\n      state.set(DESTROYED);\n    }\n\n    return this;\n  };\n\n  _createClass(_Splide, [{\n    key: \"options\",\n    get: function get() {\n      return this._o;\n    },\n    set: function set(options) {\n      this._C.Media.set(options, true, true);\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this._C.Slides.getLength(true);\n    }\n  }, {\n    key: \"index\",\n    get: function get() {\n      return this._C.Controller.getIndex();\n    }\n  }]);\n\n  return _Splide;\n}();\n\nvar Splide = _Splide;\nSplide.defaults = {};\nSplide.STATES = STATES;\nvar CLASS_RENDERED = \"is-rendered\";\nvar RENDERER_DEFAULT_CONFIG = {\n  listTag: \"ul\",\n  slideTag: \"li\"\n};\n\nvar Style = /*#__PURE__*/function () {\n  function Style(id, options) {\n    this.styles = {};\n    this.id = id;\n    this.options = options;\n  }\n\n  var _proto2 = Style.prototype;\n\n  _proto2.rule = function rule(selector, prop, value, breakpoint) {\n    breakpoint = breakpoint || \"default\";\n    var selectors = this.styles[breakpoint] = this.styles[breakpoint] || {};\n    var styles = selectors[selector] = selectors[selector] || {};\n    styles[prop] = value;\n  };\n\n  _proto2.build = function build() {\n    var _this2 = this;\n\n    var css = \"\";\n\n    if (this.styles[\"default\"]) {\n      css += this.buildSelectors(this.styles[\"default\"]);\n    }\n\n    Object.keys(this.styles).sort(function (n, m) {\n      return _this2.options.mediaQuery === \"min\" ? +n - +m : +m - +n;\n    }).forEach(function (breakpoint) {\n      if (breakpoint !== \"default\") {\n        css += \"@media screen and (max-width: \" + breakpoint + \"px) {\";\n        css += _this2.buildSelectors(_this2.styles[breakpoint]);\n        css += \"}\";\n      }\n    });\n    return css;\n  };\n\n  _proto2.buildSelectors = function buildSelectors(selectors) {\n    var _this3 = this;\n\n    var css = \"\";\n    forOwn(selectors, function (styles, selector) {\n      selector = (\"#\" + _this3.id + \" \" + selector).trim();\n      css += selector + \" {\";\n      forOwn(styles, function (value, prop) {\n        if (value || value === 0) {\n          css += prop + \": \" + value + \";\";\n        }\n      });\n      css += \"}\";\n    });\n    return css;\n  };\n\n  return Style;\n}();\n\nvar SplideRenderer = /*#__PURE__*/function () {\n  function SplideRenderer(contents, options, config, defaults) {\n    this.slides = [];\n    this.options = {};\n    this.breakpoints = [];\n    merge(DEFAULTS, defaults || {});\n    merge(merge(this.options, DEFAULTS), options || {});\n    this.contents = contents;\n    this.config = assign({}, RENDERER_DEFAULT_CONFIG, config || {});\n    this.id = this.config.id || uniqueId(\"splide\");\n    this.Style = new Style(this.id, this.options);\n    this.Direction = Direction(null, null, this.options);\n    assert(this.contents.length, \"Provide at least 1 content.\");\n    this.init();\n  }\n\n  SplideRenderer.clean = function clean(splide) {\n    var _EventInterface14 = EventInterface(splide),\n        on = _EventInterface14.on;\n\n    var root = splide.root;\n    var clones = queryAll(root, \".\" + CLASS_CLONE);\n    on(EVENT_MOUNTED, function () {\n      remove(child(root, \"style\"));\n    });\n    remove(clones);\n  };\n\n  var _proto3 = SplideRenderer.prototype;\n\n  _proto3.init = function init() {\n    this.parseBreakpoints();\n    this.initSlides();\n    this.registerRootStyles();\n    this.registerTrackStyles();\n    this.registerSlideStyles();\n    this.registerListStyles();\n  };\n\n  _proto3.initSlides = function initSlides() {\n    var _this4 = this;\n\n    push(this.slides, this.contents.map(function (content, index) {\n      content = isString(content) ? {\n        html: content\n      } : content;\n      content.styles = content.styles || {};\n      content.attrs = content.attrs || {};\n\n      _this4.cover(content);\n\n      var classes = _this4.options.classes.slide + \" \" + (index === 0 ? CLASS_ACTIVE : \"\");\n      assign(content.attrs, {\n        \"class\": (classes + \" \" + (content.attrs[\"class\"] || \"\")).trim(),\n        style: _this4.buildStyles(content.styles)\n      });\n      return content;\n    }));\n\n    if (this.isLoop()) {\n      this.generateClones(this.slides);\n    }\n  };\n\n  _proto3.registerRootStyles = function registerRootStyles() {\n    var _this5 = this;\n\n    this.breakpoints.forEach(function (_ref2) {\n      var width = _ref2[0],\n          options = _ref2[1];\n\n      _this5.Style.rule(\" \", \"max-width\", unit(options.width), width);\n    });\n  };\n\n  _proto3.registerTrackStyles = function registerTrackStyles() {\n    var _this6 = this;\n\n    var Style2 = this.Style;\n    var selector = \".\" + CLASS_TRACK;\n    this.breakpoints.forEach(function (_ref3) {\n      var width = _ref3[0],\n          options = _ref3[1];\n      Style2.rule(selector, _this6.resolve(\"paddingLeft\"), _this6.cssPadding(options, false), width);\n      Style2.rule(selector, _this6.resolve(\"paddingRight\"), _this6.cssPadding(options, true), width);\n      Style2.rule(selector, \"height\", _this6.cssTrackHeight(options), width);\n    });\n  };\n\n  _proto3.registerListStyles = function registerListStyles() {\n    var _this7 = this;\n\n    var Style2 = this.Style;\n    var selector = \".\" + CLASS_LIST;\n    this.breakpoints.forEach(function (_ref4) {\n      var width = _ref4[0],\n          options = _ref4[1];\n      Style2.rule(selector, \"transform\", _this7.buildTranslate(options), width);\n\n      if (!_this7.cssSlideHeight(options)) {\n        Style2.rule(selector, \"aspect-ratio\", _this7.cssAspectRatio(options), width);\n      }\n    });\n  };\n\n  _proto3.registerSlideStyles = function registerSlideStyles() {\n    var _this8 = this;\n\n    var Style2 = this.Style;\n    var selector = \".\" + CLASS_SLIDE;\n    this.breakpoints.forEach(function (_ref5) {\n      var width = _ref5[0],\n          options = _ref5[1];\n      Style2.rule(selector, \"width\", _this8.cssSlideWidth(options), width);\n      Style2.rule(selector, \"height\", _this8.cssSlideHeight(options) || \"100%\", width);\n      Style2.rule(selector, _this8.resolve(\"marginRight\"), unit(options.gap) || \"0px\", width);\n      Style2.rule(selector + \" > img\", \"display\", options.cover ? \"none\" : \"inline\", width);\n    });\n  };\n\n  _proto3.buildTranslate = function buildTranslate(options) {\n    var _this$Direction = this.Direction,\n        resolve = _this$Direction.resolve,\n        orient = _this$Direction.orient;\n    var values = [];\n    values.push(this.cssOffsetClones(options));\n    values.push(this.cssOffsetGaps(options));\n\n    if (this.isCenter(options)) {\n      values.push(this.buildCssValue(orient(-50), \"%\"));\n      values.push.apply(values, this.cssOffsetCenter(options));\n    }\n\n    return values.filter(Boolean).map(function (value) {\n      return \"translate\" + resolve(\"X\") + \"(\" + value + \")\";\n    }).join(\" \");\n  };\n\n  _proto3.cssOffsetClones = function cssOffsetClones(options) {\n    var _this$Direction2 = this.Direction,\n        resolve = _this$Direction2.resolve,\n        orient = _this$Direction2.orient;\n    var cloneCount = this.getCloneCount();\n\n    if (this.isFixedWidth(options)) {\n      var _this$parseCssValue = this.parseCssValue(options[resolve(\"fixedWidth\")]),\n          value = _this$parseCssValue.value,\n          unit2 = _this$parseCssValue.unit;\n\n      return this.buildCssValue(orient(value) * cloneCount, unit2);\n    }\n\n    var percent = 100 * cloneCount / options.perPage;\n    return orient(percent) + \"%\";\n  };\n\n  _proto3.cssOffsetCenter = function cssOffsetCenter(options) {\n    var _this$Direction3 = this.Direction,\n        resolve = _this$Direction3.resolve,\n        orient = _this$Direction3.orient;\n\n    if (this.isFixedWidth(options)) {\n      var _this$parseCssValue2 = this.parseCssValue(options[resolve(\"fixedWidth\")]),\n          value = _this$parseCssValue2.value,\n          unit2 = _this$parseCssValue2.unit;\n\n      return [this.buildCssValue(orient(value / 2), unit2)];\n    }\n\n    var values = [];\n    var perPage = options.perPage,\n        gap = options.gap;\n    values.push(orient(50 / perPage) + \"%\");\n\n    if (gap) {\n      var _this$parseCssValue3 = this.parseCssValue(gap),\n          _value = _this$parseCssValue3.value,\n          _unit = _this$parseCssValue3.unit;\n\n      var gapOffset = (_value / perPage - _value) / 2;\n      values.push(this.buildCssValue(orient(gapOffset), _unit));\n    }\n\n    return values;\n  };\n\n  _proto3.cssOffsetGaps = function cssOffsetGaps(options) {\n    var cloneCount = this.getCloneCount();\n\n    if (cloneCount && options.gap) {\n      var orient = this.Direction.orient;\n\n      var _this$parseCssValue4 = this.parseCssValue(options.gap),\n          value = _this$parseCssValue4.value,\n          unit2 = _this$parseCssValue4.unit;\n\n      if (this.isFixedWidth(options)) {\n        return this.buildCssValue(orient(value * cloneCount), unit2);\n      }\n\n      var perPage = options.perPage;\n      var gaps = cloneCount / perPage;\n      return this.buildCssValue(orient(gaps * value), unit2);\n    }\n\n    return \"\";\n  };\n\n  _proto3.resolve = function resolve(prop) {\n    return camelToKebab(this.Direction.resolve(prop));\n  };\n\n  _proto3.cssPadding = function cssPadding(options, right) {\n    var padding = options.padding;\n    var prop = this.Direction.resolve(right ? \"right\" : \"left\", true);\n    return padding && unit(padding[prop] || (isObject(padding) ? 0 : padding)) || \"0px\";\n  };\n\n  _proto3.cssTrackHeight = function cssTrackHeight(options) {\n    var height = \"\";\n\n    if (this.isVertical()) {\n      height = this.cssHeight(options);\n      assert(height, '\"height\" is missing.');\n      height = \"calc(\" + height + \" - \" + this.cssPadding(options, false) + \" - \" + this.cssPadding(options, true) + \")\";\n    }\n\n    return height;\n  };\n\n  _proto3.cssHeight = function cssHeight(options) {\n    return unit(options.height);\n  };\n\n  _proto3.cssSlideWidth = function cssSlideWidth(options) {\n    return options.autoWidth ? \"\" : unit(options.fixedWidth) || (this.isVertical() ? \"\" : this.cssSlideSize(options));\n  };\n\n  _proto3.cssSlideHeight = function cssSlideHeight(options) {\n    return unit(options.fixedHeight) || (this.isVertical() ? options.autoHeight ? \"\" : this.cssSlideSize(options) : this.cssHeight(options));\n  };\n\n  _proto3.cssSlideSize = function cssSlideSize(options) {\n    var gap = unit(options.gap);\n    return \"calc((100%\" + (gap && \" + \" + gap) + \")/\" + (options.perPage || 1) + (gap && \" - \" + gap) + \")\";\n  };\n\n  _proto3.cssAspectRatio = function cssAspectRatio(options) {\n    var heightRatio = options.heightRatio;\n    return heightRatio ? \"\" + 1 / heightRatio : \"\";\n  };\n\n  _proto3.buildCssValue = function buildCssValue(value, unit2) {\n    return \"\" + value + unit2;\n  };\n\n  _proto3.parseCssValue = function parseCssValue(value) {\n    if (isString(value)) {\n      var number = parseFloat(value) || 0;\n      var unit2 = value.replace(/\\d*(\\.\\d*)?/, \"\") || \"px\";\n      return {\n        value: number,\n        unit: unit2\n      };\n    }\n\n    return {\n      value: value,\n      unit: \"px\"\n    };\n  };\n\n  _proto3.parseBreakpoints = function parseBreakpoints() {\n    var _this9 = this;\n\n    var breakpoints = this.options.breakpoints;\n    this.breakpoints.push([\"default\", this.options]);\n\n    if (breakpoints) {\n      forOwn(breakpoints, function (options, width) {\n        _this9.breakpoints.push([width, merge(merge({}, _this9.options), options)]);\n      });\n    }\n  };\n\n  _proto3.isFixedWidth = function isFixedWidth(options) {\n    return !!options[this.Direction.resolve(\"fixedWidth\")];\n  };\n\n  _proto3.isLoop = function isLoop() {\n    return this.options.type === LOOP;\n  };\n\n  _proto3.isCenter = function isCenter(options) {\n    if (options.focus === \"center\") {\n      if (this.isLoop()) {\n        return true;\n      }\n\n      if (this.options.type === SLIDE) {\n        return !this.options.trimSpace;\n      }\n    }\n\n    return false;\n  };\n\n  _proto3.isVertical = function isVertical() {\n    return this.options.direction === TTB;\n  };\n\n  _proto3.buildClasses = function buildClasses() {\n    var options = this.options;\n    return [CLASS_ROOT, CLASS_ROOT + \"--\" + options.type, CLASS_ROOT + \"--\" + options.direction, options.drag && CLASS_ROOT + \"--draggable\", options.isNavigation && CLASS_ROOT + \"--nav\", CLASS_ACTIVE, !this.config.hidden && CLASS_RENDERED].filter(Boolean).join(\" \");\n  };\n\n  _proto3.buildAttrs = function buildAttrs(attrs) {\n    var attr = \"\";\n    forOwn(attrs, function (value, key) {\n      attr += value ? \" \" + camelToKebab(key) + \"=\\\"\" + value + \"\\\"\" : \"\";\n    });\n    return attr.trim();\n  };\n\n  _proto3.buildStyles = function buildStyles(styles) {\n    var style = \"\";\n    forOwn(styles, function (value, key) {\n      style += \" \" + camelToKebab(key) + \":\" + value + \";\";\n    });\n    return style.trim();\n  };\n\n  _proto3.renderSlides = function renderSlides() {\n    var _this10 = this;\n\n    var tag = this.config.slideTag;\n    return this.slides.map(function (content) {\n      return \"<\" + tag + \" \" + _this10.buildAttrs(content.attrs) + \">\" + (content.html || \"\") + \"</\" + tag + \">\";\n    }).join(\"\");\n  };\n\n  _proto3.cover = function cover(content) {\n    var styles = content.styles,\n        _content$html = content.html,\n        html = _content$html === void 0 ? \"\" : _content$html;\n\n    if (this.options.cover && !this.options.lazyLoad) {\n      var src = html.match(/<img.*?src\\s*=\\s*(['\"])(.+?)\\1.*?>/);\n\n      if (src && src[2]) {\n        styles.background = \"center/cover no-repeat url('\" + src[2] + \"')\";\n      }\n    }\n  };\n\n  _proto3.generateClones = function generateClones(contents) {\n    var classes = this.options.classes;\n    var count = this.getCloneCount();\n    var slides = contents.slice();\n\n    while (slides.length < count) {\n      push(slides, slides);\n    }\n\n    push(slides.slice(-count).reverse(), slides.slice(0, count)).forEach(function (content, index) {\n      var attrs = assign({}, content.attrs, {\n        \"class\": content.attrs[\"class\"] + \" \" + classes.clone\n      });\n      var clone = assign({}, content, {\n        attrs: attrs\n      });\n      index < count ? contents.unshift(clone) : contents.push(clone);\n    });\n  };\n\n  _proto3.getCloneCount = function getCloneCount() {\n    if (this.isLoop()) {\n      var options = this.options;\n\n      if (options.clones) {\n        return options.clones;\n      }\n\n      var perPage = max.apply(void 0, this.breakpoints.map(function (_ref6) {\n        var options2 = _ref6[1];\n        return options2.perPage;\n      }));\n      return perPage * ((options.flickMaxPages || 1) + 1);\n    }\n\n    return 0;\n  };\n\n  _proto3.renderArrows = function renderArrows() {\n    var html = \"\";\n    html += \"<div class=\\\"\" + this.options.classes.arrows + \"\\\">\";\n    html += this.renderArrow(true);\n    html += this.renderArrow(false);\n    html += \"</div>\";\n    return html;\n  };\n\n  _proto3.renderArrow = function renderArrow(prev) {\n    var _this$options = this.options,\n        classes = _this$options.classes,\n        i18n = _this$options.i18n;\n    var attrs = {\n      \"class\": classes.arrow + \" \" + (prev ? classes.prev : classes.next),\n      type: \"button\",\n      ariaLabel: prev ? i18n.prev : i18n.next\n    };\n    return \"<button \" + this.buildAttrs(attrs) + \"><svg xmlns=\\\"\" + XML_NAME_SPACE + \"\\\" viewBox=\\\"0 0 \" + SIZE + \" \" + SIZE + \"\\\" width=\\\"\" + SIZE + \"\\\" height=\\\"\" + SIZE + \"\\\"><path d=\\\"\" + (this.options.arrowPath || PATH) + \"\\\" /></svg></button>\";\n  };\n\n  _proto3.html = function html() {\n    var _this$config = this.config,\n        rootClass = _this$config.rootClass,\n        listTag = _this$config.listTag,\n        arrows = _this$config.arrows,\n        beforeTrack = _this$config.beforeTrack,\n        afterTrack = _this$config.afterTrack,\n        slider = _this$config.slider,\n        beforeSlider = _this$config.beforeSlider,\n        afterSlider = _this$config.afterSlider;\n    var html = \"\";\n    html += \"<div id=\\\"\" + this.id + \"\\\" class=\\\"\" + this.buildClasses() + \" \" + (rootClass || \"\") + \"\\\">\";\n    html += \"<style>\" + this.Style.build() + \"</style>\";\n\n    if (slider) {\n      html += beforeSlider || \"\";\n      html += \"<div class=\\\"splide__slider\\\">\";\n    }\n\n    html += beforeTrack || \"\";\n\n    if (arrows) {\n      html += this.renderArrows();\n    }\n\n    html += \"<div class=\\\"splide__track\\\">\";\n    html += \"<\" + listTag + \" class=\\\"splide__list\\\">\";\n    html += this.renderSlides();\n    html += \"</\" + listTag + \">\";\n    html += \"</div>\";\n    html += afterTrack || \"\";\n\n    if (slider) {\n      html += \"</div>\";\n      html += afterSlider || \"\";\n    }\n\n    html += \"</div>\";\n    return html;\n  };\n\n  return SplideRenderer;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNwbGlkZWpzL3NwbGlkZS9kaXN0L2pzL3NwbGlkZS5lc20uanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsU0FBU0EsaUJBQVQsQ0FBMkJDLE1BQTNCLEVBQW1DQyxLQUFuQyxFQUEwQztBQUFFLE9BQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0QsS0FBSyxDQUFDRSxNQUExQixFQUFrQ0QsQ0FBQyxFQUFuQyxFQUF1QztBQUFFLFFBQUlFLFVBQVUsR0FBR0gsS0FBSyxDQUFDQyxDQUFELENBQXRCO0FBQTJCRSxJQUFBQSxVQUFVLENBQUNDLFVBQVgsR0FBd0JELFVBQVUsQ0FBQ0MsVUFBWCxJQUF5QixLQUFqRDtBQUF3REQsSUFBQUEsVUFBVSxDQUFDRSxZQUFYLEdBQTBCLElBQTFCO0FBQWdDLFFBQUksV0FBV0YsVUFBZixFQUEyQkEsVUFBVSxDQUFDRyxRQUFYLEdBQXNCLElBQXRCO0FBQTRCQyxJQUFBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JULE1BQXRCLEVBQThCSSxVQUFVLENBQUNNLEdBQXpDLEVBQThDTixVQUE5QztBQUE0RDtBQUFFOztBQUU3VCxTQUFTTyxZQUFULENBQXNCQyxXQUF0QixFQUFtQ0MsVUFBbkMsRUFBK0NDLFdBQS9DLEVBQTREO0FBQUUsTUFBSUQsVUFBSixFQUFnQmQsaUJBQWlCLENBQUNhLFdBQVcsQ0FBQ0csU0FBYixFQUF3QkYsVUFBeEIsQ0FBakI7QUFBc0QsTUFBSUMsV0FBSixFQUFpQmYsaUJBQWlCLENBQUNhLFdBQUQsRUFBY0UsV0FBZCxDQUFqQjtBQUE2Q04sRUFBQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCRyxXQUF0QixFQUFtQyxXQUFuQyxFQUFnRDtBQUFFTCxJQUFBQSxRQUFRLEVBQUU7QUFBWixHQUFoRDtBQUFzRSxT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RUFBekMsR0FBK0QsR0FBL0QsSUFBc0VhLFNBQVMsSUFBSSxFQUFuRixJQUF5RixLQUFqRztBQUNBbHVCLElBQUFBLElBQUksSUFBSSxZQUFZLEtBQUt3cEIsS0FBTCxDQUFXSyxLQUFYLEVBQVosR0FBaUMsVUFBekM7O0FBRUEsUUFBSXdFLE1BQUosRUFBWTtBQUNWcnVCLE1BQUFBLElBQUksSUFBSXN1QixZQUFZLElBQUksRUFBeEI7QUFDQXR1QixNQUFBQSxJQUFJLElBQUksZ0NBQVI7QUFDRDs7QUFFREEsSUFBQUEsSUFBSSxJQUFJbXVCLFdBQVcsSUFBSSxFQUF2Qjs7QUFFQSxRQUFJM2UsTUFBSixFQUFZO0FBQ1Z4UCxNQUFBQSxJQUFJLElBQUksS0FBSzZ0QixZQUFMLEVBQVI7QUFDRDs7QUFFRDd0QixJQUFBQSxJQUFJLElBQUksK0JBQVI7QUFDQUEsSUFBQUEsSUFBSSxJQUFJLE1BQU1zcEIsT0FBTixHQUFnQiwwQkFBeEI7QUFDQXRwQixJQUFBQSxJQUFJLElBQUksS0FBS3V0QixZQUFMLEVBQVI7QUFDQXZ0QixJQUFBQSxJQUFJLElBQUksT0FBT3NwQixPQUFQLEdBQWlCLEdBQXpCO0FBQ0F0cEIsSUFBQUEsSUFBSSxJQUFJLFFBQVI7QUFDQUEsSUFBQUEsSUFBSSxJQUFJb3VCLFVBQVUsSUFBSSxFQUF0Qjs7QUFFQSxRQUFJQyxNQUFKLEVBQVk7QUFDVnJ1QixNQUFBQSxJQUFJLElBQUksUUFBUjtBQUNBQSxNQUFBQSxJQUFJLElBQUl1dUIsV0FBVyxJQUFJLEVBQXZCO0FBQ0Q7O0FBRUR2dUIsSUFBQUEsSUFBSSxJQUFJLFFBQVI7QUFDQSxXQUFPQSxJQUFQO0FBQ0QsR0F2Q0Q7O0FBeUNBLFNBQU9rcUIsY0FBUDtBQUNELENBeGNpQyxFQUFsQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac3BsaWRlanMvc3BsaWRlL2Rpc3QvanMvc3BsaWRlLmVzbS5qcz81ODc5Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuLyohXG4gKiBTcGxpZGUuanNcbiAqIFZlcnNpb24gIDogNC4xLjNcbiAqIExpY2Vuc2UgIDogTUlUXG4gKiBDb3B5cmlnaHQ6IDIwMjIgTmFvdG9zaGkgRnVqaXRhXG4gKi9cbnZhciBNRURJQV9QUkVGRVJTX1JFRFVDRURfTU9USU9OID0gXCIocHJlZmVycy1yZWR1Y2VkLW1vdGlvbjogcmVkdWNlKVwiO1xudmFyIENSRUFURUQgPSAxO1xudmFyIE1PVU5URUQgPSAyO1xudmFyIElETEUgPSAzO1xudmFyIE1PVklORyA9IDQ7XG52YXIgU0NST0xMSU5HID0gNTtcbnZhciBEUkFHR0lORyA9IDY7XG52YXIgREVTVFJPWUVEID0gNztcbnZhciBTVEFURVMgPSB7XG4gIENSRUFURUQ6IENSRUFURUQsXG4gIE1PVU5URUQ6IE1PVU5URUQsXG4gIElETEU6IElETEUsXG4gIE1PVklORzogTU9WSU5HLFxuICBTQ1JPTExJTkc6IFNDUk9MTElORyxcbiAgRFJBR0dJTkc6IERSQUdHSU5HLFxuICBERVNUUk9ZRUQ6IERFU1RST1lFRFxufTtcblxuZnVuY3Rpb24gZW1wdHkoYXJyYXkpIHtcbiAgYXJyYXkubGVuZ3RoID0gMDtcbn1cblxuZnVuY3Rpb24gc2xpY2UoYXJyYXlMaWtlLCBzdGFydCwgZW5kKSB7XG4gIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcnJheUxpa2UsIHN0YXJ0LCBlbmQpO1xufVxuXG5mdW5jdGlvbiBhcHBseShmdW5jKSB7XG4gIHJldHVybiBmdW5jLmJpbmQuYXBwbHkoZnVuYywgW251bGxdLmNvbmNhdChzbGljZShhcmd1bWVudHMsIDEpKSk7XG59XG5cbnZhciBuZXh0VGljayA9IHNldFRpbWVvdXQ7XG5cbnZhciBub29wID0gZnVuY3Rpb24gbm9vcCgpIHt9O1xuXG5mdW5jdGlvbiByYWYoZnVuYykge1xuICByZXR1cm4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmMpO1xufVxuXG5mdW5jdGlvbiB0eXBlT2YodHlwZSwgc3ViamVjdCkge1xuICByZXR1cm4gdHlwZW9mIHN1YmplY3QgPT09IHR5cGU7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KHN1YmplY3QpIHtcbiAgcmV0dXJuICFpc051bGwoc3ViamVjdCkgJiYgdHlwZU9mKFwib2JqZWN0XCIsIHN1YmplY3QpO1xufVxuXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG52YXIgaXNGdW5jdGlvbiA9IGFwcGx5KHR5cGVPZiwgXCJmdW5jdGlvblwiKTtcbnZhciBpc1N0cmluZyA9IGFwcGx5KHR5cGVPZiwgXCJzdHJpbmdcIik7XG52YXIgaXNVbmRlZmluZWQgPSBhcHBseSh0eXBlT2YsIFwidW5kZWZpbmVkXCIpO1xuXG5mdW5jdGlvbiBpc051bGwoc3ViamVjdCkge1xuICByZXR1cm4gc3ViamVjdCA9PT0gbnVsbDtcbn1cblxuZnVuY3Rpb24gaXNIVE1MRWxlbWVudChzdWJqZWN0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHN1YmplY3QgaW5zdGFuY2VvZiAoc3ViamVjdC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IHx8IHdpbmRvdykuSFRNTEVsZW1lbnQ7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gdG9BcnJheSh2YWx1ZSkge1xuICByZXR1cm4gaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFt2YWx1ZV07XG59XG5cbmZ1bmN0aW9uIGZvckVhY2godmFsdWVzLCBpdGVyYXRlZSkge1xuICB0b0FycmF5KHZhbHVlcykuZm9yRWFjaChpdGVyYXRlZSk7XG59XG5cbmZ1bmN0aW9uIGluY2x1ZGVzKGFycmF5LCB2YWx1ZSkge1xuICByZXR1cm4gYXJyYXkuaW5kZXhPZih2YWx1ZSkgPiAtMTtcbn1cblxuZnVuY3Rpb24gcHVzaChhcnJheSwgaXRlbXMpIHtcbiAgYXJyYXkucHVzaC5hcHBseShhcnJheSwgdG9BcnJheShpdGVtcykpO1xuICByZXR1cm4gYXJyYXk7XG59XG5cbmZ1bmN0aW9uIHRvZ2dsZUNsYXNzKGVsbSwgY2xhc3NlcywgYWRkKSB7XG4gIGlmIChlbG0pIHtcbiAgICBmb3JFYWNoKGNsYXNzZXMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICBpZiAobmFtZSkge1xuICAgICAgICBlbG0uY2xhc3NMaXN0W2FkZCA/IFwiYWRkXCIgOiBcInJlbW92ZVwiXShuYW1lKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhZGRDbGFzcyhlbG0sIGNsYXNzZXMpIHtcbiAgdG9nZ2xlQ2xhc3MoZWxtLCBpc1N0cmluZyhjbGFzc2VzKSA/IGNsYXNzZXMuc3BsaXQoXCIgXCIpIDogY2xhc3NlcywgdHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGFwcGVuZChwYXJlbnQsIGNoaWxkcmVuKSB7XG4gIGZvckVhY2goY2hpbGRyZW4sIHBhcmVudC5hcHBlbmRDaGlsZC5iaW5kKHBhcmVudCkpO1xufVxuXG5mdW5jdGlvbiBiZWZvcmUobm9kZXMsIHJlZikge1xuICBmb3JFYWNoKG5vZGVzLCBmdW5jdGlvbiAobm9kZSkge1xuICAgIHZhciBwYXJlbnQgPSAocmVmIHx8IG5vZGUpLnBhcmVudE5vZGU7XG5cbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKG5vZGUsIHJlZik7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlcyhlbG0sIHNlbGVjdG9yKSB7XG4gIHJldHVybiBpc0hUTUxFbGVtZW50KGVsbSkgJiYgKGVsbVtcIm1zTWF0Y2hlc1NlbGVjdG9yXCJdIHx8IGVsbS5tYXRjaGVzKS5jYWxsKGVsbSwgc2VsZWN0b3IpO1xufVxuXG5mdW5jdGlvbiBjaGlsZHJlbihwYXJlbnQsIHNlbGVjdG9yKSB7XG4gIHZhciBjaGlsZHJlbjIgPSBwYXJlbnQgPyBzbGljZShwYXJlbnQuY2hpbGRyZW4pIDogW107XG4gIHJldHVybiBzZWxlY3RvciA/IGNoaWxkcmVuMi5maWx0ZXIoZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgcmV0dXJuIG1hdGNoZXMoY2hpbGQsIHNlbGVjdG9yKTtcbiAgfSkgOiBjaGlsZHJlbjI7XG59XG5cbmZ1bmN0aW9uIGNoaWxkKHBhcmVudCwgc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHNlbGVjdG9yID8gY2hpbGRyZW4ocGFyZW50LCBzZWxlY3RvcilbMF0gOiBwYXJlbnQuZmlyc3RFbGVtZW50Q2hpbGQ7XG59XG5cbnZhciBvd25LZXlzID0gT2JqZWN0LmtleXM7XG5cbmZ1bmN0aW9uIGZvck93bihvYmplY3QsIGl0ZXJhdGVlLCByaWdodCkge1xuICBpZiAob2JqZWN0KSB7XG4gICAgKHJpZ2h0ID8gb3duS2V5cyhvYmplY3QpLnJldmVyc2UoKSA6IG93bktleXMob2JqZWN0KSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBrZXkgIT09IFwiX19wcm90b19fXCIgJiYgaXRlcmF0ZWUob2JqZWN0W2tleV0sIGtleSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gb2JqZWN0O1xufVxuXG5mdW5jdGlvbiBhc3NpZ24ob2JqZWN0KSB7XG4gIHNsaWNlKGFyZ3VtZW50cywgMSkuZm9yRWFjaChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgZm9yT3duKHNvdXJjZSwgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgIG9iamVjdFtrZXldID0gc291cmNlW2tleV07XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gb2JqZWN0O1xufVxuXG5mdW5jdGlvbiBtZXJnZShvYmplY3QpIHtcbiAgc2xpY2UoYXJndW1lbnRzLCAxKS5mb3JFYWNoKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICBmb3JPd24oc291cmNlLCBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIG9iamVjdFtrZXldID0gdmFsdWUuc2xpY2UoKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIG9iamVjdFtrZXldID0gbWVyZ2Uoe30sIGlzT2JqZWN0KG9iamVjdFtrZXldKSA/IG9iamVjdFtrZXldIDoge30sIHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9iamVjdFtrZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gb2JqZWN0O1xufVxuXG5mdW5jdGlvbiBvbWl0KG9iamVjdCwga2V5cykge1xuICBmb3JFYWNoKGtleXMgfHwgb3duS2V5cyhvYmplY3QpLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgZGVsZXRlIG9iamVjdFtrZXldO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQXR0cmlidXRlKGVsbXMsIGF0dHJzKSB7XG4gIGZvckVhY2goZWxtcywgZnVuY3Rpb24gKGVsbSkge1xuICAgIGZvckVhY2goYXR0cnMsIGZ1bmN0aW9uIChhdHRyKSB7XG4gICAgICBlbG0gJiYgZWxtLnJlbW92ZUF0dHJpYnV0ZShhdHRyKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZShlbG1zLCBhdHRycywgdmFsdWUpIHtcbiAgaWYgKGlzT2JqZWN0KGF0dHJzKSkge1xuICAgIGZvck93bihhdHRycywgZnVuY3Rpb24gKHZhbHVlMiwgbmFtZSkge1xuICAgICAgc2V0QXR0cmlidXRlKGVsbXMsIG5hbWUsIHZhbHVlMik7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgZm9yRWFjaChlbG1zLCBmdW5jdGlvbiAoZWxtKSB7XG4gICAgICBpc051bGwodmFsdWUpIHx8IHZhbHVlID09PSBcIlwiID8gcmVtb3ZlQXR0cmlidXRlKGVsbSwgYXR0cnMpIDogZWxtLnNldEF0dHJpYnV0ZShhdHRycywgU3RyaW5nKHZhbHVlKSk7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlKHRhZywgYXR0cnMsIHBhcmVudCkge1xuICB2YXIgZWxtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcpO1xuXG4gIGlmIChhdHRycykge1xuICAgIGlzU3RyaW5nKGF0dHJzKSA/IGFkZENsYXNzKGVsbSwgYXR0cnMpIDogc2V0QXR0cmlidXRlKGVsbSwgYXR0cnMpO1xuICB9XG5cbiAgcGFyZW50ICYmIGFwcGVuZChwYXJlbnQsIGVsbSk7XG4gIHJldHVybiBlbG07XG59XG5cbmZ1bmN0aW9uIHN0eWxlKGVsbSwgcHJvcCwgdmFsdWUpIHtcbiAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkge1xuICAgIHJldHVybiBnZXRDb21wdXRlZFN0eWxlKGVsbSlbcHJvcF07XG4gIH1cblxuICBpZiAoIWlzTnVsbCh2YWx1ZSkpIHtcbiAgICBlbG0uc3R5bGVbcHJvcF0gPSBcIlwiICsgdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGlzcGxheShlbG0sIGRpc3BsYXkyKSB7XG4gIHN0eWxlKGVsbSwgXCJkaXNwbGF5XCIsIGRpc3BsYXkyKTtcbn1cblxuZnVuY3Rpb24gZm9jdXMoZWxtKSB7XG4gIGVsbVtcInNldEFjdGl2ZVwiXSAmJiBlbG1bXCJzZXRBY3RpdmVcIl0oKSB8fCBlbG0uZm9jdXMoe1xuICAgIHByZXZlbnRTY3JvbGw6IHRydWVcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldEF0dHJpYnV0ZShlbG0sIGF0dHIpIHtcbiAgcmV0dXJuIGVsbS5nZXRBdHRyaWJ1dGUoYXR0cik7XG59XG5cbmZ1bmN0aW9uIGhhc0NsYXNzKGVsbSwgY2xhc3NOYW1lKSB7XG4gIHJldHVybiBlbG0gJiYgZWxtLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpO1xufVxuXG5mdW5jdGlvbiByZWN0KHRhcmdldCkge1xuICByZXR1cm4gdGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xufVxuXG5mdW5jdGlvbiByZW1vdmUobm9kZXMpIHtcbiAgZm9yRWFjaChub2RlcywgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICBpZiAobm9kZSAmJiBub2RlLnBhcmVudE5vZGUpIHtcbiAgICAgIG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBwYXJzZUh0bWwoaHRtbCkge1xuICByZXR1cm4gY2hpbGQobmV3IERPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyhodG1sLCBcInRleHQvaHRtbFwiKS5ib2R5KTtcbn1cblxuZnVuY3Rpb24gcHJldmVudChlLCBzdG9wUHJvcGFnYXRpb24pIHtcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gIGlmIChzdG9wUHJvcGFnYXRpb24pIHtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcXVlcnkocGFyZW50LCBzZWxlY3Rvcikge1xuICByZXR1cm4gcGFyZW50ICYmIHBhcmVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbn1cblxuZnVuY3Rpb24gcXVlcnlBbGwocGFyZW50LCBzZWxlY3Rvcikge1xuICByZXR1cm4gc2VsZWN0b3IgPyBzbGljZShwYXJlbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpIDogW107XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzKGVsbSwgY2xhc3Nlcykge1xuICB0b2dnbGVDbGFzcyhlbG0sIGNsYXNzZXMsIGZhbHNlKTtcbn1cblxuZnVuY3Rpb24gdGltZU9mKGUpIHtcbiAgcmV0dXJuIGUudGltZVN0YW1wO1xufVxuXG5mdW5jdGlvbiB1bml0KHZhbHVlKSB7XG4gIHJldHVybiBpc1N0cmluZyh2YWx1ZSkgPyB2YWx1ZSA6IHZhbHVlID8gdmFsdWUgKyBcInB4XCIgOiBcIlwiO1xufVxuXG52YXIgUFJPSkVDVF9DT0RFID0gXCJzcGxpZGVcIjtcbnZhciBEQVRBX0FUVFJJQlVURSA9IFwiZGF0YS1cIiArIFBST0pFQ1RfQ09ERTtcblxuZnVuY3Rpb24gYXNzZXJ0KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihcIltcIiArIFBST0pFQ1RfQ09ERSArIFwiXSBcIiArIChtZXNzYWdlIHx8IFwiXCIpKTtcbiAgfVxufVxuXG52YXIgbWluID0gTWF0aC5taW4sXG4gICAgbWF4ID0gTWF0aC5tYXgsXG4gICAgZmxvb3IgPSBNYXRoLmZsb29yLFxuICAgIGNlaWwgPSBNYXRoLmNlaWwsXG4gICAgYWJzID0gTWF0aC5hYnM7XG5cbmZ1bmN0aW9uIGFwcHJveGltYXRlbHlFcXVhbCh4LCB5LCBlcHNpbG9uKSB7XG4gIHJldHVybiBhYnMoeCAtIHkpIDwgZXBzaWxvbjtcbn1cblxuZnVuY3Rpb24gYmV0d2VlbihudW1iZXIsIHgsIHksIGV4Y2x1c2l2ZSkge1xuICB2YXIgbWluaW11bSA9IG1pbih4LCB5KTtcbiAgdmFyIG1heGltdW0gPSBtYXgoeCwgeSk7XG4gIHJldHVybiBleGNsdXNpdmUgPyBtaW5pbXVtIDwgbnVtYmVyICYmIG51bWJlciA8IG1heGltdW0gOiBtaW5pbXVtIDw9IG51bWJlciAmJiBudW1iZXIgPD0gbWF4aW11bTtcbn1cblxuZnVuY3Rpb24gY2xhbXAobnVtYmVyLCB4LCB5KSB7XG4gIHZhciBtaW5pbXVtID0gbWluKHgsIHkpO1xuICB2YXIgbWF4aW11bSA9IG1heCh4LCB5KTtcbiAgcmV0dXJuIG1pbihtYXgobWluaW11bSwgbnVtYmVyKSwgbWF4aW11bSk7XG59XG5cbmZ1bmN0aW9uIHNpZ24oeCkge1xuICByZXR1cm4gKyh4ID4gMCkgLSArKHggPCAwKTtcbn1cblxuZnVuY3Rpb24gY2FtZWxUb0tlYmFiKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoLyhbYS16MC05XSkoW0EtWl0pL2csIFwiJDEtJDJcIikudG9Mb3dlckNhc2UoKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0KHN0cmluZywgcmVwbGFjZW1lbnRzKSB7XG4gIGZvckVhY2gocmVwbGFjZW1lbnRzLCBmdW5jdGlvbiAocmVwbGFjZW1lbnQpIHtcbiAgICBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShcIiVzXCIsIFwiXCIgKyByZXBsYWNlbWVudCk7XG4gIH0pO1xuICByZXR1cm4gc3RyaW5nO1xufVxuXG5mdW5jdGlvbiBwYWQobnVtYmVyKSB7XG4gIHJldHVybiBudW1iZXIgPCAxMCA/IFwiMFwiICsgbnVtYmVyIDogXCJcIiArIG51bWJlcjtcbn1cblxudmFyIGlkcyA9IHt9O1xuXG5mdW5jdGlvbiB1bmlxdWVJZChwcmVmaXgpIHtcbiAgcmV0dXJuIFwiXCIgKyBwcmVmaXggKyBwYWQoaWRzW3ByZWZpeF0gPSAoaWRzW3ByZWZpeF0gfHwgMCkgKyAxKTtcbn1cblxuZnVuY3Rpb24gRXZlbnRCaW5kZXIoKSB7XG4gIHZhciBsaXN0ZW5lcnMgPSBbXTtcblxuICBmdW5jdGlvbiBiaW5kKHRhcmdldHMsIGV2ZW50cywgY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgICBmb3JFYWNoRXZlbnQodGFyZ2V0cywgZXZlbnRzLCBmdW5jdGlvbiAodGFyZ2V0LCBldmVudCwgbmFtZXNwYWNlKSB7XG4gICAgICB2YXIgaXNFdmVudFRhcmdldCA9IChcImFkZEV2ZW50TGlzdGVuZXJcIiBpbiB0YXJnZXQpO1xuICAgICAgdmFyIHJlbW92ZXIgPSBpc0V2ZW50VGFyZ2V0ID8gdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIuYmluZCh0YXJnZXQsIGV2ZW50LCBjYWxsYmFjaywgb3B0aW9ucykgOiB0YXJnZXRbXCJyZW1vdmVMaXN0ZW5lclwiXS5iaW5kKHRhcmdldCwgY2FsbGJhY2spO1xuICAgICAgaXNFdmVudFRhcmdldCA/IHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBjYWxsYmFjaywgb3B0aW9ucykgOiB0YXJnZXRbXCJhZGRMaXN0ZW5lclwiXShjYWxsYmFjayk7XG4gICAgICBsaXN0ZW5lcnMucHVzaChbdGFyZ2V0LCBldmVudCwgbmFtZXNwYWNlLCBjYWxsYmFjaywgcmVtb3Zlcl0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gdW5iaW5kKHRhcmdldHMsIGV2ZW50cywgY2FsbGJhY2spIHtcbiAgICBmb3JFYWNoRXZlbnQodGFyZ2V0cywgZXZlbnRzLCBmdW5jdGlvbiAodGFyZ2V0LCBldmVudCwgbmFtZXNwYWNlKSB7XG4gICAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuZmlsdGVyKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgICBpZiAobGlzdGVuZXJbMF0gPT09IHRhcmdldCAmJiBsaXN0ZW5lclsxXSA9PT0gZXZlbnQgJiYgbGlzdGVuZXJbMl0gPT09IG5hbWVzcGFjZSAmJiAoIWNhbGxiYWNrIHx8IGxpc3RlbmVyWzNdID09PSBjYWxsYmFjaykpIHtcbiAgICAgICAgICBsaXN0ZW5lcls0XSgpO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBkaXNwYXRjaCh0YXJnZXQsIHR5cGUsIGRldGFpbCkge1xuICAgIHZhciBlO1xuICAgIHZhciBidWJibGVzID0gdHJ1ZTtcblxuICAgIGlmICh0eXBlb2YgQ3VzdG9tRXZlbnQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgZSA9IG5ldyBDdXN0b21FdmVudCh0eXBlLCB7XG4gICAgICAgIGJ1YmJsZXM6IGJ1YmJsZXMsXG4gICAgICAgIGRldGFpbDogZGV0YWlsXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZSA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiQ3VzdG9tRXZlbnRcIik7XG4gICAgICBlLmluaXRDdXN0b21FdmVudCh0eXBlLCBidWJibGVzLCBmYWxzZSwgZGV0YWlsKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuZGlzcGF0Y2hFdmVudChlKTtcbiAgICByZXR1cm4gZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvckVhY2hFdmVudCh0YXJnZXRzLCBldmVudHMsIGl0ZXJhdGVlKSB7XG4gICAgZm9yRWFjaCh0YXJnZXRzLCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICB0YXJnZXQgJiYgZm9yRWFjaChldmVudHMsIGZ1bmN0aW9uIChldmVudHMyKSB7XG4gICAgICAgIGV2ZW50czIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50TlMpIHtcbiAgICAgICAgICB2YXIgZnJhZ21lbnQgPSBldmVudE5TLnNwbGl0KFwiLlwiKTtcbiAgICAgICAgICBpdGVyYXRlZSh0YXJnZXQsIGZyYWdtZW50WzBdLCBmcmFnbWVudFsxXSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICBkYXRhWzRdKCk7XG4gICAgfSk7XG4gICAgZW1wdHkobGlzdGVuZXJzKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgYmluZDogYmluZCxcbiAgICB1bmJpbmQ6IHVuYmluZCxcbiAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXG4gICAgZGVzdHJveTogZGVzdHJveVxuICB9O1xufVxuXG52YXIgRVZFTlRfTU9VTlRFRCA9IFwibW91bnRlZFwiO1xudmFyIEVWRU5UX1JFQURZID0gXCJyZWFkeVwiO1xudmFyIEVWRU5UX01PVkUgPSBcIm1vdmVcIjtcbnZhciBFVkVOVF9NT1ZFRCA9IFwibW92ZWRcIjtcbnZhciBFVkVOVF9DTElDSyA9IFwiY2xpY2tcIjtcbnZhciBFVkVOVF9BQ1RJVkUgPSBcImFjdGl2ZVwiO1xudmFyIEVWRU5UX0lOQUNUSVZFID0gXCJpbmFjdGl2ZVwiO1xudmFyIEVWRU5UX1ZJU0lCTEUgPSBcInZpc2libGVcIjtcbnZhciBFVkVOVF9ISURERU4gPSBcImhpZGRlblwiO1xudmFyIEVWRU5UX1JFRlJFU0ggPSBcInJlZnJlc2hcIjtcbnZhciBFVkVOVF9VUERBVEVEID0gXCJ1cGRhdGVkXCI7XG52YXIgRVZFTlRfUkVTSVpFID0gXCJyZXNpemVcIjtcbnZhciBFVkVOVF9SRVNJWkVEID0gXCJyZXNpemVkXCI7XG52YXIgRVZFTlRfRFJBRyA9IFwiZHJhZ1wiO1xudmFyIEVWRU5UX0RSQUdHSU5HID0gXCJkcmFnZ2luZ1wiO1xudmFyIEVWRU5UX0RSQUdHRUQgPSBcImRyYWdnZWRcIjtcbnZhciBFVkVOVF9TQ1JPTEwgPSBcInNjcm9sbFwiO1xudmFyIEVWRU5UX1NDUk9MTEVEID0gXCJzY3JvbGxlZFwiO1xudmFyIEVWRU5UX09WRVJGTE9XID0gXCJvdmVyZmxvd1wiO1xudmFyIEVWRU5UX0RFU1RST1kgPSBcImRlc3Ryb3lcIjtcbnZhciBFVkVOVF9BUlJPV1NfTU9VTlRFRCA9IFwiYXJyb3dzOm1vdW50ZWRcIjtcbnZhciBFVkVOVF9BUlJPV1NfVVBEQVRFRCA9IFwiYXJyb3dzOnVwZGF0ZWRcIjtcbnZhciBFVkVOVF9QQUdJTkFUSU9OX01PVU5URUQgPSBcInBhZ2luYXRpb246bW91bnRlZFwiO1xudmFyIEVWRU5UX1BBR0lOQVRJT05fVVBEQVRFRCA9IFwicGFnaW5hdGlvbjp1cGRhdGVkXCI7XG52YXIgRVZFTlRfTkFWSUdBVElPTl9NT1VOVEVEID0gXCJuYXZpZ2F0aW9uOm1vdW50ZWRcIjtcbnZhciBFVkVOVF9BVVRPUExBWV9QTEFZID0gXCJhdXRvcGxheTpwbGF5XCI7XG52YXIgRVZFTlRfQVVUT1BMQVlfUExBWUlORyA9IFwiYXV0b3BsYXk6cGxheWluZ1wiO1xudmFyIEVWRU5UX0FVVE9QTEFZX1BBVVNFID0gXCJhdXRvcGxheTpwYXVzZVwiO1xudmFyIEVWRU5UX0xBWllMT0FEX0xPQURFRCA9IFwibGF6eWxvYWQ6bG9hZGVkXCI7XG52YXIgRVZFTlRfU0xJREVfS0VZRE9XTiA9IFwic2tcIjtcbnZhciBFVkVOVF9TSElGVEVEID0gXCJzaFwiO1xudmFyIEVWRU5UX0VORF9JTkRFWF9DSEFOR0VEID0gXCJlaVwiO1xuXG5mdW5jdGlvbiBFdmVudEludGVyZmFjZShTcGxpZGUyKSB7XG4gIHZhciBidXMgPSBTcGxpZGUyID8gU3BsaWRlMi5ldmVudC5idXMgOiBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gIHZhciBiaW5kZXIgPSBFdmVudEJpbmRlcigpO1xuXG4gIGZ1bmN0aW9uIG9uKGV2ZW50cywgY2FsbGJhY2spIHtcbiAgICBiaW5kZXIuYmluZChidXMsIHRvQXJyYXkoZXZlbnRzKS5qb2luKFwiIFwiKSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIGNhbGxiYWNrLmFwcGx5KGNhbGxiYWNrLCBpc0FycmF5KGUuZGV0YWlsKSA/IGUuZGV0YWlsIDogW10pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZW1pdChldmVudCkge1xuICAgIGJpbmRlci5kaXNwYXRjaChidXMsIGV2ZW50LCBzbGljZShhcmd1bWVudHMsIDEpKTtcbiAgfVxuXG4gIGlmIChTcGxpZGUyKSB7XG4gICAgU3BsaWRlMi5ldmVudC5vbihFVkVOVF9ERVNUUk9ZLCBiaW5kZXIuZGVzdHJveSk7XG4gIH1cblxuICByZXR1cm4gYXNzaWduKGJpbmRlciwge1xuICAgIGJ1czogYnVzLFxuICAgIG9uOiBvbixcbiAgICBvZmY6IGFwcGx5KGJpbmRlci51bmJpbmQsIGJ1cyksXG4gICAgZW1pdDogZW1pdFxuICB9KTtcbn1cblxuZnVuY3Rpb24gUmVxdWVzdEludGVydmFsKGludGVydmFsLCBvbkludGVydmFsLCBvblVwZGF0ZSwgbGltaXQpIHtcbiAgdmFyIG5vdyA9IERhdGUubm93O1xuICB2YXIgc3RhcnRUaW1lO1xuICB2YXIgcmF0ZSA9IDA7XG4gIHZhciBpZDtcbiAgdmFyIHBhdXNlZCA9IHRydWU7XG4gIHZhciBjb3VudCA9IDA7XG5cbiAgZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIGlmICghcGF1c2VkKSB7XG4gICAgICByYXRlID0gaW50ZXJ2YWwgPyBtaW4oKG5vdygpIC0gc3RhcnRUaW1lKSAvIGludGVydmFsLCAxKSA6IDE7XG4gICAgICBvblVwZGF0ZSAmJiBvblVwZGF0ZShyYXRlKTtcblxuICAgICAgaWYgKHJhdGUgPj0gMSkge1xuICAgICAgICBvbkludGVydmFsKCk7XG4gICAgICAgIHN0YXJ0VGltZSA9IG5vdygpO1xuXG4gICAgICAgIGlmIChsaW1pdCAmJiArK2NvdW50ID49IGxpbWl0KSB7XG4gICAgICAgICAgcmV0dXJuIHBhdXNlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWQgPSByYWYodXBkYXRlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzdGFydChyZXN1bWUpIHtcbiAgICByZXN1bWUgfHwgY2FuY2VsKCk7XG4gICAgc3RhcnRUaW1lID0gbm93KCkgLSAocmVzdW1lID8gcmF0ZSAqIGludGVydmFsIDogMCk7XG4gICAgcGF1c2VkID0gZmFsc2U7XG4gICAgaWQgPSByYWYodXBkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhdXNlKCkge1xuICAgIHBhdXNlZCA9IHRydWU7XG4gIH1cblxuICBmdW5jdGlvbiByZXdpbmQoKSB7XG4gICAgc3RhcnRUaW1lID0gbm93KCk7XG4gICAgcmF0ZSA9IDA7XG5cbiAgICBpZiAob25VcGRhdGUpIHtcbiAgICAgIG9uVXBkYXRlKHJhdGUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICBpZCAmJiBjYW5jZWxBbmltYXRpb25GcmFtZShpZCk7XG4gICAgcmF0ZSA9IDA7XG4gICAgaWQgPSAwO1xuICAgIHBhdXNlZCA9IHRydWU7XG4gIH1cblxuICBmdW5jdGlvbiBzZXQodGltZSkge1xuICAgIGludGVydmFsID0gdGltZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzUGF1c2VkKCkge1xuICAgIHJldHVybiBwYXVzZWQ7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHN0YXJ0OiBzdGFydCxcbiAgICByZXdpbmQ6IHJld2luZCxcbiAgICBwYXVzZTogcGF1c2UsXG4gICAgY2FuY2VsOiBjYW5jZWwsXG4gICAgc2V0OiBzZXQsXG4gICAgaXNQYXVzZWQ6IGlzUGF1c2VkXG4gIH07XG59XG5cbmZ1bmN0aW9uIFN0YXRlKGluaXRpYWxTdGF0ZSkge1xuICB2YXIgc3RhdGUgPSBpbml0aWFsU3RhdGU7XG5cbiAgZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgc3RhdGUgPSB2YWx1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzKHN0YXRlcykge1xuICAgIHJldHVybiBpbmNsdWRlcyh0b0FycmF5KHN0YXRlcyksIHN0YXRlKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc2V0OiBzZXQsXG4gICAgaXM6IGlzXG4gIH07XG59XG5cbmZ1bmN0aW9uIFRocm90dGxlKGZ1bmMsIGR1cmF0aW9uKSB7XG4gIHZhciBpbnRlcnZhbCA9IFJlcXVlc3RJbnRlcnZhbChkdXJhdGlvbiB8fCAwLCBmdW5jLCBudWxsLCAxKTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpbnRlcnZhbC5pc1BhdXNlZCgpICYmIGludGVydmFsLnN0YXJ0KCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIE1lZGlhKFNwbGlkZTIsIENvbXBvbmVudHMyLCBvcHRpb25zKSB7XG4gIHZhciBzdGF0ZSA9IFNwbGlkZTIuc3RhdGU7XG4gIHZhciBicmVha3BvaW50cyA9IG9wdGlvbnMuYnJlYWtwb2ludHMgfHwge307XG4gIHZhciByZWR1Y2VkTW90aW9uID0gb3B0aW9ucy5yZWR1Y2VkTW90aW9uIHx8IHt9O1xuICB2YXIgYmluZGVyID0gRXZlbnRCaW5kZXIoKTtcbiAgdmFyIHF1ZXJpZXMgPSBbXTtcblxuICBmdW5jdGlvbiBzZXR1cCgpIHtcbiAgICB2YXIgaXNNaW4gPSBvcHRpb25zLm1lZGlhUXVlcnkgPT09IFwibWluXCI7XG4gICAgb3duS2V5cyhicmVha3BvaW50cykuc29ydChmdW5jdGlvbiAobiwgbSkge1xuICAgICAgcmV0dXJuIGlzTWluID8gK24gLSArbSA6ICttIC0gK247XG4gICAgfSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZWdpc3RlcihicmVha3BvaW50c1trZXldLCBcIihcIiArIChpc01pbiA/IFwibWluXCIgOiBcIm1heFwiKSArIFwiLXdpZHRoOlwiICsga2V5ICsgXCJweClcIik7XG4gICAgfSk7XG4gICAgcmVnaXN0ZXIocmVkdWNlZE1vdGlvbiwgTUVESUFfUFJFRkVSU19SRURVQ0VEX01PVElPTik7XG4gICAgdXBkYXRlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBkZXN0cm95KGNvbXBsZXRlbHkpIHtcbiAgICBpZiAoY29tcGxldGVseSkge1xuICAgICAgYmluZGVyLmRlc3Ryb3koKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWdpc3RlcihvcHRpb25zMiwgcXVlcnkpIHtcbiAgICB2YXIgcXVlcnlMaXN0ID0gbWF0Y2hNZWRpYShxdWVyeSk7XG4gICAgYmluZGVyLmJpbmQocXVlcnlMaXN0LCBcImNoYW5nZVwiLCB1cGRhdGUpO1xuICAgIHF1ZXJpZXMucHVzaChbb3B0aW9uczIsIHF1ZXJ5TGlzdF0pO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIHZhciBkZXN0cm95ZWQgPSBzdGF0ZS5pcyhERVNUUk9ZRUQpO1xuICAgIHZhciBkaXJlY3Rpb24gPSBvcHRpb25zLmRpcmVjdGlvbjtcbiAgICB2YXIgbWVyZ2VkID0gcXVlcmllcy5yZWR1Y2UoZnVuY3Rpb24gKG1lcmdlZDIsIGVudHJ5KSB7XG4gICAgICByZXR1cm4gbWVyZ2UobWVyZ2VkMiwgZW50cnlbMV0ubWF0Y2hlcyA/IGVudHJ5WzBdIDoge30pO1xuICAgIH0sIHt9KTtcbiAgICBvbWl0KG9wdGlvbnMpO1xuICAgIHNldChtZXJnZWQpO1xuXG4gICAgaWYgKG9wdGlvbnMuZGVzdHJveSkge1xuICAgICAgU3BsaWRlMi5kZXN0cm95KG9wdGlvbnMuZGVzdHJveSA9PT0gXCJjb21wbGV0ZWx5XCIpO1xuICAgIH0gZWxzZSBpZiAoZGVzdHJveWVkKSB7XG4gICAgICBkZXN0cm95KHRydWUpO1xuICAgICAgU3BsaWRlMi5tb3VudCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkaXJlY3Rpb24gIT09IG9wdGlvbnMuZGlyZWN0aW9uICYmIFNwbGlkZTIucmVmcmVzaCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlZHVjZShlbmFibGUpIHtcbiAgICBpZiAobWF0Y2hNZWRpYShNRURJQV9QUkVGRVJTX1JFRFVDRURfTU9USU9OKS5tYXRjaGVzKSB7XG4gICAgICBlbmFibGUgPyBtZXJnZShvcHRpb25zLCByZWR1Y2VkTW90aW9uKSA6IG9taXQob3B0aW9ucywgb3duS2V5cyhyZWR1Y2VkTW90aW9uKSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0KG9wdHMsIGJhc2UsIG5vdGlmeSkge1xuICAgIG1lcmdlKG9wdGlvbnMsIG9wdHMpO1xuICAgIGJhc2UgJiYgbWVyZ2UoT2JqZWN0LmdldFByb3RvdHlwZU9mKG9wdGlvbnMpLCBvcHRzKTtcblxuICAgIGlmIChub3RpZnkgfHwgIXN0YXRlLmlzKENSRUFURUQpKSB7XG4gICAgICBTcGxpZGUyLmVtaXQoRVZFTlRfVVBEQVRFRCwgb3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzZXR1cDogc2V0dXAsXG4gICAgZGVzdHJveTogZGVzdHJveSxcbiAgICByZWR1Y2U6IHJlZHVjZSxcbiAgICBzZXQ6IHNldFxuICB9O1xufVxuXG52YXIgQVJST1cgPSBcIkFycm93XCI7XG52YXIgQVJST1dfTEVGVCA9IEFSUk9XICsgXCJMZWZ0XCI7XG52YXIgQVJST1dfUklHSFQgPSBBUlJPVyArIFwiUmlnaHRcIjtcbnZhciBBUlJPV19VUCA9IEFSUk9XICsgXCJVcFwiO1xudmFyIEFSUk9XX0RPV04gPSBBUlJPVyArIFwiRG93blwiO1xudmFyIExUUiA9IFwibHRyXCI7XG52YXIgUlRMID0gXCJydGxcIjtcbnZhciBUVEIgPSBcInR0YlwiO1xudmFyIE9SSUVOVEFUSU9OX01BUCA9IHtcbiAgd2lkdGg6IFtcImhlaWdodFwiXSxcbiAgbGVmdDogW1widG9wXCIsIFwicmlnaHRcIl0sXG4gIHJpZ2h0OiBbXCJib3R0b21cIiwgXCJsZWZ0XCJdLFxuICB4OiBbXCJ5XCJdLFxuICBYOiBbXCJZXCJdLFxuICBZOiBbXCJYXCJdLFxuICBBcnJvd0xlZnQ6IFtBUlJPV19VUCwgQVJST1dfUklHSFRdLFxuICBBcnJvd1JpZ2h0OiBbQVJST1dfRE9XTiwgQVJST1dfTEVGVF1cbn07XG5cbmZ1bmN0aW9uIERpcmVjdGlvbihTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICBmdW5jdGlvbiByZXNvbHZlKHByb3AsIGF4aXNPbmx5LCBkaXJlY3Rpb24pIHtcbiAgICBkaXJlY3Rpb24gPSBkaXJlY3Rpb24gfHwgb3B0aW9ucy5kaXJlY3Rpb247XG4gICAgdmFyIGluZGV4ID0gZGlyZWN0aW9uID09PSBSVEwgJiYgIWF4aXNPbmx5ID8gMSA6IGRpcmVjdGlvbiA9PT0gVFRCID8gMCA6IC0xO1xuICAgIHJldHVybiBPUklFTlRBVElPTl9NQVBbcHJvcF0gJiYgT1JJRU5UQVRJT05fTUFQW3Byb3BdW2luZGV4XSB8fCBwcm9wLnJlcGxhY2UoL3dpZHRofGxlZnR8cmlnaHQvaSwgZnVuY3Rpb24gKG1hdGNoLCBvZmZzZXQpIHtcbiAgICAgIHZhciByZXBsYWNlbWVudCA9IE9SSUVOVEFUSU9OX01BUFttYXRjaC50b0xvd2VyQ2FzZSgpXVtpbmRleF0gfHwgbWF0Y2g7XG4gICAgICByZXR1cm4gb2Zmc2V0ID4gMCA/IHJlcGxhY2VtZW50LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcmVwbGFjZW1lbnQuc2xpY2UoMSkgOiByZXBsYWNlbWVudDtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9yaWVudCh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAqIChvcHRpb25zLmRpcmVjdGlvbiA9PT0gUlRMID8gMSA6IC0xKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcmVzb2x2ZTogcmVzb2x2ZSxcbiAgICBvcmllbnQ6IG9yaWVudFxuICB9O1xufVxuXG52YXIgUk9MRSA9IFwicm9sZVwiO1xudmFyIFRBQl9JTkRFWCA9IFwidGFiaW5kZXhcIjtcbnZhciBESVNBQkxFRCA9IFwiZGlzYWJsZWRcIjtcbnZhciBBUklBX1BSRUZJWCA9IFwiYXJpYS1cIjtcbnZhciBBUklBX0NPTlRST0xTID0gQVJJQV9QUkVGSVggKyBcImNvbnRyb2xzXCI7XG52YXIgQVJJQV9DVVJSRU5UID0gQVJJQV9QUkVGSVggKyBcImN1cnJlbnRcIjtcbnZhciBBUklBX1NFTEVDVEVEID0gQVJJQV9QUkVGSVggKyBcInNlbGVjdGVkXCI7XG52YXIgQVJJQV9MQUJFTCA9IEFSSUFfUFJFRklYICsgXCJsYWJlbFwiO1xudmFyIEFSSUFfTEFCRUxMRURCWSA9IEFSSUFfUFJFRklYICsgXCJsYWJlbGxlZGJ5XCI7XG52YXIgQVJJQV9ISURERU4gPSBBUklBX1BSRUZJWCArIFwiaGlkZGVuXCI7XG52YXIgQVJJQV9PUklFTlRBVElPTiA9IEFSSUFfUFJFRklYICsgXCJvcmllbnRhdGlvblwiO1xudmFyIEFSSUFfUk9MRURFU0NSSVBUSU9OID0gQVJJQV9QUkVGSVggKyBcInJvbGVkZXNjcmlwdGlvblwiO1xudmFyIEFSSUFfTElWRSA9IEFSSUFfUFJFRklYICsgXCJsaXZlXCI7XG52YXIgQVJJQV9CVVNZID0gQVJJQV9QUkVGSVggKyBcImJ1c3lcIjtcbnZhciBBUklBX0FUT01JQyA9IEFSSUFfUFJFRklYICsgXCJhdG9taWNcIjtcbnZhciBBTExfQVRUUklCVVRFUyA9IFtST0xFLCBUQUJfSU5ERVgsIERJU0FCTEVELCBBUklBX0NPTlRST0xTLCBBUklBX0NVUlJFTlQsIEFSSUFfTEFCRUwsIEFSSUFfTEFCRUxMRURCWSwgQVJJQV9ISURERU4sIEFSSUFfT1JJRU5UQVRJT04sIEFSSUFfUk9MRURFU0NSSVBUSU9OXTtcbnZhciBDTEFTU19QUkVGSVggPSBQUk9KRUNUX0NPREUgKyBcIl9fXCI7XG52YXIgU1RBVFVTX0NMQVNTX1BSRUZJWCA9IFwiaXMtXCI7XG52YXIgQ0xBU1NfUk9PVCA9IFBST0pFQ1RfQ09ERTtcbnZhciBDTEFTU19UUkFDSyA9IENMQVNTX1BSRUZJWCArIFwidHJhY2tcIjtcbnZhciBDTEFTU19MSVNUID0gQ0xBU1NfUFJFRklYICsgXCJsaXN0XCI7XG52YXIgQ0xBU1NfU0xJREUgPSBDTEFTU19QUkVGSVggKyBcInNsaWRlXCI7XG52YXIgQ0xBU1NfQ0xPTkUgPSBDTEFTU19TTElERSArIFwiLS1jbG9uZVwiO1xudmFyIENMQVNTX0NPTlRBSU5FUiA9IENMQVNTX1NMSURFICsgXCJfX2NvbnRhaW5lclwiO1xudmFyIENMQVNTX0FSUk9XUyA9IENMQVNTX1BSRUZJWCArIFwiYXJyb3dzXCI7XG52YXIgQ0xBU1NfQVJST1cgPSBDTEFTU19QUkVGSVggKyBcImFycm93XCI7XG52YXIgQ0xBU1NfQVJST1dfUFJFViA9IENMQVNTX0FSUk9XICsgXCItLXByZXZcIjtcbnZhciBDTEFTU19BUlJPV19ORVhUID0gQ0xBU1NfQVJST1cgKyBcIi0tbmV4dFwiO1xudmFyIENMQVNTX1BBR0lOQVRJT04gPSBDTEFTU19QUkVGSVggKyBcInBhZ2luYXRpb25cIjtcbnZhciBDTEFTU19QQUdJTkFUSU9OX1BBR0UgPSBDTEFTU19QQUdJTkFUSU9OICsgXCJfX3BhZ2VcIjtcbnZhciBDTEFTU19QUk9HUkVTUyA9IENMQVNTX1BSRUZJWCArIFwicHJvZ3Jlc3NcIjtcbnZhciBDTEFTU19QUk9HUkVTU19CQVIgPSBDTEFTU19QUk9HUkVTUyArIFwiX19iYXJcIjtcbnZhciBDTEFTU19UT0dHTEUgPSBDTEFTU19QUkVGSVggKyBcInRvZ2dsZVwiO1xudmFyIENMQVNTX1RPR0dMRV9QTEFZID0gQ0xBU1NfVE9HR0xFICsgXCJfX3BsYXlcIjtcbnZhciBDTEFTU19UT0dHTEVfUEFVU0UgPSBDTEFTU19UT0dHTEUgKyBcIl9fcGF1c2VcIjtcbnZhciBDTEFTU19TUElOTkVSID0gQ0xBU1NfUFJFRklYICsgXCJzcGlubmVyXCI7XG52YXIgQ0xBU1NfU1IgPSBDTEFTU19QUkVGSVggKyBcInNyXCI7XG52YXIgQ0xBU1NfSU5JVElBTElaRUQgPSBTVEFUVVNfQ0xBU1NfUFJFRklYICsgXCJpbml0aWFsaXplZFwiO1xudmFyIENMQVNTX0FDVElWRSA9IFNUQVRVU19DTEFTU19QUkVGSVggKyBcImFjdGl2ZVwiO1xudmFyIENMQVNTX1BSRVYgPSBTVEFUVVNfQ0xBU1NfUFJFRklYICsgXCJwcmV2XCI7XG52YXIgQ0xBU1NfTkVYVCA9IFNUQVRVU19DTEFTU19QUkVGSVggKyBcIm5leHRcIjtcbnZhciBDTEFTU19WSVNJQkxFID0gU1RBVFVTX0NMQVNTX1BSRUZJWCArIFwidmlzaWJsZVwiO1xudmFyIENMQVNTX0xPQURJTkcgPSBTVEFUVVNfQ0xBU1NfUFJFRklYICsgXCJsb2FkaW5nXCI7XG52YXIgQ0xBU1NfRk9DVVNfSU4gPSBTVEFUVVNfQ0xBU1NfUFJFRklYICsgXCJmb2N1cy1pblwiO1xudmFyIENMQVNTX09WRVJGTE9XID0gU1RBVFVTX0NMQVNTX1BSRUZJWCArIFwib3ZlcmZsb3dcIjtcbnZhciBTVEFUVVNfQ0xBU1NFUyA9IFtDTEFTU19BQ1RJVkUsIENMQVNTX1ZJU0lCTEUsIENMQVNTX1BSRVYsIENMQVNTX05FWFQsIENMQVNTX0xPQURJTkcsIENMQVNTX0ZPQ1VTX0lOLCBDTEFTU19PVkVSRkxPV107XG52YXIgQ0xBU1NFUyA9IHtcbiAgc2xpZGU6IENMQVNTX1NMSURFLFxuICBjbG9uZTogQ0xBU1NfQ0xPTkUsXG4gIGFycm93czogQ0xBU1NfQVJST1dTLFxuICBhcnJvdzogQ0xBU1NfQVJST1csXG4gIHByZXY6IENMQVNTX0FSUk9XX1BSRVYsXG4gIG5leHQ6IENMQVNTX0FSUk9XX05FWFQsXG4gIHBhZ2luYXRpb246IENMQVNTX1BBR0lOQVRJT04sXG4gIHBhZ2U6IENMQVNTX1BBR0lOQVRJT05fUEFHRSxcbiAgc3Bpbm5lcjogQ0xBU1NfU1BJTk5FUlxufTtcblxuZnVuY3Rpb24gY2xvc2VzdChmcm9tLCBzZWxlY3Rvcikge1xuICBpZiAoaXNGdW5jdGlvbihmcm9tLmNsb3Nlc3QpKSB7XG4gICAgcmV0dXJuIGZyb20uY2xvc2VzdChzZWxlY3Rvcik7XG4gIH1cblxuICB2YXIgZWxtID0gZnJvbTtcblxuICB3aGlsZSAoZWxtICYmIGVsbS5ub2RlVHlwZSA9PT0gMSkge1xuICAgIGlmIChtYXRjaGVzKGVsbSwgc2VsZWN0b3IpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBlbG0gPSBlbG0ucGFyZW50RWxlbWVudDtcbiAgfVxuXG4gIHJldHVybiBlbG07XG59XG5cbnZhciBGUklDVElPTiA9IDU7XG52YXIgTE9HX0lOVEVSVkFMID0gMjAwO1xudmFyIFBPSU5URVJfRE9XTl9FVkVOVFMgPSBcInRvdWNoc3RhcnQgbW91c2Vkb3duXCI7XG52YXIgUE9JTlRFUl9NT1ZFX0VWRU5UUyA9IFwidG91Y2htb3ZlIG1vdXNlbW92ZVwiO1xudmFyIFBPSU5URVJfVVBfRVZFTlRTID0gXCJ0b3VjaGVuZCB0b3VjaGNhbmNlbCBtb3VzZXVwIGNsaWNrXCI7XG5cbmZ1bmN0aW9uIEVsZW1lbnRzKFNwbGlkZTIsIENvbXBvbmVudHMyLCBvcHRpb25zKSB7XG4gIHZhciBfRXZlbnRJbnRlcmZhY2UgPSBFdmVudEludGVyZmFjZShTcGxpZGUyKSxcbiAgICAgIG9uID0gX0V2ZW50SW50ZXJmYWNlLm9uLFxuICAgICAgYmluZCA9IF9FdmVudEludGVyZmFjZS5iaW5kO1xuXG4gIHZhciByb290ID0gU3BsaWRlMi5yb290O1xuICB2YXIgaTE4biA9IG9wdGlvbnMuaTE4bjtcbiAgdmFyIGVsZW1lbnRzID0ge307XG4gIHZhciBzbGlkZXMgPSBbXTtcbiAgdmFyIHJvb3RDbGFzc2VzID0gW107XG4gIHZhciB0cmFja0NsYXNzZXMgPSBbXTtcbiAgdmFyIHRyYWNrO1xuICB2YXIgbGlzdDtcbiAgdmFyIGlzVXNpbmdLZXk7XG5cbiAgZnVuY3Rpb24gc2V0dXAoKSB7XG4gICAgY29sbGVjdCgpO1xuICAgIGluaXQoKTtcbiAgICB1cGRhdGUoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1vdW50KCkge1xuICAgIG9uKEVWRU5UX1JFRlJFU0gsIGRlc3Ryb3kpO1xuICAgIG9uKEVWRU5UX1JFRlJFU0gsIHNldHVwKTtcbiAgICBvbihFVkVOVF9VUERBVEVELCB1cGRhdGUpO1xuICAgIGJpbmQoZG9jdW1lbnQsIFBPSU5URVJfRE9XTl9FVkVOVFMgKyBcIiBrZXlkb3duXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBpc1VzaW5nS2V5ID0gZS50eXBlID09PSBcImtleWRvd25cIjtcbiAgICB9LCB7XG4gICAgICBjYXB0dXJlOiB0cnVlXG4gICAgfSk7XG4gICAgYmluZChyb290LCBcImZvY3VzaW5cIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdG9nZ2xlQ2xhc3Mocm9vdCwgQ0xBU1NfRk9DVVNfSU4sICEhaXNVc2luZ0tleSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBkZXN0cm95KGNvbXBsZXRlbHkpIHtcbiAgICB2YXIgYXR0cnMgPSBBTExfQVRUUklCVVRFUy5jb25jYXQoXCJzdHlsZVwiKTtcbiAgICBlbXB0eShzbGlkZXMpO1xuICAgIHJlbW92ZUNsYXNzKHJvb3QsIHJvb3RDbGFzc2VzKTtcbiAgICByZW1vdmVDbGFzcyh0cmFjaywgdHJhY2tDbGFzc2VzKTtcbiAgICByZW1vdmVBdHRyaWJ1dGUoW3RyYWNrLCBsaXN0XSwgYXR0cnMpO1xuICAgIHJlbW92ZUF0dHJpYnV0ZShyb290LCBjb21wbGV0ZWx5ID8gYXR0cnMgOiBbXCJzdHlsZVwiLCBBUklBX1JPTEVERVNDUklQVElPTl0pO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIHJlbW92ZUNsYXNzKHJvb3QsIHJvb3RDbGFzc2VzKTtcbiAgICByZW1vdmVDbGFzcyh0cmFjaywgdHJhY2tDbGFzc2VzKTtcbiAgICByb290Q2xhc3NlcyA9IGdldENsYXNzZXMoQ0xBU1NfUk9PVCk7XG4gICAgdHJhY2tDbGFzc2VzID0gZ2V0Q2xhc3NlcyhDTEFTU19UUkFDSyk7XG4gICAgYWRkQ2xhc3Mocm9vdCwgcm9vdENsYXNzZXMpO1xuICAgIGFkZENsYXNzKHRyYWNrLCB0cmFja0NsYXNzZXMpO1xuICAgIHNldEF0dHJpYnV0ZShyb290LCBBUklBX0xBQkVMLCBvcHRpb25zLmxhYmVsKTtcbiAgICBzZXRBdHRyaWJ1dGUocm9vdCwgQVJJQV9MQUJFTExFREJZLCBvcHRpb25zLmxhYmVsbGVkYnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gY29sbGVjdCgpIHtcbiAgICB0cmFjayA9IGZpbmQoXCIuXCIgKyBDTEFTU19UUkFDSyk7XG4gICAgbGlzdCA9IGNoaWxkKHRyYWNrLCBcIi5cIiArIENMQVNTX0xJU1QpO1xuICAgIGFzc2VydCh0cmFjayAmJiBsaXN0LCBcIkEgdHJhY2svbGlzdCBlbGVtZW50IGlzIG1pc3NpbmcuXCIpO1xuICAgIHB1c2goc2xpZGVzLCBjaGlsZHJlbihsaXN0LCBcIi5cIiArIENMQVNTX1NMSURFICsgXCI6bm90KC5cIiArIENMQVNTX0NMT05FICsgXCIpXCIpKTtcbiAgICBmb3JPd24oe1xuICAgICAgYXJyb3dzOiBDTEFTU19BUlJPV1MsXG4gICAgICBwYWdpbmF0aW9uOiBDTEFTU19QQUdJTkFUSU9OLFxuICAgICAgcHJldjogQ0xBU1NfQVJST1dfUFJFVixcbiAgICAgIG5leHQ6IENMQVNTX0FSUk9XX05FWFQsXG4gICAgICBiYXI6IENMQVNTX1BST0dSRVNTX0JBUixcbiAgICAgIHRvZ2dsZTogQ0xBU1NfVE9HR0xFXG4gICAgfSwgZnVuY3Rpb24gKGNsYXNzTmFtZSwga2V5KSB7XG4gICAgICBlbGVtZW50c1trZXldID0gZmluZChcIi5cIiArIGNsYXNzTmFtZSk7XG4gICAgfSk7XG4gICAgYXNzaWduKGVsZW1lbnRzLCB7XG4gICAgICByb290OiByb290LFxuICAgICAgdHJhY2s6IHRyYWNrLFxuICAgICAgbGlzdDogbGlzdCxcbiAgICAgIHNsaWRlczogc2xpZGVzXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIHZhciBpZCA9IHJvb3QuaWQgfHwgdW5pcXVlSWQoUFJPSkVDVF9DT0RFKTtcbiAgICB2YXIgcm9sZSA9IG9wdGlvbnMucm9sZTtcbiAgICByb290LmlkID0gaWQ7XG4gICAgdHJhY2suaWQgPSB0cmFjay5pZCB8fCBpZCArIFwiLXRyYWNrXCI7XG4gICAgbGlzdC5pZCA9IGxpc3QuaWQgfHwgaWQgKyBcIi1saXN0XCI7XG5cbiAgICBpZiAoIWdldEF0dHJpYnV0ZShyb290LCBST0xFKSAmJiByb290LnRhZ05hbWUgIT09IFwiU0VDVElPTlwiICYmIHJvbGUpIHtcbiAgICAgIHNldEF0dHJpYnV0ZShyb290LCBST0xFLCByb2xlKTtcbiAgICB9XG5cbiAgICBzZXRBdHRyaWJ1dGUocm9vdCwgQVJJQV9ST0xFREVTQ1JJUFRJT04sIGkxOG4uY2Fyb3VzZWwpO1xuICAgIHNldEF0dHJpYnV0ZShsaXN0LCBST0xFLCBcInByZXNlbnRhdGlvblwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbmQoc2VsZWN0b3IpIHtcbiAgICB2YXIgZWxtID0gcXVlcnkocm9vdCwgc2VsZWN0b3IpO1xuICAgIHJldHVybiBlbG0gJiYgY2xvc2VzdChlbG0sIFwiLlwiICsgQ0xBU1NfUk9PVCkgPT09IHJvb3QgPyBlbG0gOiB2b2lkIDA7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRDbGFzc2VzKGJhc2UpIHtcbiAgICByZXR1cm4gW2Jhc2UgKyBcIi0tXCIgKyBvcHRpb25zLnR5cGUsIGJhc2UgKyBcIi0tXCIgKyBvcHRpb25zLmRpcmVjdGlvbiwgb3B0aW9ucy5kcmFnICYmIGJhc2UgKyBcIi0tZHJhZ2dhYmxlXCIsIG9wdGlvbnMuaXNOYXZpZ2F0aW9uICYmIGJhc2UgKyBcIi0tbmF2XCIsIGJhc2UgPT09IENMQVNTX1JPT1QgJiYgQ0xBU1NfQUNUSVZFXTtcbiAgfVxuXG4gIHJldHVybiBhc3NpZ24oZWxlbWVudHMsIHtcbiAgICBzZXR1cDogc2V0dXAsXG4gICAgbW91bnQ6IG1vdW50LFxuICAgIGRlc3Ryb3k6IGRlc3Ryb3lcbiAgfSk7XG59XG5cbnZhciBTTElERSA9IFwic2xpZGVcIjtcbnZhciBMT09QID0gXCJsb29wXCI7XG52YXIgRkFERSA9IFwiZmFkZVwiO1xuXG5mdW5jdGlvbiBTbGlkZSQxKFNwbGlkZTIsIGluZGV4LCBzbGlkZUluZGV4LCBzbGlkZSkge1xuICB2YXIgZXZlbnQgPSBFdmVudEludGVyZmFjZShTcGxpZGUyKTtcbiAgdmFyIG9uID0gZXZlbnQub24sXG4gICAgICBlbWl0ID0gZXZlbnQuZW1pdCxcbiAgICAgIGJpbmQgPSBldmVudC5iaW5kO1xuICB2YXIgQ29tcG9uZW50cyA9IFNwbGlkZTIuQ29tcG9uZW50cyxcbiAgICAgIHJvb3QgPSBTcGxpZGUyLnJvb3QsXG4gICAgICBvcHRpb25zID0gU3BsaWRlMi5vcHRpb25zO1xuICB2YXIgaXNOYXZpZ2F0aW9uID0gb3B0aW9ucy5pc05hdmlnYXRpb24sXG4gICAgICB1cGRhdGVPbk1vdmUgPSBvcHRpb25zLnVwZGF0ZU9uTW92ZSxcbiAgICAgIGkxOG4gPSBvcHRpb25zLmkxOG4sXG4gICAgICBwYWdpbmF0aW9uID0gb3B0aW9ucy5wYWdpbmF0aW9uLFxuICAgICAgc2xpZGVGb2N1cyA9IG9wdGlvbnMuc2xpZGVGb2N1cztcbiAgdmFyIHJlc29sdmUgPSBDb21wb25lbnRzLkRpcmVjdGlvbi5yZXNvbHZlO1xuICB2YXIgc3R5bGVzID0gZ2V0QXR0cmlidXRlKHNsaWRlLCBcInN0eWxlXCIpO1xuICB2YXIgbGFiZWwgPSBnZXRBdHRyaWJ1dGUoc2xpZGUsIEFSSUFfTEFCRUwpO1xuICB2YXIgaXNDbG9uZSA9IHNsaWRlSW5kZXggPiAtMTtcbiAgdmFyIGNvbnRhaW5lciA9IGNoaWxkKHNsaWRlLCBcIi5cIiArIENMQVNTX0NPTlRBSU5FUik7XG4gIHZhciBkZXN0cm95ZWQ7XG5cbiAgZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgaWYgKCFpc0Nsb25lKSB7XG4gICAgICBzbGlkZS5pZCA9IHJvb3QuaWQgKyBcIi1zbGlkZVwiICsgcGFkKGluZGV4ICsgMSk7XG4gICAgICBzZXRBdHRyaWJ1dGUoc2xpZGUsIFJPTEUsIHBhZ2luYXRpb24gPyBcInRhYnBhbmVsXCIgOiBcImdyb3VwXCIpO1xuICAgICAgc2V0QXR0cmlidXRlKHNsaWRlLCBBUklBX1JPTEVERVNDUklQVElPTiwgaTE4bi5zbGlkZSk7XG4gICAgICBzZXRBdHRyaWJ1dGUoc2xpZGUsIEFSSUFfTEFCRUwsIGxhYmVsIHx8IGZvcm1hdChpMThuLnNsaWRlTGFiZWwsIFtpbmRleCArIDEsIFNwbGlkZTIubGVuZ3RoXSkpO1xuICAgIH1cblxuICAgIGxpc3RlbigpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKCkge1xuICAgIGJpbmQoc2xpZGUsIFwiY2xpY2tcIiwgYXBwbHkoZW1pdCwgRVZFTlRfQ0xJQ0ssIHNlbGYpKTtcbiAgICBiaW5kKHNsaWRlLCBcImtleWRvd25cIiwgYXBwbHkoZW1pdCwgRVZFTlRfU0xJREVfS0VZRE9XTiwgc2VsZikpO1xuICAgIG9uKFtFVkVOVF9NT1ZFRCwgRVZFTlRfU0hJRlRFRCwgRVZFTlRfU0NST0xMRURdLCB1cGRhdGUpO1xuICAgIG9uKEVWRU5UX05BVklHQVRJT05fTU9VTlRFRCwgaW5pdE5hdmlnYXRpb24pO1xuXG4gICAgaWYgKHVwZGF0ZU9uTW92ZSkge1xuICAgICAgb24oRVZFTlRfTU9WRSwgb25Nb3ZlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIGRlc3Ryb3llZCA9IHRydWU7XG4gICAgZXZlbnQuZGVzdHJveSgpO1xuICAgIHJlbW92ZUNsYXNzKHNsaWRlLCBTVEFUVVNfQ0xBU1NFUyk7XG4gICAgcmVtb3ZlQXR0cmlidXRlKHNsaWRlLCBBTExfQVRUUklCVVRFUyk7XG4gICAgc2V0QXR0cmlidXRlKHNsaWRlLCBcInN0eWxlXCIsIHN0eWxlcyk7XG4gICAgc2V0QXR0cmlidXRlKHNsaWRlLCBBUklBX0xBQkVMLCBsYWJlbCB8fCBcIlwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXROYXZpZ2F0aW9uKCkge1xuICAgIHZhciBjb250cm9scyA9IFNwbGlkZTIuc3BsaWRlcy5tYXAoZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgdmFyIFNsaWRlMiA9IHRhcmdldC5zcGxpZGUuQ29tcG9uZW50cy5TbGlkZXMuZ2V0QXQoaW5kZXgpO1xuICAgICAgcmV0dXJuIFNsaWRlMiA/IFNsaWRlMi5zbGlkZS5pZCA6IFwiXCI7XG4gICAgfSkuam9pbihcIiBcIik7XG4gICAgc2V0QXR0cmlidXRlKHNsaWRlLCBBUklBX0xBQkVMLCBmb3JtYXQoaTE4bi5zbGlkZVgsIChpc0Nsb25lID8gc2xpZGVJbmRleCA6IGluZGV4KSArIDEpKTtcbiAgICBzZXRBdHRyaWJ1dGUoc2xpZGUsIEFSSUFfQ09OVFJPTFMsIGNvbnRyb2xzKTtcbiAgICBzZXRBdHRyaWJ1dGUoc2xpZGUsIFJPTEUsIHNsaWRlRm9jdXMgPyBcImJ1dHRvblwiIDogXCJcIik7XG4gICAgc2xpZGVGb2N1cyAmJiByZW1vdmVBdHRyaWJ1dGUoc2xpZGUsIEFSSUFfUk9MRURFU0NSSVBUSU9OKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uTW92ZSgpIHtcbiAgICBpZiAoIWRlc3Ryb3llZCkge1xuICAgICAgdXBkYXRlKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIGlmICghZGVzdHJveWVkKSB7XG4gICAgICB2YXIgY3VyciA9IFNwbGlkZTIuaW5kZXg7XG4gICAgICB1cGRhdGVBY3Rpdml0eSgpO1xuICAgICAgdXBkYXRlVmlzaWJpbGl0eSgpO1xuICAgICAgdG9nZ2xlQ2xhc3Moc2xpZGUsIENMQVNTX1BSRVYsIGluZGV4ID09PSBjdXJyIC0gMSk7XG4gICAgICB0b2dnbGVDbGFzcyhzbGlkZSwgQ0xBU1NfTkVYVCwgaW5kZXggPT09IGN1cnIgKyAxKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVBY3Rpdml0eSgpIHtcbiAgICB2YXIgYWN0aXZlID0gaXNBY3RpdmUoKTtcblxuICAgIGlmIChhY3RpdmUgIT09IGhhc0NsYXNzKHNsaWRlLCBDTEFTU19BQ1RJVkUpKSB7XG4gICAgICB0b2dnbGVDbGFzcyhzbGlkZSwgQ0xBU1NfQUNUSVZFLCBhY3RpdmUpO1xuICAgICAgc2V0QXR0cmlidXRlKHNsaWRlLCBBUklBX0NVUlJFTlQsIGlzTmF2aWdhdGlvbiAmJiBhY3RpdmUgfHwgXCJcIik7XG4gICAgICBlbWl0KGFjdGl2ZSA/IEVWRU5UX0FDVElWRSA6IEVWRU5UX0lOQUNUSVZFLCBzZWxmKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVWaXNpYmlsaXR5KCkge1xuICAgIHZhciB2aXNpYmxlID0gaXNWaXNpYmxlKCk7XG4gICAgdmFyIGhpZGRlbiA9ICF2aXNpYmxlICYmICghaXNBY3RpdmUoKSB8fCBpc0Nsb25lKTtcblxuICAgIGlmICghU3BsaWRlMi5zdGF0ZS5pcyhbTU9WSU5HLCBTQ1JPTExJTkddKSkge1xuICAgICAgc2V0QXR0cmlidXRlKHNsaWRlLCBBUklBX0hJRERFTiwgaGlkZGVuIHx8IFwiXCIpO1xuICAgIH1cblxuICAgIHNldEF0dHJpYnV0ZShxdWVyeUFsbChzbGlkZSwgb3B0aW9ucy5mb2N1c2FibGVOb2RlcyB8fCBcIlwiKSwgVEFCX0lOREVYLCBoaWRkZW4gPyAtMSA6IFwiXCIpO1xuXG4gICAgaWYgKHNsaWRlRm9jdXMpIHtcbiAgICAgIHNldEF0dHJpYnV0ZShzbGlkZSwgVEFCX0lOREVYLCBoaWRkZW4gPyAtMSA6IDApO1xuICAgIH1cblxuICAgIGlmICh2aXNpYmxlICE9PSBoYXNDbGFzcyhzbGlkZSwgQ0xBU1NfVklTSUJMRSkpIHtcbiAgICAgIHRvZ2dsZUNsYXNzKHNsaWRlLCBDTEFTU19WSVNJQkxFLCB2aXNpYmxlKTtcbiAgICAgIGVtaXQodmlzaWJsZSA/IEVWRU5UX1ZJU0lCTEUgOiBFVkVOVF9ISURERU4sIHNlbGYpO1xuICAgIH1cblxuICAgIGlmICghdmlzaWJsZSAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSBzbGlkZSkge1xuICAgICAgdmFyIFNsaWRlMiA9IENvbXBvbmVudHMuU2xpZGVzLmdldEF0KFNwbGlkZTIuaW5kZXgpO1xuICAgICAgU2xpZGUyICYmIGZvY3VzKFNsaWRlMi5zbGlkZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc3R5bGUkMShwcm9wLCB2YWx1ZSwgdXNlQ29udGFpbmVyKSB7XG4gICAgc3R5bGUodXNlQ29udGFpbmVyICYmIGNvbnRhaW5lciB8fCBzbGlkZSwgcHJvcCwgdmFsdWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNBY3RpdmUoKSB7XG4gICAgdmFyIGN1cnIgPSBTcGxpZGUyLmluZGV4O1xuICAgIHJldHVybiBjdXJyID09PSBpbmRleCB8fCBvcHRpb25zLmNsb25lU3RhdHVzICYmIGN1cnIgPT09IHNsaWRlSW5kZXg7XG4gIH1cblxuICBmdW5jdGlvbiBpc1Zpc2libGUoKSB7XG4gICAgaWYgKFNwbGlkZTIuaXMoRkFERSkpIHtcbiAgICAgIHJldHVybiBpc0FjdGl2ZSgpO1xuICAgIH1cblxuICAgIHZhciB0cmFja1JlY3QgPSByZWN0KENvbXBvbmVudHMuRWxlbWVudHMudHJhY2spO1xuICAgIHZhciBzbGlkZVJlY3QgPSByZWN0KHNsaWRlKTtcbiAgICB2YXIgbGVmdCA9IHJlc29sdmUoXCJsZWZ0XCIsIHRydWUpO1xuICAgIHZhciByaWdodCA9IHJlc29sdmUoXCJyaWdodFwiLCB0cnVlKTtcbiAgICByZXR1cm4gZmxvb3IodHJhY2tSZWN0W2xlZnRdKSA8PSBjZWlsKHNsaWRlUmVjdFtsZWZ0XSkgJiYgZmxvb3Ioc2xpZGVSZWN0W3JpZ2h0XSkgPD0gY2VpbCh0cmFja1JlY3RbcmlnaHRdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzV2l0aGluKGZyb20sIGRpc3RhbmNlKSB7XG4gICAgdmFyIGRpZmYgPSBhYnMoZnJvbSAtIGluZGV4KTtcblxuICAgIGlmICghaXNDbG9uZSAmJiAob3B0aW9ucy5yZXdpbmQgfHwgU3BsaWRlMi5pcyhMT09QKSkpIHtcbiAgICAgIGRpZmYgPSBtaW4oZGlmZiwgU3BsaWRlMi5sZW5ndGggLSBkaWZmKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGlmZiA8PSBkaXN0YW5jZTtcbiAgfVxuXG4gIHZhciBzZWxmID0ge1xuICAgIGluZGV4OiBpbmRleCxcbiAgICBzbGlkZUluZGV4OiBzbGlkZUluZGV4LFxuICAgIHNsaWRlOiBzbGlkZSxcbiAgICBjb250YWluZXI6IGNvbnRhaW5lcixcbiAgICBpc0Nsb25lOiBpc0Nsb25lLFxuICAgIG1vdW50OiBtb3VudCxcbiAgICBkZXN0cm95OiBkZXN0cm95LFxuICAgIHVwZGF0ZTogdXBkYXRlLFxuICAgIHN0eWxlOiBzdHlsZSQxLFxuICAgIGlzV2l0aGluOiBpc1dpdGhpblxuICB9O1xuICByZXR1cm4gc2VsZjtcbn1cblxuZnVuY3Rpb24gU2xpZGVzKFNwbGlkZTIsIENvbXBvbmVudHMyLCBvcHRpb25zKSB7XG4gIHZhciBfRXZlbnRJbnRlcmZhY2UyID0gRXZlbnRJbnRlcmZhY2UoU3BsaWRlMiksXG4gICAgICBvbiA9IF9FdmVudEludGVyZmFjZTIub24sXG4gICAgICBlbWl0ID0gX0V2ZW50SW50ZXJmYWNlMi5lbWl0LFxuICAgICAgYmluZCA9IF9FdmVudEludGVyZmFjZTIuYmluZDtcblxuICB2YXIgX0NvbXBvbmVudHMyJEVsZW1lbnRzID0gQ29tcG9uZW50czIuRWxlbWVudHMsXG4gICAgICBzbGlkZXMgPSBfQ29tcG9uZW50czIkRWxlbWVudHMuc2xpZGVzLFxuICAgICAgbGlzdCA9IF9Db21wb25lbnRzMiRFbGVtZW50cy5saXN0O1xuICB2YXIgU2xpZGVzMiA9IFtdO1xuXG4gIGZ1bmN0aW9uIG1vdW50KCkge1xuICAgIGluaXQoKTtcbiAgICBvbihFVkVOVF9SRUZSRVNILCBkZXN0cm95KTtcbiAgICBvbihFVkVOVF9SRUZSRVNILCBpbml0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgc2xpZGVzLmZvckVhY2goZnVuY3Rpb24gKHNsaWRlLCBpbmRleCkge1xuICAgICAgcmVnaXN0ZXIoc2xpZGUsIGluZGV4LCAtMSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIGZvckVhY2gkMShmdW5jdGlvbiAoU2xpZGUyKSB7XG4gICAgICBTbGlkZTIuZGVzdHJveSgpO1xuICAgIH0pO1xuICAgIGVtcHR5KFNsaWRlczIpO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIGZvckVhY2gkMShmdW5jdGlvbiAoU2xpZGUyKSB7XG4gICAgICBTbGlkZTIudXBkYXRlKCk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZWdpc3RlcihzbGlkZSwgaW5kZXgsIHNsaWRlSW5kZXgpIHtcbiAgICB2YXIgb2JqZWN0ID0gU2xpZGUkMShTcGxpZGUyLCBpbmRleCwgc2xpZGVJbmRleCwgc2xpZGUpO1xuICAgIG9iamVjdC5tb3VudCgpO1xuICAgIFNsaWRlczIucHVzaChvYmplY3QpO1xuICAgIFNsaWRlczIuc29ydChmdW5jdGlvbiAoU2xpZGUxLCBTbGlkZTIpIHtcbiAgICAgIHJldHVybiBTbGlkZTEuaW5kZXggLSBTbGlkZTIuaW5kZXg7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXQoZXhjbHVkZUNsb25lcykge1xuICAgIHJldHVybiBleGNsdWRlQ2xvbmVzID8gZmlsdGVyKGZ1bmN0aW9uIChTbGlkZTIpIHtcbiAgICAgIHJldHVybiAhU2xpZGUyLmlzQ2xvbmU7XG4gICAgfSkgOiBTbGlkZXMyO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0SW4ocGFnZSkge1xuICAgIHZhciBDb250cm9sbGVyID0gQ29tcG9uZW50czIuQ29udHJvbGxlcjtcbiAgICB2YXIgaW5kZXggPSBDb250cm9sbGVyLnRvSW5kZXgocGFnZSk7XG4gICAgdmFyIG1heCA9IENvbnRyb2xsZXIuaGFzRm9jdXMoKSA/IDEgOiBvcHRpb25zLnBlclBhZ2U7XG4gICAgcmV0dXJuIGZpbHRlcihmdW5jdGlvbiAoU2xpZGUyKSB7XG4gICAgICByZXR1cm4gYmV0d2VlbihTbGlkZTIuaW5kZXgsIGluZGV4LCBpbmRleCArIG1heCAtIDEpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0QXQoaW5kZXgpIHtcbiAgICByZXR1cm4gZmlsdGVyKGluZGV4KVswXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZChpdGVtcywgaW5kZXgpIHtcbiAgICBmb3JFYWNoKGl0ZW1zLCBmdW5jdGlvbiAoc2xpZGUpIHtcbiAgICAgIGlmIChpc1N0cmluZyhzbGlkZSkpIHtcbiAgICAgICAgc2xpZGUgPSBwYXJzZUh0bWwoc2xpZGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNIVE1MRWxlbWVudChzbGlkZSkpIHtcbiAgICAgICAgdmFyIHJlZiA9IHNsaWRlc1tpbmRleF07XG4gICAgICAgIHJlZiA/IGJlZm9yZShzbGlkZSwgcmVmKSA6IGFwcGVuZChsaXN0LCBzbGlkZSk7XG4gICAgICAgIGFkZENsYXNzKHNsaWRlLCBvcHRpb25zLmNsYXNzZXMuc2xpZGUpO1xuICAgICAgICBvYnNlcnZlSW1hZ2VzKHNsaWRlLCBhcHBseShlbWl0LCBFVkVOVF9SRVNJWkUpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBlbWl0KEVWRU5UX1JFRlJFU0gpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlJDEobWF0Y2hlcikge1xuICAgIHJlbW92ZShmaWx0ZXIobWF0Y2hlcikubWFwKGZ1bmN0aW9uIChTbGlkZTIpIHtcbiAgICAgIHJldHVybiBTbGlkZTIuc2xpZGU7XG4gICAgfSkpO1xuICAgIGVtaXQoRVZFTlRfUkVGUkVTSCk7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JFYWNoJDEoaXRlcmF0ZWUsIGV4Y2x1ZGVDbG9uZXMpIHtcbiAgICBnZXQoZXhjbHVkZUNsb25lcykuZm9yRWFjaChpdGVyYXRlZSk7XG4gIH1cblxuICBmdW5jdGlvbiBmaWx0ZXIobWF0Y2hlcikge1xuICAgIHJldHVybiBTbGlkZXMyLmZpbHRlcihpc0Z1bmN0aW9uKG1hdGNoZXIpID8gbWF0Y2hlciA6IGZ1bmN0aW9uIChTbGlkZTIpIHtcbiAgICAgIHJldHVybiBpc1N0cmluZyhtYXRjaGVyKSA/IG1hdGNoZXMoU2xpZGUyLnNsaWRlLCBtYXRjaGVyKSA6IGluY2x1ZGVzKHRvQXJyYXkobWF0Y2hlciksIFNsaWRlMi5pbmRleCk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBzdHlsZShwcm9wLCB2YWx1ZSwgdXNlQ29udGFpbmVyKSB7XG4gICAgZm9yRWFjaCQxKGZ1bmN0aW9uIChTbGlkZTIpIHtcbiAgICAgIFNsaWRlMi5zdHlsZShwcm9wLCB2YWx1ZSwgdXNlQ29udGFpbmVyKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9ic2VydmVJbWFnZXMoZWxtLCBjYWxsYmFjaykge1xuICAgIHZhciBpbWFnZXMgPSBxdWVyeUFsbChlbG0sIFwiaW1nXCIpO1xuICAgIHZhciBsZW5ndGggPSBpbWFnZXMubGVuZ3RoO1xuXG4gICAgaWYgKGxlbmd0aCkge1xuICAgICAgaW1hZ2VzLmZvckVhY2goZnVuY3Rpb24gKGltZykge1xuICAgICAgICBiaW5kKGltZywgXCJsb2FkIGVycm9yXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoISAtLWxlbmd0aCkge1xuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0TGVuZ3RoKGV4Y2x1ZGVDbG9uZXMpIHtcbiAgICByZXR1cm4gZXhjbHVkZUNsb25lcyA/IHNsaWRlcy5sZW5ndGggOiBTbGlkZXMyLmxlbmd0aDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzRW5vdWdoKCkge1xuICAgIHJldHVybiBTbGlkZXMyLmxlbmd0aCA+IG9wdGlvbnMucGVyUGFnZTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbW91bnQ6IG1vdW50LFxuICAgIGRlc3Ryb3k6IGRlc3Ryb3ksXG4gICAgdXBkYXRlOiB1cGRhdGUsXG4gICAgcmVnaXN0ZXI6IHJlZ2lzdGVyLFxuICAgIGdldDogZ2V0LFxuICAgIGdldEluOiBnZXRJbixcbiAgICBnZXRBdDogZ2V0QXQsXG4gICAgYWRkOiBhZGQsXG4gICAgcmVtb3ZlOiByZW1vdmUkMSxcbiAgICBmb3JFYWNoOiBmb3JFYWNoJDEsXG4gICAgZmlsdGVyOiBmaWx0ZXIsXG4gICAgc3R5bGU6IHN0eWxlLFxuICAgIGdldExlbmd0aDogZ2V0TGVuZ3RoLFxuICAgIGlzRW5vdWdoOiBpc0Vub3VnaFxuICB9O1xufVxuXG5mdW5jdGlvbiBMYXlvdXQoU3BsaWRlMiwgQ29tcG9uZW50czIsIG9wdGlvbnMpIHtcbiAgdmFyIF9FdmVudEludGVyZmFjZTMgPSBFdmVudEludGVyZmFjZShTcGxpZGUyKSxcbiAgICAgIG9uID0gX0V2ZW50SW50ZXJmYWNlMy5vbixcbiAgICAgIGJpbmQgPSBfRXZlbnRJbnRlcmZhY2UzLmJpbmQsXG4gICAgICBlbWl0ID0gX0V2ZW50SW50ZXJmYWNlMy5lbWl0O1xuXG4gIHZhciBTbGlkZXMgPSBDb21wb25lbnRzMi5TbGlkZXM7XG4gIHZhciByZXNvbHZlID0gQ29tcG9uZW50czIuRGlyZWN0aW9uLnJlc29sdmU7XG4gIHZhciBfQ29tcG9uZW50czIkRWxlbWVudHMyID0gQ29tcG9uZW50czIuRWxlbWVudHMsXG4gICAgICByb290ID0gX0NvbXBvbmVudHMyJEVsZW1lbnRzMi5yb290LFxuICAgICAgdHJhY2sgPSBfQ29tcG9uZW50czIkRWxlbWVudHMyLnRyYWNrLFxuICAgICAgbGlzdCA9IF9Db21wb25lbnRzMiRFbGVtZW50czIubGlzdDtcbiAgdmFyIGdldEF0ID0gU2xpZGVzLmdldEF0LFxuICAgICAgc3R5bGVTbGlkZXMgPSBTbGlkZXMuc3R5bGU7XG4gIHZhciB2ZXJ0aWNhbDtcbiAgdmFyIHJvb3RSZWN0O1xuICB2YXIgb3ZlcmZsb3c7XG5cbiAgZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgaW5pdCgpO1xuICAgIGJpbmQod2luZG93LCBcInJlc2l6ZSBsb2FkXCIsIFRocm90dGxlKGFwcGx5KGVtaXQsIEVWRU5UX1JFU0laRSkpKTtcbiAgICBvbihbRVZFTlRfVVBEQVRFRCwgRVZFTlRfUkVGUkVTSF0sIGluaXQpO1xuICAgIG9uKEVWRU5UX1JFU0laRSwgcmVzaXplKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgdmVydGljYWwgPSBvcHRpb25zLmRpcmVjdGlvbiA9PT0gVFRCO1xuICAgIHN0eWxlKHJvb3QsIFwibWF4V2lkdGhcIiwgdW5pdChvcHRpb25zLndpZHRoKSk7XG4gICAgc3R5bGUodHJhY2ssIHJlc29sdmUoXCJwYWRkaW5nTGVmdFwiKSwgY3NzUGFkZGluZyhmYWxzZSkpO1xuICAgIHN0eWxlKHRyYWNrLCByZXNvbHZlKFwicGFkZGluZ1JpZ2h0XCIpLCBjc3NQYWRkaW5nKHRydWUpKTtcbiAgICByZXNpemUodHJ1ZSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNpemUoZm9yY2UpIHtcbiAgICB2YXIgbmV3UmVjdCA9IHJlY3Qocm9vdCk7XG5cbiAgICBpZiAoZm9yY2UgfHwgcm9vdFJlY3Qud2lkdGggIT09IG5ld1JlY3Qud2lkdGggfHwgcm9vdFJlY3QuaGVpZ2h0ICE9PSBuZXdSZWN0LmhlaWdodCkge1xuICAgICAgc3R5bGUodHJhY2ssIFwiaGVpZ2h0XCIsIGNzc1RyYWNrSGVpZ2h0KCkpO1xuICAgICAgc3R5bGVTbGlkZXMocmVzb2x2ZShcIm1hcmdpblJpZ2h0XCIpLCB1bml0KG9wdGlvbnMuZ2FwKSk7XG4gICAgICBzdHlsZVNsaWRlcyhcIndpZHRoXCIsIGNzc1NsaWRlV2lkdGgoKSk7XG4gICAgICBzdHlsZVNsaWRlcyhcImhlaWdodFwiLCBjc3NTbGlkZUhlaWdodCgpLCB0cnVlKTtcbiAgICAgIHJvb3RSZWN0ID0gbmV3UmVjdDtcbiAgICAgIGVtaXQoRVZFTlRfUkVTSVpFRCk7XG5cbiAgICAgIGlmIChvdmVyZmxvdyAhPT0gKG92ZXJmbG93ID0gaXNPdmVyZmxvdygpKSkge1xuICAgICAgICB0b2dnbGVDbGFzcyhyb290LCBDTEFTU19PVkVSRkxPVywgb3ZlcmZsb3cpO1xuICAgICAgICBlbWl0KEVWRU5UX09WRVJGTE9XLCBvdmVyZmxvdyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY3NzUGFkZGluZyhyaWdodCkge1xuICAgIHZhciBwYWRkaW5nID0gb3B0aW9ucy5wYWRkaW5nO1xuICAgIHZhciBwcm9wID0gcmVzb2x2ZShyaWdodCA/IFwicmlnaHRcIiA6IFwibGVmdFwiKTtcbiAgICByZXR1cm4gcGFkZGluZyAmJiB1bml0KHBhZGRpbmdbcHJvcF0gfHwgKGlzT2JqZWN0KHBhZGRpbmcpID8gMCA6IHBhZGRpbmcpKSB8fCBcIjBweFwiO1xuICB9XG5cbiAgZnVuY3Rpb24gY3NzVHJhY2tIZWlnaHQoKSB7XG4gICAgdmFyIGhlaWdodCA9IFwiXCI7XG5cbiAgICBpZiAodmVydGljYWwpIHtcbiAgICAgIGhlaWdodCA9IGNzc0hlaWdodCgpO1xuICAgICAgYXNzZXJ0KGhlaWdodCwgXCJoZWlnaHQgb3IgaGVpZ2h0UmF0aW8gaXMgbWlzc2luZy5cIik7XG4gICAgICBoZWlnaHQgPSBcImNhbGMoXCIgKyBoZWlnaHQgKyBcIiAtIFwiICsgY3NzUGFkZGluZyhmYWxzZSkgKyBcIiAtIFwiICsgY3NzUGFkZGluZyh0cnVlKSArIFwiKVwiO1xuICAgIH1cblxuICAgIHJldHVybiBoZWlnaHQ7XG4gIH1cblxuICBmdW5jdGlvbiBjc3NIZWlnaHQoKSB7XG4gICAgcmV0dXJuIHVuaXQob3B0aW9ucy5oZWlnaHQgfHwgcmVjdChsaXN0KS53aWR0aCAqIG9wdGlvbnMuaGVpZ2h0UmF0aW8pO1xuICB9XG5cbiAgZnVuY3Rpb24gY3NzU2xpZGVXaWR0aCgpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5hdXRvV2lkdGggPyBudWxsIDogdW5pdChvcHRpb25zLmZpeGVkV2lkdGgpIHx8ICh2ZXJ0aWNhbCA/IFwiXCIgOiBjc3NTbGlkZVNpemUoKSk7XG4gIH1cblxuICBmdW5jdGlvbiBjc3NTbGlkZUhlaWdodCgpIHtcbiAgICByZXR1cm4gdW5pdChvcHRpb25zLmZpeGVkSGVpZ2h0KSB8fCAodmVydGljYWwgPyBvcHRpb25zLmF1dG9IZWlnaHQgPyBudWxsIDogY3NzU2xpZGVTaXplKCkgOiBjc3NIZWlnaHQoKSk7XG4gIH1cblxuICBmdW5jdGlvbiBjc3NTbGlkZVNpemUoKSB7XG4gICAgdmFyIGdhcCA9IHVuaXQob3B0aW9ucy5nYXApO1xuICAgIHJldHVybiBcImNhbGMoKDEwMCVcIiArIChnYXAgJiYgXCIgKyBcIiArIGdhcCkgKyBcIikvXCIgKyAob3B0aW9ucy5wZXJQYWdlIHx8IDEpICsgKGdhcCAmJiBcIiAtIFwiICsgZ2FwKSArIFwiKVwiO1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdFNpemUoKSB7XG4gICAgcmV0dXJuIHJlY3QobGlzdClbcmVzb2x2ZShcIndpZHRoXCIpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNsaWRlU2l6ZShpbmRleCwgd2l0aG91dEdhcCkge1xuICAgIHZhciBTbGlkZSA9IGdldEF0KGluZGV4IHx8IDApO1xuICAgIHJldHVybiBTbGlkZSA/IHJlY3QoU2xpZGUuc2xpZGUpW3Jlc29sdmUoXCJ3aWR0aFwiKV0gKyAod2l0aG91dEdhcCA/IDAgOiBnZXRHYXAoKSkgOiAwO1xuICB9XG5cbiAgZnVuY3Rpb24gdG90YWxTaXplKGluZGV4LCB3aXRob3V0R2FwKSB7XG4gICAgdmFyIFNsaWRlID0gZ2V0QXQoaW5kZXgpO1xuXG4gICAgaWYgKFNsaWRlKSB7XG4gICAgICB2YXIgcmlnaHQgPSByZWN0KFNsaWRlLnNsaWRlKVtyZXNvbHZlKFwicmlnaHRcIildO1xuICAgICAgdmFyIGxlZnQgPSByZWN0KGxpc3QpW3Jlc29sdmUoXCJsZWZ0XCIpXTtcbiAgICAgIHJldHVybiBhYnMocmlnaHQgLSBsZWZ0KSArICh3aXRob3V0R2FwID8gMCA6IGdldEdhcCgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNsaWRlclNpemUod2l0aG91dEdhcCkge1xuICAgIHJldHVybiB0b3RhbFNpemUoU3BsaWRlMi5sZW5ndGggLSAxKSAtIHRvdGFsU2l6ZSgwKSArIHNsaWRlU2l6ZSgwLCB3aXRob3V0R2FwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEdhcCgpIHtcbiAgICB2YXIgU2xpZGUgPSBnZXRBdCgwKTtcbiAgICByZXR1cm4gU2xpZGUgJiYgcGFyc2VGbG9hdChzdHlsZShTbGlkZS5zbGlkZSwgcmVzb2x2ZShcIm1hcmdpblJpZ2h0XCIpKSkgfHwgMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFBhZGRpbmcocmlnaHQpIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdChzdHlsZSh0cmFjaywgcmVzb2x2ZShcInBhZGRpbmdcIiArIChyaWdodCA/IFwiUmlnaHRcIiA6IFwiTGVmdFwiKSkpKSB8fCAwO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNPdmVyZmxvdygpIHtcbiAgICByZXR1cm4gU3BsaWRlMi5pcyhGQURFKSB8fCBzbGlkZXJTaXplKHRydWUpID4gbGlzdFNpemUoKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbW91bnQ6IG1vdW50LFxuICAgIHJlc2l6ZTogcmVzaXplLFxuICAgIGxpc3RTaXplOiBsaXN0U2l6ZSxcbiAgICBzbGlkZVNpemU6IHNsaWRlU2l6ZSxcbiAgICBzbGlkZXJTaXplOiBzbGlkZXJTaXplLFxuICAgIHRvdGFsU2l6ZTogdG90YWxTaXplLFxuICAgIGdldFBhZGRpbmc6IGdldFBhZGRpbmcsXG4gICAgaXNPdmVyZmxvdzogaXNPdmVyZmxvd1xuICB9O1xufVxuXG52YXIgTVVMVElQTElFUiA9IDI7XG5cbmZ1bmN0aW9uIENsb25lcyhTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICB2YXIgZXZlbnQgPSBFdmVudEludGVyZmFjZShTcGxpZGUyKTtcbiAgdmFyIG9uID0gZXZlbnQub247XG4gIHZhciBFbGVtZW50cyA9IENvbXBvbmVudHMyLkVsZW1lbnRzLFxuICAgICAgU2xpZGVzID0gQ29tcG9uZW50czIuU2xpZGVzO1xuICB2YXIgcmVzb2x2ZSA9IENvbXBvbmVudHMyLkRpcmVjdGlvbi5yZXNvbHZlO1xuICB2YXIgY2xvbmVzID0gW107XG4gIHZhciBjbG9uZUNvdW50O1xuXG4gIGZ1bmN0aW9uIG1vdW50KCkge1xuICAgIG9uKEVWRU5UX1JFRlJFU0gsIHJlbW91bnQpO1xuICAgIG9uKFtFVkVOVF9VUERBVEVELCBFVkVOVF9SRVNJWkVdLCBvYnNlcnZlKTtcblxuICAgIGlmIChjbG9uZUNvdW50ID0gY29tcHV0ZUNsb25lQ291bnQoKSkge1xuICAgICAgZ2VuZXJhdGUoY2xvbmVDb3VudCk7XG4gICAgICBDb21wb25lbnRzMi5MYXlvdXQucmVzaXplKHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW91bnQoKSB7XG4gICAgZGVzdHJveSgpO1xuICAgIG1vdW50KCk7XG4gIH1cblxuICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIHJlbW92ZShjbG9uZXMpO1xuICAgIGVtcHR5KGNsb25lcyk7XG4gICAgZXZlbnQuZGVzdHJveSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gb2JzZXJ2ZSgpIHtcbiAgICB2YXIgY291bnQgPSBjb21wdXRlQ2xvbmVDb3VudCgpO1xuXG4gICAgaWYgKGNsb25lQ291bnQgIT09IGNvdW50KSB7XG4gICAgICBpZiAoY2xvbmVDb3VudCA8IGNvdW50IHx8ICFjb3VudCkge1xuICAgICAgICBldmVudC5lbWl0KEVWRU5UX1JFRlJFU0gpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdlbmVyYXRlKGNvdW50KSB7XG4gICAgdmFyIHNsaWRlcyA9IFNsaWRlcy5nZXQoKS5zbGljZSgpO1xuICAgIHZhciBsZW5ndGggPSBzbGlkZXMubGVuZ3RoO1xuXG4gICAgaWYgKGxlbmd0aCkge1xuICAgICAgd2hpbGUgKHNsaWRlcy5sZW5ndGggPCBjb3VudCkge1xuICAgICAgICBwdXNoKHNsaWRlcywgc2xpZGVzKTtcbiAgICAgIH1cblxuICAgICAgcHVzaChzbGlkZXMuc2xpY2UoLWNvdW50KSwgc2xpZGVzLnNsaWNlKDAsIGNvdW50KSkuZm9yRWFjaChmdW5jdGlvbiAoU2xpZGUsIGluZGV4KSB7XG4gICAgICAgIHZhciBpc0hlYWQgPSBpbmRleCA8IGNvdW50O1xuICAgICAgICB2YXIgY2xvbmUgPSBjbG9uZURlZXAoU2xpZGUuc2xpZGUsIGluZGV4KTtcbiAgICAgICAgaXNIZWFkID8gYmVmb3JlKGNsb25lLCBzbGlkZXNbMF0uc2xpZGUpIDogYXBwZW5kKEVsZW1lbnRzLmxpc3QsIGNsb25lKTtcbiAgICAgICAgcHVzaChjbG9uZXMsIGNsb25lKTtcbiAgICAgICAgU2xpZGVzLnJlZ2lzdGVyKGNsb25lLCBpbmRleCAtIGNvdW50ICsgKGlzSGVhZCA/IDAgOiBsZW5ndGgpLCBTbGlkZS5pbmRleCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjbG9uZURlZXAoZWxtLCBpbmRleCkge1xuICAgIHZhciBjbG9uZSA9IGVsbS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgYWRkQ2xhc3MoY2xvbmUsIG9wdGlvbnMuY2xhc3Nlcy5jbG9uZSk7XG4gICAgY2xvbmUuaWQgPSBTcGxpZGUyLnJvb3QuaWQgKyBcIi1jbG9uZVwiICsgcGFkKGluZGV4ICsgMSk7XG4gICAgcmV0dXJuIGNsb25lO1xuICB9XG5cbiAgZnVuY3Rpb24gY29tcHV0ZUNsb25lQ291bnQoKSB7XG4gICAgdmFyIGNsb25lczIgPSBvcHRpb25zLmNsb25lcztcblxuICAgIGlmICghU3BsaWRlMi5pcyhMT09QKSkge1xuICAgICAgY2xvbmVzMiA9IDA7XG4gICAgfSBlbHNlIGlmIChpc1VuZGVmaW5lZChjbG9uZXMyKSkge1xuICAgICAgdmFyIGZpeGVkU2l6ZSA9IG9wdGlvbnNbcmVzb2x2ZShcImZpeGVkV2lkdGhcIildICYmIENvbXBvbmVudHMyLkxheW91dC5zbGlkZVNpemUoMCk7XG4gICAgICB2YXIgZml4ZWRDb3VudCA9IGZpeGVkU2l6ZSAmJiBjZWlsKHJlY3QoRWxlbWVudHMudHJhY2spW3Jlc29sdmUoXCJ3aWR0aFwiKV0gLyBmaXhlZFNpemUpO1xuICAgICAgY2xvbmVzMiA9IGZpeGVkQ291bnQgfHwgb3B0aW9uc1tyZXNvbHZlKFwiYXV0b1dpZHRoXCIpXSAmJiBTcGxpZGUyLmxlbmd0aCB8fCBvcHRpb25zLnBlclBhZ2UgKiBNVUxUSVBMSUVSO1xuICAgIH1cblxuICAgIHJldHVybiBjbG9uZXMyO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBtb3VudDogbW91bnQsXG4gICAgZGVzdHJveTogZGVzdHJveVxuICB9O1xufVxuXG5mdW5jdGlvbiBNb3ZlKFNwbGlkZTIsIENvbXBvbmVudHMyLCBvcHRpb25zKSB7XG4gIHZhciBfRXZlbnRJbnRlcmZhY2U0ID0gRXZlbnRJbnRlcmZhY2UoU3BsaWRlMiksXG4gICAgICBvbiA9IF9FdmVudEludGVyZmFjZTQub24sXG4gICAgICBlbWl0ID0gX0V2ZW50SW50ZXJmYWNlNC5lbWl0O1xuXG4gIHZhciBzZXQgPSBTcGxpZGUyLnN0YXRlLnNldDtcbiAgdmFyIF9Db21wb25lbnRzMiRMYXlvdXQgPSBDb21wb25lbnRzMi5MYXlvdXQsXG4gICAgICBzbGlkZVNpemUgPSBfQ29tcG9uZW50czIkTGF5b3V0LnNsaWRlU2l6ZSxcbiAgICAgIGdldFBhZGRpbmcgPSBfQ29tcG9uZW50czIkTGF5b3V0LmdldFBhZGRpbmcsXG4gICAgICB0b3RhbFNpemUgPSBfQ29tcG9uZW50czIkTGF5b3V0LnRvdGFsU2l6ZSxcbiAgICAgIGxpc3RTaXplID0gX0NvbXBvbmVudHMyJExheW91dC5saXN0U2l6ZSxcbiAgICAgIHNsaWRlclNpemUgPSBfQ29tcG9uZW50czIkTGF5b3V0LnNsaWRlclNpemU7XG4gIHZhciBfQ29tcG9uZW50czIkRGlyZWN0aW8gPSBDb21wb25lbnRzMi5EaXJlY3Rpb24sXG4gICAgICByZXNvbHZlID0gX0NvbXBvbmVudHMyJERpcmVjdGlvLnJlc29sdmUsXG4gICAgICBvcmllbnQgPSBfQ29tcG9uZW50czIkRGlyZWN0aW8ub3JpZW50O1xuICB2YXIgX0NvbXBvbmVudHMyJEVsZW1lbnRzMyA9IENvbXBvbmVudHMyLkVsZW1lbnRzLFxuICAgICAgbGlzdCA9IF9Db21wb25lbnRzMiRFbGVtZW50czMubGlzdCxcbiAgICAgIHRyYWNrID0gX0NvbXBvbmVudHMyJEVsZW1lbnRzMy50cmFjaztcbiAgdmFyIFRyYW5zaXRpb247XG5cbiAgZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgVHJhbnNpdGlvbiA9IENvbXBvbmVudHMyLlRyYW5zaXRpb247XG4gICAgb24oW0VWRU5UX01PVU5URUQsIEVWRU5UX1JFU0laRUQsIEVWRU5UX1VQREFURUQsIEVWRU5UX1JFRlJFU0hdLCByZXBvc2l0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcG9zaXRpb24oKSB7XG4gICAgaWYgKCFDb21wb25lbnRzMi5Db250cm9sbGVyLmlzQnVzeSgpKSB7XG4gICAgICBDb21wb25lbnRzMi5TY3JvbGwuY2FuY2VsKCk7XG4gICAgICBqdW1wKFNwbGlkZTIuaW5kZXgpO1xuICAgICAgQ29tcG9uZW50czIuU2xpZGVzLnVwZGF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG1vdmUoZGVzdCwgaW5kZXgsIHByZXYsIGNhbGxiYWNrKSB7XG4gICAgaWYgKGRlc3QgIT09IGluZGV4ICYmIGNhblNoaWZ0KGRlc3QgPiBwcmV2KSkge1xuICAgICAgY2FuY2VsKCk7XG4gICAgICB0cmFuc2xhdGUoc2hpZnQoZ2V0UG9zaXRpb24oKSwgZGVzdCA+IHByZXYpLCB0cnVlKTtcbiAgICB9XG5cbiAgICBzZXQoTU9WSU5HKTtcbiAgICBlbWl0KEVWRU5UX01PVkUsIGluZGV4LCBwcmV2LCBkZXN0KTtcbiAgICBUcmFuc2l0aW9uLnN0YXJ0KGluZGV4LCBmdW5jdGlvbiAoKSB7XG4gICAgICBzZXQoSURMRSk7XG4gICAgICBlbWl0KEVWRU5UX01PVkVELCBpbmRleCwgcHJldiwgZGVzdCk7XG4gICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24ganVtcChpbmRleCkge1xuICAgIHRyYW5zbGF0ZSh0b1Bvc2l0aW9uKGluZGV4LCB0cnVlKSk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2xhdGUocG9zaXRpb24sIHByZXZlbnRMb29wKSB7XG4gICAgaWYgKCFTcGxpZGUyLmlzKEZBREUpKSB7XG4gICAgICB2YXIgZGVzdGluYXRpb24gPSBwcmV2ZW50TG9vcCA/IHBvc2l0aW9uIDogbG9vcChwb3NpdGlvbik7XG4gICAgICBzdHlsZShsaXN0LCBcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZVwiICsgcmVzb2x2ZShcIlhcIikgKyBcIihcIiArIGRlc3RpbmF0aW9uICsgXCJweClcIik7XG4gICAgICBwb3NpdGlvbiAhPT0gZGVzdGluYXRpb24gJiYgZW1pdChFVkVOVF9TSElGVEVEKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBsb29wKHBvc2l0aW9uKSB7XG4gICAgaWYgKFNwbGlkZTIuaXMoTE9PUCkpIHtcbiAgICAgIHZhciBpbmRleCA9IHRvSW5kZXgocG9zaXRpb24pO1xuICAgICAgdmFyIGV4Y2VlZGVkTWF4ID0gaW5kZXggPiBDb21wb25lbnRzMi5Db250cm9sbGVyLmdldEVuZCgpO1xuICAgICAgdmFyIGV4Y2VlZGVkTWluID0gaW5kZXggPCAwO1xuXG4gICAgICBpZiAoZXhjZWVkZWRNaW4gfHwgZXhjZWVkZWRNYXgpIHtcbiAgICAgICAgcG9zaXRpb24gPSBzaGlmdChwb3NpdGlvbiwgZXhjZWVkZWRNYXgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBwb3NpdGlvbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNoaWZ0KHBvc2l0aW9uLCBiYWNrd2FyZHMpIHtcbiAgICB2YXIgZXhjZXNzID0gcG9zaXRpb24gLSBnZXRMaW1pdChiYWNrd2FyZHMpO1xuICAgIHZhciBzaXplID0gc2xpZGVyU2l6ZSgpO1xuICAgIHBvc2l0aW9uIC09IG9yaWVudChzaXplICogKGNlaWwoYWJzKGV4Y2VzcykgLyBzaXplKSB8fCAxKSkgKiAoYmFja3dhcmRzID8gMSA6IC0xKTtcbiAgICByZXR1cm4gcG9zaXRpb247XG4gIH1cblxuICBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgdHJhbnNsYXRlKGdldFBvc2l0aW9uKCksIHRydWUpO1xuICAgIFRyYW5zaXRpb24uY2FuY2VsKCk7XG4gIH1cblxuICBmdW5jdGlvbiB0b0luZGV4KHBvc2l0aW9uKSB7XG4gICAgdmFyIFNsaWRlcyA9IENvbXBvbmVudHMyLlNsaWRlcy5nZXQoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBtaW5EaXN0YW5jZSA9IEluZmluaXR5O1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBTbGlkZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzbGlkZUluZGV4ID0gU2xpZGVzW2ldLmluZGV4O1xuICAgICAgdmFyIGRpc3RhbmNlID0gYWJzKHRvUG9zaXRpb24oc2xpZGVJbmRleCwgdHJ1ZSkgLSBwb3NpdGlvbik7XG5cbiAgICAgIGlmIChkaXN0YW5jZSA8PSBtaW5EaXN0YW5jZSkge1xuICAgICAgICBtaW5EaXN0YW5jZSA9IGRpc3RhbmNlO1xuICAgICAgICBpbmRleCA9IHNsaWRlSW5kZXg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICBmdW5jdGlvbiB0b1Bvc2l0aW9uKGluZGV4LCB0cmltbWluZykge1xuICAgIHZhciBwb3NpdGlvbiA9IG9yaWVudCh0b3RhbFNpemUoaW5kZXggLSAxKSAtIG9mZnNldChpbmRleCkpO1xuICAgIHJldHVybiB0cmltbWluZyA/IHRyaW0ocG9zaXRpb24pIDogcG9zaXRpb247XG4gIH1cblxuICBmdW5jdGlvbiBnZXRQb3NpdGlvbigpIHtcbiAgICB2YXIgbGVmdCA9IHJlc29sdmUoXCJsZWZ0XCIpO1xuICAgIHJldHVybiByZWN0KGxpc3QpW2xlZnRdIC0gcmVjdCh0cmFjaylbbGVmdF0gKyBvcmllbnQoZ2V0UGFkZGluZyhmYWxzZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJpbShwb3NpdGlvbikge1xuICAgIGlmIChvcHRpb25zLnRyaW1TcGFjZSAmJiBTcGxpZGUyLmlzKFNMSURFKSkge1xuICAgICAgcG9zaXRpb24gPSBjbGFtcChwb3NpdGlvbiwgMCwgb3JpZW50KHNsaWRlclNpemUodHJ1ZSkgLSBsaXN0U2l6ZSgpKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBvc2l0aW9uO1xuICB9XG5cbiAgZnVuY3Rpb24gb2Zmc2V0KGluZGV4KSB7XG4gICAgdmFyIGZvY3VzID0gb3B0aW9ucy5mb2N1cztcbiAgICByZXR1cm4gZm9jdXMgPT09IFwiY2VudGVyXCIgPyAobGlzdFNpemUoKSAtIHNsaWRlU2l6ZShpbmRleCwgdHJ1ZSkpIC8gMiA6ICtmb2N1cyAqIHNsaWRlU2l6ZShpbmRleCkgfHwgMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldExpbWl0KG1heCkge1xuICAgIHJldHVybiB0b1Bvc2l0aW9uKG1heCA/IENvbXBvbmVudHMyLkNvbnRyb2xsZXIuZ2V0RW5kKCkgOiAwLCAhIW9wdGlvbnMudHJpbVNwYWNlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhblNoaWZ0KGJhY2t3YXJkcykge1xuICAgIHZhciBzaGlmdGVkID0gb3JpZW50KHNoaWZ0KGdldFBvc2l0aW9uKCksIGJhY2t3YXJkcykpO1xuICAgIHJldHVybiBiYWNrd2FyZHMgPyBzaGlmdGVkID49IDAgOiBzaGlmdGVkIDw9IGxpc3RbcmVzb2x2ZShcInNjcm9sbFdpZHRoXCIpXSAtIHJlY3QodHJhY2spW3Jlc29sdmUoXCJ3aWR0aFwiKV07XG4gIH1cblxuICBmdW5jdGlvbiBleGNlZWRlZExpbWl0KG1heCwgcG9zaXRpb24pIHtcbiAgICBwb3NpdGlvbiA9IGlzVW5kZWZpbmVkKHBvc2l0aW9uKSA/IGdldFBvc2l0aW9uKCkgOiBwb3NpdGlvbjtcbiAgICB2YXIgZXhjZWVkZWRNaW4gPSBtYXggIT09IHRydWUgJiYgb3JpZW50KHBvc2l0aW9uKSA8IG9yaWVudChnZXRMaW1pdChmYWxzZSkpO1xuICAgIHZhciBleGNlZWRlZE1heCA9IG1heCAhPT0gZmFsc2UgJiYgb3JpZW50KHBvc2l0aW9uKSA+IG9yaWVudChnZXRMaW1pdCh0cnVlKSk7XG4gICAgcmV0dXJuIGV4Y2VlZGVkTWluIHx8IGV4Y2VlZGVkTWF4O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBtb3VudDogbW91bnQsXG4gICAgbW92ZTogbW92ZSxcbiAgICBqdW1wOiBqdW1wLFxuICAgIHRyYW5zbGF0ZTogdHJhbnNsYXRlLFxuICAgIHNoaWZ0OiBzaGlmdCxcbiAgICBjYW5jZWw6IGNhbmNlbCxcbiAgICB0b0luZGV4OiB0b0luZGV4LFxuICAgIHRvUG9zaXRpb246IHRvUG9zaXRpb24sXG4gICAgZ2V0UG9zaXRpb246IGdldFBvc2l0aW9uLFxuICAgIGdldExpbWl0OiBnZXRMaW1pdCxcbiAgICBleGNlZWRlZExpbWl0OiBleGNlZWRlZExpbWl0LFxuICAgIHJlcG9zaXRpb246IHJlcG9zaXRpb25cbiAgfTtcbn1cblxuZnVuY3Rpb24gQ29udHJvbGxlcihTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICB2YXIgX0V2ZW50SW50ZXJmYWNlNSA9IEV2ZW50SW50ZXJmYWNlKFNwbGlkZTIpLFxuICAgICAgb24gPSBfRXZlbnRJbnRlcmZhY2U1Lm9uLFxuICAgICAgZW1pdCA9IF9FdmVudEludGVyZmFjZTUuZW1pdDtcblxuICB2YXIgTW92ZSA9IENvbXBvbmVudHMyLk1vdmU7XG4gIHZhciBnZXRQb3NpdGlvbiA9IE1vdmUuZ2V0UG9zaXRpb24sXG4gICAgICBnZXRMaW1pdCA9IE1vdmUuZ2V0TGltaXQsXG4gICAgICB0b1Bvc2l0aW9uID0gTW92ZS50b1Bvc2l0aW9uO1xuICB2YXIgX0NvbXBvbmVudHMyJFNsaWRlcyA9IENvbXBvbmVudHMyLlNsaWRlcyxcbiAgICAgIGlzRW5vdWdoID0gX0NvbXBvbmVudHMyJFNsaWRlcy5pc0Vub3VnaCxcbiAgICAgIGdldExlbmd0aCA9IF9Db21wb25lbnRzMiRTbGlkZXMuZ2V0TGVuZ3RoO1xuICB2YXIgb21pdEVuZCA9IG9wdGlvbnMub21pdEVuZDtcbiAgdmFyIGlzTG9vcCA9IFNwbGlkZTIuaXMoTE9PUCk7XG4gIHZhciBpc1NsaWRlID0gU3BsaWRlMi5pcyhTTElERSk7XG4gIHZhciBnZXROZXh0ID0gYXBwbHkoZ2V0QWRqYWNlbnQsIGZhbHNlKTtcbiAgdmFyIGdldFByZXYgPSBhcHBseShnZXRBZGphY2VudCwgdHJ1ZSk7XG4gIHZhciBjdXJySW5kZXggPSBvcHRpb25zLnN0YXJ0IHx8IDA7XG4gIHZhciBlbmRJbmRleDtcbiAgdmFyIHByZXZJbmRleCA9IGN1cnJJbmRleDtcbiAgdmFyIHNsaWRlQ291bnQ7XG4gIHZhciBwZXJNb3ZlO1xuICB2YXIgcGVyUGFnZTtcblxuICBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBpbml0KCk7XG4gICAgb24oW0VWRU5UX1VQREFURUQsIEVWRU5UX1JFRlJFU0gsIEVWRU5UX0VORF9JTkRFWF9DSEFOR0VEXSwgaW5pdCk7XG4gICAgb24oRVZFTlRfUkVTSVpFRCwgb25SZXNpemVkKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgc2xpZGVDb3VudCA9IGdldExlbmd0aCh0cnVlKTtcbiAgICBwZXJNb3ZlID0gb3B0aW9ucy5wZXJNb3ZlO1xuICAgIHBlclBhZ2UgPSBvcHRpb25zLnBlclBhZ2U7XG4gICAgZW5kSW5kZXggPSBnZXRFbmQoKTtcbiAgICB2YXIgaW5kZXggPSBjbGFtcChjdXJySW5kZXgsIDAsIG9taXRFbmQgPyBlbmRJbmRleCA6IHNsaWRlQ291bnQgLSAxKTtcblxuICAgIGlmIChpbmRleCAhPT0gY3VyckluZGV4KSB7XG4gICAgICBjdXJySW5kZXggPSBpbmRleDtcbiAgICAgIE1vdmUucmVwb3NpdGlvbigpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uUmVzaXplZCgpIHtcbiAgICBpZiAoZW5kSW5kZXggIT09IGdldEVuZCgpKSB7XG4gICAgICBlbWl0KEVWRU5UX0VORF9JTkRFWF9DSEFOR0VEKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnbyhjb250cm9sLCBhbGxvd1NhbWVJbmRleCwgY2FsbGJhY2spIHtcbiAgICBpZiAoIWlzQnVzeSgpKSB7XG4gICAgICB2YXIgZGVzdCA9IHBhcnNlKGNvbnRyb2wpO1xuICAgICAgdmFyIGluZGV4ID0gbG9vcChkZXN0KTtcblxuICAgICAgaWYgKGluZGV4ID4gLTEgJiYgKGFsbG93U2FtZUluZGV4IHx8IGluZGV4ICE9PSBjdXJySW5kZXgpKSB7XG4gICAgICAgIHNldEluZGV4KGluZGV4KTtcbiAgICAgICAgTW92ZS5tb3ZlKGRlc3QsIGluZGV4LCBwcmV2SW5kZXgsIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzY3JvbGwoZGVzdGluYXRpb24sIGR1cmF0aW9uLCBzbmFwLCBjYWxsYmFjaykge1xuICAgIENvbXBvbmVudHMyLlNjcm9sbC5zY3JvbGwoZGVzdGluYXRpb24sIGR1cmF0aW9uLCBzbmFwLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgaW5kZXggPSBsb29wKE1vdmUudG9JbmRleChnZXRQb3NpdGlvbigpKSk7XG4gICAgICBzZXRJbmRleChvbWl0RW5kID8gbWluKGluZGV4LCBlbmRJbmRleCkgOiBpbmRleCk7XG4gICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2UoY29udHJvbCkge1xuICAgIHZhciBpbmRleCA9IGN1cnJJbmRleDtcblxuICAgIGlmIChpc1N0cmluZyhjb250cm9sKSkge1xuICAgICAgdmFyIF9yZWYgPSBjb250cm9sLm1hdGNoKC8oWytcXC08Pl0pKFxcZCspPy8pIHx8IFtdLFxuICAgICAgICAgIGluZGljYXRvciA9IF9yZWZbMV0sXG4gICAgICAgICAgbnVtYmVyID0gX3JlZlsyXTtcblxuICAgICAgaWYgKGluZGljYXRvciA9PT0gXCIrXCIgfHwgaW5kaWNhdG9yID09PSBcIi1cIikge1xuICAgICAgICBpbmRleCA9IGNvbXB1dGVEZXN0SW5kZXgoY3VyckluZGV4ICsgKyhcIlwiICsgaW5kaWNhdG9yICsgKCtudW1iZXIgfHwgMSkpLCBjdXJySW5kZXgpO1xuICAgICAgfSBlbHNlIGlmIChpbmRpY2F0b3IgPT09IFwiPlwiKSB7XG4gICAgICAgIGluZGV4ID0gbnVtYmVyID8gdG9JbmRleCgrbnVtYmVyKSA6IGdldE5leHQodHJ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGluZGljYXRvciA9PT0gXCI8XCIpIHtcbiAgICAgICAgaW5kZXggPSBnZXRQcmV2KHRydWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpbmRleCA9IGlzTG9vcCA/IGNvbnRyb2wgOiBjbGFtcChjb250cm9sLCAwLCBlbmRJbmRleCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0QWRqYWNlbnQocHJldiwgZGVzdGluYXRpb24pIHtcbiAgICB2YXIgbnVtYmVyID0gcGVyTW92ZSB8fCAoaGFzRm9jdXMoKSA/IDEgOiBwZXJQYWdlKTtcbiAgICB2YXIgZGVzdCA9IGNvbXB1dGVEZXN0SW5kZXgoY3VyckluZGV4ICsgbnVtYmVyICogKHByZXYgPyAtMSA6IDEpLCBjdXJySW5kZXgsICEocGVyTW92ZSB8fCBoYXNGb2N1cygpKSk7XG5cbiAgICBpZiAoZGVzdCA9PT0gLTEgJiYgaXNTbGlkZSkge1xuICAgICAgaWYgKCFhcHByb3hpbWF0ZWx5RXF1YWwoZ2V0UG9zaXRpb24oKSwgZ2V0TGltaXQoIXByZXYpLCAxKSkge1xuICAgICAgICByZXR1cm4gcHJldiA/IDAgOiBlbmRJbmRleDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGVzdGluYXRpb24gPyBkZXN0IDogbG9vcChkZXN0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbXB1dGVEZXN0SW5kZXgoZGVzdCwgZnJvbSwgc25hcFBhZ2UpIHtcbiAgICBpZiAoaXNFbm91Z2goKSB8fCBoYXNGb2N1cygpKSB7XG4gICAgICB2YXIgaW5kZXggPSBjb21wdXRlTW92YWJsZURlc3RJbmRleChkZXN0KTtcblxuICAgICAgaWYgKGluZGV4ICE9PSBkZXN0KSB7XG4gICAgICAgIGZyb20gPSBkZXN0O1xuICAgICAgICBkZXN0ID0gaW5kZXg7XG4gICAgICAgIHNuYXBQYWdlID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChkZXN0IDwgMCB8fCBkZXN0ID4gZW5kSW5kZXgpIHtcbiAgICAgICAgaWYgKCFwZXJNb3ZlICYmIChiZXR3ZWVuKDAsIGRlc3QsIGZyb20sIHRydWUpIHx8IGJldHdlZW4oZW5kSW5kZXgsIGZyb20sIGRlc3QsIHRydWUpKSkge1xuICAgICAgICAgIGRlc3QgPSB0b0luZGV4KHRvUGFnZShkZXN0KSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGlzTG9vcCkge1xuICAgICAgICAgICAgZGVzdCA9IHNuYXBQYWdlID8gZGVzdCA8IDAgPyAtKHNsaWRlQ291bnQgJSBwZXJQYWdlIHx8IHBlclBhZ2UpIDogc2xpZGVDb3VudCA6IGRlc3Q7XG4gICAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLnJld2luZCkge1xuICAgICAgICAgICAgZGVzdCA9IGRlc3QgPCAwID8gZW5kSW5kZXggOiAwO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZXN0ID0gLTE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc25hcFBhZ2UgJiYgZGVzdCAhPT0gZnJvbSkge1xuICAgICAgICAgIGRlc3QgPSB0b0luZGV4KHRvUGFnZShmcm9tKSArIChkZXN0IDwgZnJvbSA/IC0xIDogMSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlc3QgPSAtMTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVzdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbXB1dGVNb3ZhYmxlRGVzdEluZGV4KGRlc3QpIHtcbiAgICBpZiAoaXNTbGlkZSAmJiBvcHRpb25zLnRyaW1TcGFjZSA9PT0gXCJtb3ZlXCIgJiYgZGVzdCAhPT0gY3VyckluZGV4KSB7XG4gICAgICB2YXIgcG9zaXRpb24gPSBnZXRQb3NpdGlvbigpO1xuXG4gICAgICB3aGlsZSAocG9zaXRpb24gPT09IHRvUG9zaXRpb24oZGVzdCwgdHJ1ZSkgJiYgYmV0d2VlbihkZXN0LCAwLCBTcGxpZGUyLmxlbmd0aCAtIDEsICFvcHRpb25zLnJld2luZCkpIHtcbiAgICAgICAgZGVzdCA8IGN1cnJJbmRleCA/IC0tZGVzdCA6ICsrZGVzdDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGVzdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxvb3AoaW5kZXgpIHtcbiAgICByZXR1cm4gaXNMb29wID8gKGluZGV4ICsgc2xpZGVDb3VudCkgJSBzbGlkZUNvdW50IHx8IDAgOiBpbmRleDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEVuZCgpIHtcbiAgICB2YXIgZW5kID0gc2xpZGVDb3VudCAtIChoYXNGb2N1cygpIHx8IGlzTG9vcCAmJiBwZXJNb3ZlID8gMSA6IHBlclBhZ2UpO1xuXG4gICAgd2hpbGUgKG9taXRFbmQgJiYgZW5kLS0gPiAwKSB7XG4gICAgICBpZiAodG9Qb3NpdGlvbihzbGlkZUNvdW50IC0gMSwgdHJ1ZSkgIT09IHRvUG9zaXRpb24oZW5kLCB0cnVlKSkge1xuICAgICAgICBlbmQrKztcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsYW1wKGVuZCwgMCwgc2xpZGVDb3VudCAtIDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gdG9JbmRleChwYWdlKSB7XG4gICAgcmV0dXJuIGNsYW1wKGhhc0ZvY3VzKCkgPyBwYWdlIDogcGVyUGFnZSAqIHBhZ2UsIDAsIGVuZEluZGV4KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvUGFnZShpbmRleCkge1xuICAgIHJldHVybiBoYXNGb2N1cygpID8gbWluKGluZGV4LCBlbmRJbmRleCkgOiBmbG9vcigoaW5kZXggPj0gZW5kSW5kZXggPyBzbGlkZUNvdW50IC0gMSA6IGluZGV4KSAvIHBlclBhZ2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gdG9EZXN0KGRlc3RpbmF0aW9uKSB7XG4gICAgdmFyIGNsb3Nlc3QgPSBNb3ZlLnRvSW5kZXgoZGVzdGluYXRpb24pO1xuICAgIHJldHVybiBpc1NsaWRlID8gY2xhbXAoY2xvc2VzdCwgMCwgZW5kSW5kZXgpIDogY2xvc2VzdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldEluZGV4KGluZGV4KSB7XG4gICAgaWYgKGluZGV4ICE9PSBjdXJySW5kZXgpIHtcbiAgICAgIHByZXZJbmRleCA9IGN1cnJJbmRleDtcbiAgICAgIGN1cnJJbmRleCA9IGluZGV4O1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEluZGV4KHByZXYpIHtcbiAgICByZXR1cm4gcHJldiA/IHByZXZJbmRleCA6IGN1cnJJbmRleDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhc0ZvY3VzKCkge1xuICAgIHJldHVybiAhaXNVbmRlZmluZWQob3B0aW9ucy5mb2N1cykgfHwgb3B0aW9ucy5pc05hdmlnYXRpb247XG4gIH1cblxuICBmdW5jdGlvbiBpc0J1c3koKSB7XG4gICAgcmV0dXJuIFNwbGlkZTIuc3RhdGUuaXMoW01PVklORywgU0NST0xMSU5HXSkgJiYgISFvcHRpb25zLndhaXRGb3JUcmFuc2l0aW9uO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBtb3VudDogbW91bnQsXG4gICAgZ286IGdvLFxuICAgIHNjcm9sbDogc2Nyb2xsLFxuICAgIGdldE5leHQ6IGdldE5leHQsXG4gICAgZ2V0UHJldjogZ2V0UHJldixcbiAgICBnZXRBZGphY2VudDogZ2V0QWRqYWNlbnQsXG4gICAgZ2V0RW5kOiBnZXRFbmQsXG4gICAgc2V0SW5kZXg6IHNldEluZGV4LFxuICAgIGdldEluZGV4OiBnZXRJbmRleCxcbiAgICB0b0luZGV4OiB0b0luZGV4LFxuICAgIHRvUGFnZTogdG9QYWdlLFxuICAgIHRvRGVzdDogdG9EZXN0LFxuICAgIGhhc0ZvY3VzOiBoYXNGb2N1cyxcbiAgICBpc0J1c3k6IGlzQnVzeVxuICB9O1xufVxuXG52YXIgWE1MX05BTUVfU1BBQ0UgPSBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7XG52YXIgUEFUSCA9IFwibTE1LjUgMC45MzItNC4zIDQuMzggMTQuNSAxNC42LTE0LjUgMTQuNSA0LjMgNC40IDE0LjYtMTQuNiA0LjQtNC4zLTQuNC00LjQtMTQuNi0xNC42elwiO1xudmFyIFNJWkUgPSA0MDtcblxuZnVuY3Rpb24gQXJyb3dzKFNwbGlkZTIsIENvbXBvbmVudHMyLCBvcHRpb25zKSB7XG4gIHZhciBldmVudCA9IEV2ZW50SW50ZXJmYWNlKFNwbGlkZTIpO1xuICB2YXIgb24gPSBldmVudC5vbixcbiAgICAgIGJpbmQgPSBldmVudC5iaW5kLFxuICAgICAgZW1pdCA9IGV2ZW50LmVtaXQ7XG4gIHZhciBjbGFzc2VzID0gb3B0aW9ucy5jbGFzc2VzLFxuICAgICAgaTE4biA9IG9wdGlvbnMuaTE4bjtcbiAgdmFyIEVsZW1lbnRzID0gQ29tcG9uZW50czIuRWxlbWVudHMsXG4gICAgICBDb250cm9sbGVyID0gQ29tcG9uZW50czIuQ29udHJvbGxlcjtcbiAgdmFyIHBsYWNlaG9sZGVyID0gRWxlbWVudHMuYXJyb3dzLFxuICAgICAgdHJhY2sgPSBFbGVtZW50cy50cmFjaztcbiAgdmFyIHdyYXBwZXIgPSBwbGFjZWhvbGRlcjtcbiAgdmFyIHByZXYgPSBFbGVtZW50cy5wcmV2O1xuICB2YXIgbmV4dCA9IEVsZW1lbnRzLm5leHQ7XG4gIHZhciBjcmVhdGVkO1xuICB2YXIgd3JhcHBlckNsYXNzZXM7XG4gIHZhciBhcnJvd3MgPSB7fTtcblxuICBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBpbml0KCk7XG4gICAgb24oRVZFTlRfVVBEQVRFRCwgcmVtb3VudCk7XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdW50KCkge1xuICAgIGRlc3Ryb3koKTtcbiAgICBtb3VudCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICB2YXIgZW5hYmxlZCA9IG9wdGlvbnMuYXJyb3dzO1xuXG4gICAgaWYgKGVuYWJsZWQgJiYgIShwcmV2ICYmIG5leHQpKSB7XG4gICAgICBjcmVhdGVBcnJvd3MoKTtcbiAgICB9XG5cbiAgICBpZiAocHJldiAmJiBuZXh0KSB7XG4gICAgICBhc3NpZ24oYXJyb3dzLCB7XG4gICAgICAgIHByZXY6IHByZXYsXG4gICAgICAgIG5leHQ6IG5leHRcbiAgICAgIH0pO1xuICAgICAgZGlzcGxheSh3cmFwcGVyLCBlbmFibGVkID8gXCJcIiA6IFwibm9uZVwiKTtcbiAgICAgIGFkZENsYXNzKHdyYXBwZXIsIHdyYXBwZXJDbGFzc2VzID0gQ0xBU1NfQVJST1dTICsgXCItLVwiICsgb3B0aW9ucy5kaXJlY3Rpb24pO1xuXG4gICAgICBpZiAoZW5hYmxlZCkge1xuICAgICAgICBsaXN0ZW4oKTtcbiAgICAgICAgdXBkYXRlKCk7XG4gICAgICAgIHNldEF0dHJpYnV0ZShbcHJldiwgbmV4dF0sIEFSSUFfQ09OVFJPTFMsIHRyYWNrLmlkKTtcbiAgICAgICAgZW1pdChFVkVOVF9BUlJPV1NfTU9VTlRFRCwgcHJldiwgbmV4dCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBldmVudC5kZXN0cm95KCk7XG4gICAgcmVtb3ZlQ2xhc3Mod3JhcHBlciwgd3JhcHBlckNsYXNzZXMpO1xuXG4gICAgaWYgKGNyZWF0ZWQpIHtcbiAgICAgIHJlbW92ZShwbGFjZWhvbGRlciA/IFtwcmV2LCBuZXh0XSA6IHdyYXBwZXIpO1xuICAgICAgcHJldiA9IG5leHQgPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmVBdHRyaWJ1dGUoW3ByZXYsIG5leHRdLCBBTExfQVRUUklCVVRFUyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKCkge1xuICAgIG9uKFtFVkVOVF9NT1VOVEVELCBFVkVOVF9NT1ZFRCwgRVZFTlRfUkVGUkVTSCwgRVZFTlRfU0NST0xMRUQsIEVWRU5UX0VORF9JTkRFWF9DSEFOR0VEXSwgdXBkYXRlKTtcbiAgICBiaW5kKG5leHQsIFwiY2xpY2tcIiwgYXBwbHkoZ28sIFwiPlwiKSk7XG4gICAgYmluZChwcmV2LCBcImNsaWNrXCIsIGFwcGx5KGdvLCBcIjxcIikpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28oY29udHJvbCkge1xuICAgIENvbnRyb2xsZXIuZ28oY29udHJvbCwgdHJ1ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVBcnJvd3MoKSB7XG4gICAgd3JhcHBlciA9IHBsYWNlaG9sZGVyIHx8IGNyZWF0ZShcImRpdlwiLCBjbGFzc2VzLmFycm93cyk7XG4gICAgcHJldiA9IGNyZWF0ZUFycm93KHRydWUpO1xuICAgIG5leHQgPSBjcmVhdGVBcnJvdyhmYWxzZSk7XG4gICAgY3JlYXRlZCA9IHRydWU7XG4gICAgYXBwZW5kKHdyYXBwZXIsIFtwcmV2LCBuZXh0XSk7XG4gICAgIXBsYWNlaG9sZGVyICYmIGJlZm9yZSh3cmFwcGVyLCB0cmFjayk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVBcnJvdyhwcmV2Mikge1xuICAgIHZhciBhcnJvdyA9IFwiPGJ1dHRvbiBjbGFzcz1cXFwiXCIgKyBjbGFzc2VzLmFycm93ICsgXCIgXCIgKyAocHJldjIgPyBjbGFzc2VzLnByZXYgOiBjbGFzc2VzLm5leHQpICsgXCJcXFwiIHR5cGU9XFxcImJ1dHRvblxcXCI+PHN2ZyB4bWxucz1cXFwiXCIgKyBYTUxfTkFNRV9TUEFDRSArIFwiXFxcIiB2aWV3Qm94PVxcXCIwIDAgXCIgKyBTSVpFICsgXCIgXCIgKyBTSVpFICsgXCJcXFwiIHdpZHRoPVxcXCJcIiArIFNJWkUgKyBcIlxcXCIgaGVpZ2h0PVxcXCJcIiArIFNJWkUgKyBcIlxcXCIgZm9jdXNhYmxlPVxcXCJmYWxzZVxcXCI+PHBhdGggZD1cXFwiXCIgKyAob3B0aW9ucy5hcnJvd1BhdGggfHwgUEFUSCkgKyBcIlxcXCIgLz5cIjtcbiAgICByZXR1cm4gcGFyc2VIdG1sKGFycm93KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICBpZiAocHJldiAmJiBuZXh0KSB7XG4gICAgICB2YXIgaW5kZXggPSBTcGxpZGUyLmluZGV4O1xuICAgICAgdmFyIHByZXZJbmRleCA9IENvbnRyb2xsZXIuZ2V0UHJldigpO1xuICAgICAgdmFyIG5leHRJbmRleCA9IENvbnRyb2xsZXIuZ2V0TmV4dCgpO1xuICAgICAgdmFyIHByZXZMYWJlbCA9IHByZXZJbmRleCA+IC0xICYmIGluZGV4IDwgcHJldkluZGV4ID8gaTE4bi5sYXN0IDogaTE4bi5wcmV2O1xuICAgICAgdmFyIG5leHRMYWJlbCA9IG5leHRJbmRleCA+IC0xICYmIGluZGV4ID4gbmV4dEluZGV4ID8gaTE4bi5maXJzdCA6IGkxOG4ubmV4dDtcbiAgICAgIHByZXYuZGlzYWJsZWQgPSBwcmV2SW5kZXggPCAwO1xuICAgICAgbmV4dC5kaXNhYmxlZCA9IG5leHRJbmRleCA8IDA7XG4gICAgICBzZXRBdHRyaWJ1dGUocHJldiwgQVJJQV9MQUJFTCwgcHJldkxhYmVsKTtcbiAgICAgIHNldEF0dHJpYnV0ZShuZXh0LCBBUklBX0xBQkVMLCBuZXh0TGFiZWwpO1xuICAgICAgZW1pdChFVkVOVF9BUlJPV1NfVVBEQVRFRCwgcHJldiwgbmV4dCwgcHJldkluZGV4LCBuZXh0SW5kZXgpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgYXJyb3dzOiBhcnJvd3MsXG4gICAgbW91bnQ6IG1vdW50LFxuICAgIGRlc3Ryb3k6IGRlc3Ryb3ksXG4gICAgdXBkYXRlOiB1cGRhdGVcbiAgfTtcbn1cblxudmFyIElOVEVSVkFMX0RBVEFfQVRUUklCVVRFID0gREFUQV9BVFRSSUJVVEUgKyBcIi1pbnRlcnZhbFwiO1xuXG5mdW5jdGlvbiBBdXRvcGxheShTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICB2YXIgX0V2ZW50SW50ZXJmYWNlNiA9IEV2ZW50SW50ZXJmYWNlKFNwbGlkZTIpLFxuICAgICAgb24gPSBfRXZlbnRJbnRlcmZhY2U2Lm9uLFxuICAgICAgYmluZCA9IF9FdmVudEludGVyZmFjZTYuYmluZCxcbiAgICAgIGVtaXQgPSBfRXZlbnRJbnRlcmZhY2U2LmVtaXQ7XG5cbiAgdmFyIGludGVydmFsID0gUmVxdWVzdEludGVydmFsKG9wdGlvbnMuaW50ZXJ2YWwsIFNwbGlkZTIuZ28uYmluZChTcGxpZGUyLCBcIj5cIiksIG9uQW5pbWF0aW9uRnJhbWUpO1xuICB2YXIgaXNQYXVzZWQgPSBpbnRlcnZhbC5pc1BhdXNlZDtcbiAgdmFyIEVsZW1lbnRzID0gQ29tcG9uZW50czIuRWxlbWVudHMsXG4gICAgICBfQ29tcG9uZW50czIkRWxlbWVudHM0ID0gQ29tcG9uZW50czIuRWxlbWVudHMsXG4gICAgICByb290ID0gX0NvbXBvbmVudHMyJEVsZW1lbnRzNC5yb290LFxuICAgICAgdG9nZ2xlID0gX0NvbXBvbmVudHMyJEVsZW1lbnRzNC50b2dnbGU7XG4gIHZhciBhdXRvcGxheSA9IG9wdGlvbnMuYXV0b3BsYXk7XG4gIHZhciBob3ZlcmVkO1xuICB2YXIgZm9jdXNlZDtcbiAgdmFyIHN0b3BwZWQgPSBhdXRvcGxheSA9PT0gXCJwYXVzZVwiO1xuXG4gIGZ1bmN0aW9uIG1vdW50KCkge1xuICAgIGlmIChhdXRvcGxheSkge1xuICAgICAgbGlzdGVuKCk7XG4gICAgICB0b2dnbGUgJiYgc2V0QXR0cmlidXRlKHRvZ2dsZSwgQVJJQV9DT05UUk9MUywgRWxlbWVudHMudHJhY2suaWQpO1xuICAgICAgc3RvcHBlZCB8fCBwbGF5KCk7XG4gICAgICB1cGRhdGUoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4oKSB7XG4gICAgaWYgKG9wdGlvbnMucGF1c2VPbkhvdmVyKSB7XG4gICAgICBiaW5kKHJvb3QsIFwibW91c2VlbnRlciBtb3VzZWxlYXZlXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGhvdmVyZWQgPSBlLnR5cGUgPT09IFwibW91c2VlbnRlclwiO1xuICAgICAgICBhdXRvVG9nZ2xlKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5wYXVzZU9uRm9jdXMpIHtcbiAgICAgIGJpbmQocm9vdCwgXCJmb2N1c2luIGZvY3Vzb3V0XCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGZvY3VzZWQgPSBlLnR5cGUgPT09IFwiZm9jdXNpblwiO1xuICAgICAgICBhdXRvVG9nZ2xlKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodG9nZ2xlKSB7XG4gICAgICBiaW5kKHRvZ2dsZSwgXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHN0b3BwZWQgPyBwbGF5KCkgOiBwYXVzZSh0cnVlKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIG9uKFtFVkVOVF9NT1ZFLCBFVkVOVF9TQ1JPTEwsIEVWRU5UX1JFRlJFU0hdLCBpbnRlcnZhbC5yZXdpbmQpO1xuICAgIG9uKEVWRU5UX01PVkUsIG9uTW92ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBwbGF5KCkge1xuICAgIGlmIChpc1BhdXNlZCgpICYmIENvbXBvbmVudHMyLlNsaWRlcy5pc0Vub3VnaCgpKSB7XG4gICAgICBpbnRlcnZhbC5zdGFydCghb3B0aW9ucy5yZXNldFByb2dyZXNzKTtcbiAgICAgIGZvY3VzZWQgPSBob3ZlcmVkID0gc3RvcHBlZCA9IGZhbHNlO1xuICAgICAgdXBkYXRlKCk7XG4gICAgICBlbWl0KEVWRU5UX0FVVE9QTEFZX1BMQVkpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBhdXNlKHN0b3ApIHtcbiAgICBpZiAoc3RvcCA9PT0gdm9pZCAwKSB7XG4gICAgICBzdG9wID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBzdG9wcGVkID0gISFzdG9wO1xuICAgIHVwZGF0ZSgpO1xuXG4gICAgaWYgKCFpc1BhdXNlZCgpKSB7XG4gICAgICBpbnRlcnZhbC5wYXVzZSgpO1xuICAgICAgZW1pdChFVkVOVF9BVVRPUExBWV9QQVVTRSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYXV0b1RvZ2dsZSgpIHtcbiAgICBpZiAoIXN0b3BwZWQpIHtcbiAgICAgIGhvdmVyZWQgfHwgZm9jdXNlZCA/IHBhdXNlKGZhbHNlKSA6IHBsYXkoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgaWYgKHRvZ2dsZSkge1xuICAgICAgdG9nZ2xlQ2xhc3ModG9nZ2xlLCBDTEFTU19BQ1RJVkUsICFzdG9wcGVkKTtcbiAgICAgIHNldEF0dHJpYnV0ZSh0b2dnbGUsIEFSSUFfTEFCRUwsIG9wdGlvbnMuaTE4bltzdG9wcGVkID8gXCJwbGF5XCIgOiBcInBhdXNlXCJdKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbkFuaW1hdGlvbkZyYW1lKHJhdGUpIHtcbiAgICB2YXIgYmFyID0gRWxlbWVudHMuYmFyO1xuICAgIGJhciAmJiBzdHlsZShiYXIsIFwid2lkdGhcIiwgcmF0ZSAqIDEwMCArIFwiJVwiKTtcbiAgICBlbWl0KEVWRU5UX0FVVE9QTEFZX1BMQVlJTkcsIHJhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25Nb3ZlKGluZGV4KSB7XG4gICAgdmFyIFNsaWRlID0gQ29tcG9uZW50czIuU2xpZGVzLmdldEF0KGluZGV4KTtcbiAgICBpbnRlcnZhbC5zZXQoU2xpZGUgJiYgK2dldEF0dHJpYnV0ZShTbGlkZS5zbGlkZSwgSU5URVJWQUxfREFUQV9BVFRSSUJVVEUpIHx8IG9wdGlvbnMuaW50ZXJ2YWwpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBtb3VudDogbW91bnQsXG4gICAgZGVzdHJveTogaW50ZXJ2YWwuY2FuY2VsLFxuICAgIHBsYXk6IHBsYXksXG4gICAgcGF1c2U6IHBhdXNlLFxuICAgIGlzUGF1c2VkOiBpc1BhdXNlZFxuICB9O1xufVxuXG5mdW5jdGlvbiBDb3ZlcihTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICB2YXIgX0V2ZW50SW50ZXJmYWNlNyA9IEV2ZW50SW50ZXJmYWNlKFNwbGlkZTIpLFxuICAgICAgb24gPSBfRXZlbnRJbnRlcmZhY2U3Lm9uO1xuXG4gIGZ1bmN0aW9uIG1vdW50KCkge1xuICAgIGlmIChvcHRpb25zLmNvdmVyKSB7XG4gICAgICBvbihFVkVOVF9MQVpZTE9BRF9MT0FERUQsIGFwcGx5KHRvZ2dsZSwgdHJ1ZSkpO1xuICAgICAgb24oW0VWRU5UX01PVU5URUQsIEVWRU5UX1VQREFURUQsIEVWRU5UX1JFRlJFU0hdLCBhcHBseShjb3ZlciwgdHJ1ZSkpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNvdmVyKGNvdmVyMikge1xuICAgIENvbXBvbmVudHMyLlNsaWRlcy5mb3JFYWNoKGZ1bmN0aW9uIChTbGlkZSkge1xuICAgICAgdmFyIGltZyA9IGNoaWxkKFNsaWRlLmNvbnRhaW5lciB8fCBTbGlkZS5zbGlkZSwgXCJpbWdcIik7XG5cbiAgICAgIGlmIChpbWcgJiYgaW1nLnNyYykge1xuICAgICAgICB0b2dnbGUoY292ZXIyLCBpbWcsIFNsaWRlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvZ2dsZShjb3ZlcjIsIGltZywgU2xpZGUpIHtcbiAgICBTbGlkZS5zdHlsZShcImJhY2tncm91bmRcIiwgY292ZXIyID8gXCJjZW50ZXIvY292ZXIgbm8tcmVwZWF0IHVybChcXFwiXCIgKyBpbWcuc3JjICsgXCJcXFwiKVwiIDogXCJcIiwgdHJ1ZSk7XG4gICAgZGlzcGxheShpbWcsIGNvdmVyMiA/IFwibm9uZVwiIDogXCJcIik7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG1vdW50OiBtb3VudCxcbiAgICBkZXN0cm95OiBhcHBseShjb3ZlciwgZmFsc2UpXG4gIH07XG59XG5cbnZhciBCT1VOQ0VfRElGRl9USFJFU0hPTEQgPSAxMDtcbnZhciBCT1VOQ0VfRFVSQVRJT04gPSA2MDA7XG52YXIgRlJJQ1RJT05fRkFDVE9SID0gMC42O1xudmFyIEJBU0VfVkVMT0NJVFkgPSAxLjU7XG52YXIgTUlOX0RVUkFUSU9OID0gODAwO1xuXG5mdW5jdGlvbiBTY3JvbGwoU3BsaWRlMiwgQ29tcG9uZW50czIsIG9wdGlvbnMpIHtcbiAgdmFyIF9FdmVudEludGVyZmFjZTggPSBFdmVudEludGVyZmFjZShTcGxpZGUyKSxcbiAgICAgIG9uID0gX0V2ZW50SW50ZXJmYWNlOC5vbixcbiAgICAgIGVtaXQgPSBfRXZlbnRJbnRlcmZhY2U4LmVtaXQ7XG5cbiAgdmFyIHNldCA9IFNwbGlkZTIuc3RhdGUuc2V0O1xuICB2YXIgTW92ZSA9IENvbXBvbmVudHMyLk1vdmU7XG4gIHZhciBnZXRQb3NpdGlvbiA9IE1vdmUuZ2V0UG9zaXRpb24sXG4gICAgICBnZXRMaW1pdCA9IE1vdmUuZ2V0TGltaXQsXG4gICAgICBleGNlZWRlZExpbWl0ID0gTW92ZS5leGNlZWRlZExpbWl0LFxuICAgICAgdHJhbnNsYXRlID0gTW92ZS50cmFuc2xhdGU7XG4gIHZhciBpc1NsaWRlID0gU3BsaWRlMi5pcyhTTElERSk7XG4gIHZhciBpbnRlcnZhbDtcbiAgdmFyIGNhbGxiYWNrO1xuICB2YXIgZnJpY3Rpb24gPSAxO1xuXG4gIGZ1bmN0aW9uIG1vdW50KCkge1xuICAgIG9uKEVWRU5UX01PVkUsIGNsZWFyKTtcbiAgICBvbihbRVZFTlRfVVBEQVRFRCwgRVZFTlRfUkVGUkVTSF0sIGNhbmNlbCk7XG4gIH1cblxuICBmdW5jdGlvbiBzY3JvbGwoZGVzdGluYXRpb24sIGR1cmF0aW9uLCBzbmFwLCBvblNjcm9sbGVkLCBub0NvbnN0cmFpbikge1xuICAgIHZhciBmcm9tID0gZ2V0UG9zaXRpb24oKTtcbiAgICBjbGVhcigpO1xuXG4gICAgaWYgKHNuYXAgJiYgKCFpc1NsaWRlIHx8ICFleGNlZWRlZExpbWl0KCkpKSB7XG4gICAgICB2YXIgc2l6ZSA9IENvbXBvbmVudHMyLkxheW91dC5zbGlkZXJTaXplKCk7XG4gICAgICB2YXIgb2Zmc2V0ID0gc2lnbihkZXN0aW5hdGlvbikgKiBzaXplICogZmxvb3IoYWJzKGRlc3RpbmF0aW9uKSAvIHNpemUpIHx8IDA7XG4gICAgICBkZXN0aW5hdGlvbiA9IE1vdmUudG9Qb3NpdGlvbihDb21wb25lbnRzMi5Db250cm9sbGVyLnRvRGVzdChkZXN0aW5hdGlvbiAlIHNpemUpKSArIG9mZnNldDtcbiAgICB9XG5cbiAgICB2YXIgbm9EaXN0YW5jZSA9IGFwcHJveGltYXRlbHlFcXVhbChmcm9tLCBkZXN0aW5hdGlvbiwgMSk7XG4gICAgZnJpY3Rpb24gPSAxO1xuICAgIGR1cmF0aW9uID0gbm9EaXN0YW5jZSA/IDAgOiBkdXJhdGlvbiB8fCBtYXgoYWJzKGRlc3RpbmF0aW9uIC0gZnJvbSkgLyBCQVNFX1ZFTE9DSVRZLCBNSU5fRFVSQVRJT04pO1xuICAgIGNhbGxiYWNrID0gb25TY3JvbGxlZDtcbiAgICBpbnRlcnZhbCA9IFJlcXVlc3RJbnRlcnZhbChkdXJhdGlvbiwgb25FbmQsIGFwcGx5KHVwZGF0ZSwgZnJvbSwgZGVzdGluYXRpb24sIG5vQ29uc3RyYWluKSwgMSk7XG4gICAgc2V0KFNDUk9MTElORyk7XG4gICAgZW1pdChFVkVOVF9TQ1JPTEwpO1xuICAgIGludGVydmFsLnN0YXJ0KCk7XG4gIH1cblxuICBmdW5jdGlvbiBvbkVuZCgpIHtcbiAgICBzZXQoSURMRSk7XG4gICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soKTtcbiAgICBlbWl0KEVWRU5UX1NDUk9MTEVEKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZShmcm9tLCB0bywgbm9Db25zdHJhaW4sIHJhdGUpIHtcbiAgICB2YXIgcG9zaXRpb24gPSBnZXRQb3NpdGlvbigpO1xuICAgIHZhciB0YXJnZXQgPSBmcm9tICsgKHRvIC0gZnJvbSkgKiBlYXNpbmcocmF0ZSk7XG4gICAgdmFyIGRpZmYgPSAodGFyZ2V0IC0gcG9zaXRpb24pICogZnJpY3Rpb247XG4gICAgdHJhbnNsYXRlKHBvc2l0aW9uICsgZGlmZik7XG5cbiAgICBpZiAoaXNTbGlkZSAmJiAhbm9Db25zdHJhaW4gJiYgZXhjZWVkZWRMaW1pdCgpKSB7XG4gICAgICBmcmljdGlvbiAqPSBGUklDVElPTl9GQUNUT1I7XG5cbiAgICAgIGlmIChhYnMoZGlmZikgPCBCT1VOQ0VfRElGRl9USFJFU0hPTEQpIHtcbiAgICAgICAgc2Nyb2xsKGdldExpbWl0KGV4Y2VlZGVkTGltaXQodHJ1ZSkpLCBCT1VOQ0VfRFVSQVRJT04sIGZhbHNlLCBjYWxsYmFjaywgdHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgaWYgKGludGVydmFsKSB7XG4gICAgICBpbnRlcnZhbC5jYW5jZWwoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgaWYgKGludGVydmFsICYmICFpbnRlcnZhbC5pc1BhdXNlZCgpKSB7XG4gICAgICBjbGVhcigpO1xuICAgICAgb25FbmQoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBlYXNpbmcodCkge1xuICAgIHZhciBlYXNpbmdGdW5jID0gb3B0aW9ucy5lYXNpbmdGdW5jO1xuICAgIHJldHVybiBlYXNpbmdGdW5jID8gZWFzaW5nRnVuYyh0KSA6IDEgLSBNYXRoLnBvdygxIC0gdCwgNCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG1vdW50OiBtb3VudCxcbiAgICBkZXN0cm95OiBjbGVhcixcbiAgICBzY3JvbGw6IHNjcm9sbCxcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufVxuXG52YXIgU0NST0xMX0xJU1RFTkVSX09QVElPTlMgPSB7XG4gIHBhc3NpdmU6IGZhbHNlLFxuICBjYXB0dXJlOiB0cnVlXG59O1xuXG5mdW5jdGlvbiBEcmFnKFNwbGlkZTIsIENvbXBvbmVudHMyLCBvcHRpb25zKSB7XG4gIHZhciBfRXZlbnRJbnRlcmZhY2U5ID0gRXZlbnRJbnRlcmZhY2UoU3BsaWRlMiksXG4gICAgICBvbiA9IF9FdmVudEludGVyZmFjZTkub24sXG4gICAgICBlbWl0ID0gX0V2ZW50SW50ZXJmYWNlOS5lbWl0LFxuICAgICAgYmluZCA9IF9FdmVudEludGVyZmFjZTkuYmluZCxcbiAgICAgIHVuYmluZCA9IF9FdmVudEludGVyZmFjZTkudW5iaW5kO1xuXG4gIHZhciBzdGF0ZSA9IFNwbGlkZTIuc3RhdGU7XG4gIHZhciBNb3ZlID0gQ29tcG9uZW50czIuTW92ZSxcbiAgICAgIFNjcm9sbCA9IENvbXBvbmVudHMyLlNjcm9sbCxcbiAgICAgIENvbnRyb2xsZXIgPSBDb21wb25lbnRzMi5Db250cm9sbGVyLFxuICAgICAgdHJhY2sgPSBDb21wb25lbnRzMi5FbGVtZW50cy50cmFjayxcbiAgICAgIHJlZHVjZSA9IENvbXBvbmVudHMyLk1lZGlhLnJlZHVjZTtcbiAgdmFyIF9Db21wb25lbnRzMiREaXJlY3RpbzIgPSBDb21wb25lbnRzMi5EaXJlY3Rpb24sXG4gICAgICByZXNvbHZlID0gX0NvbXBvbmVudHMyJERpcmVjdGlvMi5yZXNvbHZlLFxuICAgICAgb3JpZW50ID0gX0NvbXBvbmVudHMyJERpcmVjdGlvMi5vcmllbnQ7XG4gIHZhciBnZXRQb3NpdGlvbiA9IE1vdmUuZ2V0UG9zaXRpb24sXG4gICAgICBleGNlZWRlZExpbWl0ID0gTW92ZS5leGNlZWRlZExpbWl0O1xuICB2YXIgYmFzZVBvc2l0aW9uO1xuICB2YXIgYmFzZUV2ZW50O1xuICB2YXIgcHJldkJhc2VFdmVudDtcbiAgdmFyIGlzRnJlZTtcbiAgdmFyIGRyYWdnaW5nO1xuICB2YXIgZXhjZWVkZWQgPSBmYWxzZTtcbiAgdmFyIGNsaWNrUHJldmVudGVkO1xuICB2YXIgZGlzYWJsZWQ7XG4gIHZhciB0YXJnZXQ7XG5cbiAgZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgYmluZCh0cmFjaywgUE9JTlRFUl9NT1ZFX0VWRU5UUywgbm9vcCwgU0NST0xMX0xJU1RFTkVSX09QVElPTlMpO1xuICAgIGJpbmQodHJhY2ssIFBPSU5URVJfVVBfRVZFTlRTLCBub29wLCBTQ1JPTExfTElTVEVORVJfT1BUSU9OUyk7XG4gICAgYmluZCh0cmFjaywgUE9JTlRFUl9ET1dOX0VWRU5UUywgb25Qb2ludGVyRG93biwgU0NST0xMX0xJU1RFTkVSX09QVElPTlMpO1xuICAgIGJpbmQodHJhY2ssIFwiY2xpY2tcIiwgb25DbGljaywge1xuICAgICAgY2FwdHVyZTogdHJ1ZVxuICAgIH0pO1xuICAgIGJpbmQodHJhY2ssIFwiZHJhZ3N0YXJ0XCIsIHByZXZlbnQpO1xuICAgIG9uKFtFVkVOVF9NT1VOVEVELCBFVkVOVF9VUERBVEVEXSwgaW5pdCk7XG4gIH1cblxuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIHZhciBkcmFnID0gb3B0aW9ucy5kcmFnO1xuICAgIGRpc2FibGUoIWRyYWcpO1xuICAgIGlzRnJlZSA9IGRyYWcgPT09IFwiZnJlZVwiO1xuICB9XG5cbiAgZnVuY3Rpb24gb25Qb2ludGVyRG93bihlKSB7XG4gICAgY2xpY2tQcmV2ZW50ZWQgPSBmYWxzZTtcblxuICAgIGlmICghZGlzYWJsZWQpIHtcbiAgICAgIHZhciBpc1RvdWNoID0gaXNUb3VjaEV2ZW50KGUpO1xuXG4gICAgICBpZiAoaXNEcmFnZ2FibGUoZS50YXJnZXQpICYmIChpc1RvdWNoIHx8ICFlLmJ1dHRvbikpIHtcbiAgICAgICAgaWYgKCFDb250cm9sbGVyLmlzQnVzeSgpKSB7XG4gICAgICAgICAgdGFyZ2V0ID0gaXNUb3VjaCA/IHRyYWNrIDogd2luZG93O1xuICAgICAgICAgIGRyYWdnaW5nID0gc3RhdGUuaXMoW01PVklORywgU0NST0xMSU5HXSk7XG4gICAgICAgICAgcHJldkJhc2VFdmVudCA9IG51bGw7XG4gICAgICAgICAgYmluZCh0YXJnZXQsIFBPSU5URVJfTU9WRV9FVkVOVFMsIG9uUG9pbnRlck1vdmUsIFNDUk9MTF9MSVNURU5FUl9PUFRJT05TKTtcbiAgICAgICAgICBiaW5kKHRhcmdldCwgUE9JTlRFUl9VUF9FVkVOVFMsIG9uUG9pbnRlclVwLCBTQ1JPTExfTElTVEVORVJfT1BUSU9OUyk7XG4gICAgICAgICAgTW92ZS5jYW5jZWwoKTtcbiAgICAgICAgICBTY3JvbGwuY2FuY2VsKCk7XG4gICAgICAgICAgc2F2ZShlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcmV2ZW50KGUsIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25Qb2ludGVyTW92ZShlKSB7XG4gICAgaWYgKCFzdGF0ZS5pcyhEUkFHR0lORykpIHtcbiAgICAgIHN0YXRlLnNldChEUkFHR0lORyk7XG4gICAgICBlbWl0KEVWRU5UX0RSQUcpO1xuICAgIH1cblxuICAgIGlmIChlLmNhbmNlbGFibGUpIHtcbiAgICAgIGlmIChkcmFnZ2luZykge1xuICAgICAgICBNb3ZlLnRyYW5zbGF0ZShiYXNlUG9zaXRpb24gKyBjb25zdHJhaW4oZGlmZkNvb3JkKGUpKSk7XG4gICAgICAgIHZhciBleHBpcmVkID0gZGlmZlRpbWUoZSkgPiBMT0dfSU5URVJWQUw7XG4gICAgICAgIHZhciBoYXNFeGNlZWRlZCA9IGV4Y2VlZGVkICE9PSAoZXhjZWVkZWQgPSBleGNlZWRlZExpbWl0KCkpO1xuXG4gICAgICAgIGlmIChleHBpcmVkIHx8IGhhc0V4Y2VlZGVkKSB7XG4gICAgICAgICAgc2F2ZShlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNsaWNrUHJldmVudGVkID0gdHJ1ZTtcbiAgICAgICAgZW1pdChFVkVOVF9EUkFHR0lORyk7XG4gICAgICAgIHByZXZlbnQoZSk7XG4gICAgICB9IGVsc2UgaWYgKGlzU2xpZGVyRGlyZWN0aW9uKGUpKSB7XG4gICAgICAgIGRyYWdnaW5nID0gc2hvdWxkU3RhcnQoZSk7XG4gICAgICAgIHByZXZlbnQoZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25Qb2ludGVyVXAoZSkge1xuICAgIGlmIChzdGF0ZS5pcyhEUkFHR0lORykpIHtcbiAgICAgIHN0YXRlLnNldChJRExFKTtcbiAgICAgIGVtaXQoRVZFTlRfRFJBR0dFRCk7XG4gICAgfVxuXG4gICAgaWYgKGRyYWdnaW5nKSB7XG4gICAgICBtb3ZlKGUpO1xuICAgICAgcHJldmVudChlKTtcbiAgICB9XG5cbiAgICB1bmJpbmQodGFyZ2V0LCBQT0lOVEVSX01PVkVfRVZFTlRTLCBvblBvaW50ZXJNb3ZlKTtcbiAgICB1bmJpbmQodGFyZ2V0LCBQT0lOVEVSX1VQX0VWRU5UUywgb25Qb2ludGVyVXApO1xuICAgIGRyYWdnaW5nID0gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiBvbkNsaWNrKGUpIHtcbiAgICBpZiAoIWRpc2FibGVkICYmIGNsaWNrUHJldmVudGVkKSB7XG4gICAgICBwcmV2ZW50KGUsIHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNhdmUoZSkge1xuICAgIHByZXZCYXNlRXZlbnQgPSBiYXNlRXZlbnQ7XG4gICAgYmFzZUV2ZW50ID0gZTtcbiAgICBiYXNlUG9zaXRpb24gPSBnZXRQb3NpdGlvbigpO1xuICB9XG5cbiAgZnVuY3Rpb24gbW92ZShlKSB7XG4gICAgdmFyIHZlbG9jaXR5ID0gY29tcHV0ZVZlbG9jaXR5KGUpO1xuICAgIHZhciBkZXN0aW5hdGlvbiA9IGNvbXB1dGVEZXN0aW5hdGlvbih2ZWxvY2l0eSk7XG4gICAgdmFyIHJld2luZCA9IG9wdGlvbnMucmV3aW5kICYmIG9wdGlvbnMucmV3aW5kQnlEcmFnO1xuICAgIHJlZHVjZShmYWxzZSk7XG5cbiAgICBpZiAoaXNGcmVlKSB7XG4gICAgICBDb250cm9sbGVyLnNjcm9sbChkZXN0aW5hdGlvbiwgMCwgb3B0aW9ucy5zbmFwKTtcbiAgICB9IGVsc2UgaWYgKFNwbGlkZTIuaXMoRkFERSkpIHtcbiAgICAgIENvbnRyb2xsZXIuZ28ob3JpZW50KHNpZ24odmVsb2NpdHkpKSA8IDAgPyByZXdpbmQgPyBcIjxcIiA6IFwiLVwiIDogcmV3aW5kID8gXCI+XCIgOiBcIitcIik7XG4gICAgfSBlbHNlIGlmIChTcGxpZGUyLmlzKFNMSURFKSAmJiBleGNlZWRlZCAmJiByZXdpbmQpIHtcbiAgICAgIENvbnRyb2xsZXIuZ28oZXhjZWVkZWRMaW1pdCh0cnVlKSA/IFwiPlwiIDogXCI8XCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBDb250cm9sbGVyLmdvKENvbnRyb2xsZXIudG9EZXN0KGRlc3RpbmF0aW9uKSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgcmVkdWNlKHRydWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2hvdWxkU3RhcnQoZSkge1xuICAgIHZhciB0aHJlc2hvbGRzID0gb3B0aW9ucy5kcmFnTWluVGhyZXNob2xkO1xuICAgIHZhciBpc09iaiA9IGlzT2JqZWN0KHRocmVzaG9sZHMpO1xuICAgIHZhciBtb3VzZSA9IGlzT2JqICYmIHRocmVzaG9sZHMubW91c2UgfHwgMDtcbiAgICB2YXIgdG91Y2ggPSAoaXNPYmogPyB0aHJlc2hvbGRzLnRvdWNoIDogK3RocmVzaG9sZHMpIHx8IDEwO1xuICAgIHJldHVybiBhYnMoZGlmZkNvb3JkKGUpKSA+IChpc1RvdWNoRXZlbnQoZSkgPyB0b3VjaCA6IG1vdXNlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzU2xpZGVyRGlyZWN0aW9uKGUpIHtcbiAgICByZXR1cm4gYWJzKGRpZmZDb29yZChlKSkgPiBhYnMoZGlmZkNvb3JkKGUsIHRydWUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbXB1dGVWZWxvY2l0eShlKSB7XG4gICAgaWYgKFNwbGlkZTIuaXMoTE9PUCkgfHwgIWV4Y2VlZGVkKSB7XG4gICAgICB2YXIgdGltZSA9IGRpZmZUaW1lKGUpO1xuXG4gICAgICBpZiAodGltZSAmJiB0aW1lIDwgTE9HX0lOVEVSVkFMKSB7XG4gICAgICAgIHJldHVybiBkaWZmQ29vcmQoZSkgLyB0aW1lO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAwO1xuICB9XG5cbiAgZnVuY3Rpb24gY29tcHV0ZURlc3RpbmF0aW9uKHZlbG9jaXR5KSB7XG4gICAgcmV0dXJuIGdldFBvc2l0aW9uKCkgKyBzaWduKHZlbG9jaXR5KSAqIG1pbihhYnModmVsb2NpdHkpICogKG9wdGlvbnMuZmxpY2tQb3dlciB8fCA2MDApLCBpc0ZyZWUgPyBJbmZpbml0eSA6IENvbXBvbmVudHMyLkxheW91dC5saXN0U2l6ZSgpICogKG9wdGlvbnMuZmxpY2tNYXhQYWdlcyB8fCAxKSk7XG4gIH1cblxuICBmdW5jdGlvbiBkaWZmQ29vcmQoZSwgb3J0aG9nb25hbCkge1xuICAgIHJldHVybiBjb29yZE9mKGUsIG9ydGhvZ29uYWwpIC0gY29vcmRPZihnZXRCYXNlRXZlbnQoZSksIG9ydGhvZ29uYWwpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGlmZlRpbWUoZSkge1xuICAgIHJldHVybiB0aW1lT2YoZSkgLSB0aW1lT2YoZ2V0QmFzZUV2ZW50KGUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEJhc2VFdmVudChlKSB7XG4gICAgcmV0dXJuIGJhc2VFdmVudCA9PT0gZSAmJiBwcmV2QmFzZUV2ZW50IHx8IGJhc2VFdmVudDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvb3JkT2YoZSwgb3J0aG9nb25hbCkge1xuICAgIHJldHVybiAoaXNUb3VjaEV2ZW50KGUpID8gZS5jaGFuZ2VkVG91Y2hlc1swXSA6IGUpW1wicGFnZVwiICsgcmVzb2x2ZShvcnRob2dvbmFsID8gXCJZXCIgOiBcIlhcIildO1xuICB9XG5cbiAgZnVuY3Rpb24gY29uc3RyYWluKGRpZmYpIHtcbiAgICByZXR1cm4gZGlmZiAvIChleGNlZWRlZCAmJiBTcGxpZGUyLmlzKFNMSURFKSA/IEZSSUNUSU9OIDogMSk7XG4gIH1cblxuICBmdW5jdGlvbiBpc0RyYWdnYWJsZSh0YXJnZXQyKSB7XG4gICAgdmFyIG5vRHJhZyA9IG9wdGlvbnMubm9EcmFnO1xuICAgIHJldHVybiAhbWF0Y2hlcyh0YXJnZXQyLCBcIi5cIiArIENMQVNTX1BBR0lOQVRJT05fUEFHRSArIFwiLCAuXCIgKyBDTEFTU19BUlJPVykgJiYgKCFub0RyYWcgfHwgIW1hdGNoZXModGFyZ2V0Miwgbm9EcmFnKSk7XG4gIH1cblxuICBmdW5jdGlvbiBpc1RvdWNoRXZlbnQoZSkge1xuICAgIHJldHVybiB0eXBlb2YgVG91Y2hFdmVudCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBlIGluc3RhbmNlb2YgVG91Y2hFdmVudDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzRHJhZ2dpbmcoKSB7XG4gICAgcmV0dXJuIGRyYWdnaW5nO1xuICB9XG5cbiAgZnVuY3Rpb24gZGlzYWJsZSh2YWx1ZSkge1xuICAgIGRpc2FibGVkID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG1vdW50OiBtb3VudCxcbiAgICBkaXNhYmxlOiBkaXNhYmxlLFxuICAgIGlzRHJhZ2dpbmc6IGlzRHJhZ2dpbmdcbiAgfTtcbn1cblxudmFyIE5PUk1BTElaQVRJT05fTUFQID0ge1xuICBTcGFjZWJhcjogXCIgXCIsXG4gIFJpZ2h0OiBBUlJPV19SSUdIVCxcbiAgTGVmdDogQVJST1dfTEVGVCxcbiAgVXA6IEFSUk9XX1VQLFxuICBEb3duOiBBUlJPV19ET1dOXG59O1xuXG5mdW5jdGlvbiBub3JtYWxpemVLZXkoa2V5KSB7XG4gIGtleSA9IGlzU3RyaW5nKGtleSkgPyBrZXkgOiBrZXkua2V5O1xuICByZXR1cm4gTk9STUFMSVpBVElPTl9NQVBba2V5XSB8fCBrZXk7XG59XG5cbnZhciBLRVlCT0FSRF9FVkVOVCA9IFwia2V5ZG93blwiO1xuXG5mdW5jdGlvbiBLZXlib2FyZChTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICB2YXIgX0V2ZW50SW50ZXJmYWNlMTAgPSBFdmVudEludGVyZmFjZShTcGxpZGUyKSxcbiAgICAgIG9uID0gX0V2ZW50SW50ZXJmYWNlMTAub24sXG4gICAgICBiaW5kID0gX0V2ZW50SW50ZXJmYWNlMTAuYmluZCxcbiAgICAgIHVuYmluZCA9IF9FdmVudEludGVyZmFjZTEwLnVuYmluZDtcblxuICB2YXIgcm9vdCA9IFNwbGlkZTIucm9vdDtcbiAgdmFyIHJlc29sdmUgPSBDb21wb25lbnRzMi5EaXJlY3Rpb24ucmVzb2x2ZTtcbiAgdmFyIHRhcmdldDtcbiAgdmFyIGRpc2FibGVkO1xuXG4gIGZ1bmN0aW9uIG1vdW50KCkge1xuICAgIGluaXQoKTtcbiAgICBvbihFVkVOVF9VUERBVEVELCBkZXN0cm95KTtcbiAgICBvbihFVkVOVF9VUERBVEVELCBpbml0KTtcbiAgICBvbihFVkVOVF9NT1ZFLCBvbk1vdmUpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICB2YXIga2V5Ym9hcmQgPSBvcHRpb25zLmtleWJvYXJkO1xuXG4gICAgaWYgKGtleWJvYXJkKSB7XG4gICAgICB0YXJnZXQgPSBrZXlib2FyZCA9PT0gXCJnbG9iYWxcIiA/IHdpbmRvdyA6IHJvb3Q7XG4gICAgICBiaW5kKHRhcmdldCwgS0VZQk9BUkRfRVZFTlQsIG9uS2V5ZG93bik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICB1bmJpbmQodGFyZ2V0LCBLRVlCT0FSRF9FVkVOVCk7XG4gIH1cblxuICBmdW5jdGlvbiBkaXNhYmxlKHZhbHVlKSB7XG4gICAgZGlzYWJsZWQgPSB2YWx1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uTW92ZSgpIHtcbiAgICB2YXIgX2Rpc2FibGVkID0gZGlzYWJsZWQ7XG4gICAgZGlzYWJsZWQgPSB0cnVlO1xuICAgIG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgIGRpc2FibGVkID0gX2Rpc2FibGVkO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gb25LZXlkb3duKGUpIHtcbiAgICBpZiAoIWRpc2FibGVkKSB7XG4gICAgICB2YXIga2V5ID0gbm9ybWFsaXplS2V5KGUpO1xuXG4gICAgICBpZiAoa2V5ID09PSByZXNvbHZlKEFSUk9XX0xFRlQpKSB7XG4gICAgICAgIFNwbGlkZTIuZ28oXCI8XCIpO1xuICAgICAgfSBlbHNlIGlmIChrZXkgPT09IHJlc29sdmUoQVJST1dfUklHSFQpKSB7XG4gICAgICAgIFNwbGlkZTIuZ28oXCI+XCIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbW91bnQ6IG1vdW50LFxuICAgIGRlc3Ryb3k6IGRlc3Ryb3ksXG4gICAgZGlzYWJsZTogZGlzYWJsZVxuICB9O1xufVxuXG52YXIgU1JDX0RBVEFfQVRUUklCVVRFID0gREFUQV9BVFRSSUJVVEUgKyBcIi1sYXp5XCI7XG52YXIgU1JDU0VUX0RBVEFfQVRUUklCVVRFID0gU1JDX0RBVEFfQVRUUklCVVRFICsgXCItc3Jjc2V0XCI7XG52YXIgSU1BR0VfU0VMRUNUT1IgPSBcIltcIiArIFNSQ19EQVRBX0FUVFJJQlVURSArIFwiXSwgW1wiICsgU1JDU0VUX0RBVEFfQVRUUklCVVRFICsgXCJdXCI7XG5cbmZ1bmN0aW9uIExhenlMb2FkKFNwbGlkZTIsIENvbXBvbmVudHMyLCBvcHRpb25zKSB7XG4gIHZhciBfRXZlbnRJbnRlcmZhY2UxMSA9IEV2ZW50SW50ZXJmYWNlKFNwbGlkZTIpLFxuICAgICAgb24gPSBfRXZlbnRJbnRlcmZhY2UxMS5vbixcbiAgICAgIG9mZiA9IF9FdmVudEludGVyZmFjZTExLm9mZixcbiAgICAgIGJpbmQgPSBfRXZlbnRJbnRlcmZhY2UxMS5iaW5kLFxuICAgICAgZW1pdCA9IF9FdmVudEludGVyZmFjZTExLmVtaXQ7XG5cbiAgdmFyIGlzU2VxdWVudGlhbCA9IG9wdGlvbnMubGF6eUxvYWQgPT09IFwic2VxdWVudGlhbFwiO1xuICB2YXIgZXZlbnRzID0gW0VWRU5UX01PVkVELCBFVkVOVF9TQ1JPTExFRF07XG4gIHZhciBlbnRyaWVzID0gW107XG5cbiAgZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgaWYgKG9wdGlvbnMubGF6eUxvYWQpIHtcbiAgICAgIGluaXQoKTtcbiAgICAgIG9uKEVWRU5UX1JFRlJFU0gsIGluaXQpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgZW1wdHkoZW50cmllcyk7XG4gICAgcmVnaXN0ZXIoKTtcblxuICAgIGlmIChpc1NlcXVlbnRpYWwpIHtcbiAgICAgIGxvYWROZXh0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9mZihldmVudHMpO1xuICAgICAgb24oZXZlbnRzLCBjaGVjayk7XG4gICAgICBjaGVjaygpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlZ2lzdGVyKCkge1xuICAgIENvbXBvbmVudHMyLlNsaWRlcy5mb3JFYWNoKGZ1bmN0aW9uIChTbGlkZSkge1xuICAgICAgcXVlcnlBbGwoU2xpZGUuc2xpZGUsIElNQUdFX1NFTEVDVE9SKS5mb3JFYWNoKGZ1bmN0aW9uIChpbWcpIHtcbiAgICAgICAgdmFyIHNyYyA9IGdldEF0dHJpYnV0ZShpbWcsIFNSQ19EQVRBX0FUVFJJQlVURSk7XG4gICAgICAgIHZhciBzcmNzZXQgPSBnZXRBdHRyaWJ1dGUoaW1nLCBTUkNTRVRfREFUQV9BVFRSSUJVVEUpO1xuXG4gICAgICAgIGlmIChzcmMgIT09IGltZy5zcmMgfHwgc3Jjc2V0ICE9PSBpbWcuc3Jjc2V0KSB7XG4gICAgICAgICAgdmFyIGNsYXNzTmFtZSA9IG9wdGlvbnMuY2xhc3Nlcy5zcGlubmVyO1xuICAgICAgICAgIHZhciBwYXJlbnQgPSBpbWcucGFyZW50RWxlbWVudDtcbiAgICAgICAgICB2YXIgc3Bpbm5lciA9IGNoaWxkKHBhcmVudCwgXCIuXCIgKyBjbGFzc05hbWUpIHx8IGNyZWF0ZShcInNwYW5cIiwgY2xhc3NOYW1lLCBwYXJlbnQpO1xuICAgICAgICAgIGVudHJpZXMucHVzaChbaW1nLCBTbGlkZSwgc3Bpbm5lcl0pO1xuICAgICAgICAgIGltZy5zcmMgfHwgZGlzcGxheShpbWcsIFwibm9uZVwiKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBjaGVjaygpIHtcbiAgICBlbnRyaWVzID0gZW50cmllcy5maWx0ZXIoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIHZhciBkaXN0YW5jZSA9IG9wdGlvbnMucGVyUGFnZSAqICgob3B0aW9ucy5wcmVsb2FkUGFnZXMgfHwgMSkgKyAxKSAtIDE7XG4gICAgICByZXR1cm4gZGF0YVsxXS5pc1dpdGhpbihTcGxpZGUyLmluZGV4LCBkaXN0YW5jZSkgPyBsb2FkKGRhdGEpIDogdHJ1ZTtcbiAgICB9KTtcbiAgICBlbnRyaWVzLmxlbmd0aCB8fCBvZmYoZXZlbnRzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxvYWQoZGF0YSkge1xuICAgIHZhciBpbWcgPSBkYXRhWzBdO1xuICAgIGFkZENsYXNzKGRhdGFbMV0uc2xpZGUsIENMQVNTX0xPQURJTkcpO1xuICAgIGJpbmQoaW1nLCBcImxvYWQgZXJyb3JcIiwgYXBwbHkob25Mb2FkLCBkYXRhKSk7XG4gICAgc2V0QXR0cmlidXRlKGltZywgXCJzcmNcIiwgZ2V0QXR0cmlidXRlKGltZywgU1JDX0RBVEFfQVRUUklCVVRFKSk7XG4gICAgc2V0QXR0cmlidXRlKGltZywgXCJzcmNzZXRcIiwgZ2V0QXR0cmlidXRlKGltZywgU1JDU0VUX0RBVEFfQVRUUklCVVRFKSk7XG4gICAgcmVtb3ZlQXR0cmlidXRlKGltZywgU1JDX0RBVEFfQVRUUklCVVRFKTtcbiAgICByZW1vdmVBdHRyaWJ1dGUoaW1nLCBTUkNTRVRfREFUQV9BVFRSSUJVVEUpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25Mb2FkKGRhdGEsIGUpIHtcbiAgICB2YXIgaW1nID0gZGF0YVswXSxcbiAgICAgICAgU2xpZGUgPSBkYXRhWzFdO1xuICAgIHJlbW92ZUNsYXNzKFNsaWRlLnNsaWRlLCBDTEFTU19MT0FESU5HKTtcblxuICAgIGlmIChlLnR5cGUgIT09IFwiZXJyb3JcIikge1xuICAgICAgcmVtb3ZlKGRhdGFbMl0pO1xuICAgICAgZGlzcGxheShpbWcsIFwiXCIpO1xuICAgICAgZW1pdChFVkVOVF9MQVpZTE9BRF9MT0FERUQsIGltZywgU2xpZGUpO1xuICAgICAgZW1pdChFVkVOVF9SRVNJWkUpO1xuICAgIH1cblxuICAgIGlzU2VxdWVudGlhbCAmJiBsb2FkTmV4dCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gbG9hZE5leHQoKSB7XG4gICAgZW50cmllcy5sZW5ndGggJiYgbG9hZChlbnRyaWVzLnNoaWZ0KCkpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBtb3VudDogbW91bnQsXG4gICAgZGVzdHJveTogYXBwbHkoZW1wdHksIGVudHJpZXMpLFxuICAgIGNoZWNrOiBjaGVja1xuICB9O1xufVxuXG5mdW5jdGlvbiBQYWdpbmF0aW9uKFNwbGlkZTIsIENvbXBvbmVudHMyLCBvcHRpb25zKSB7XG4gIHZhciBldmVudCA9IEV2ZW50SW50ZXJmYWNlKFNwbGlkZTIpO1xuICB2YXIgb24gPSBldmVudC5vbixcbiAgICAgIGVtaXQgPSBldmVudC5lbWl0LFxuICAgICAgYmluZCA9IGV2ZW50LmJpbmQ7XG4gIHZhciBTbGlkZXMgPSBDb21wb25lbnRzMi5TbGlkZXMsXG4gICAgICBFbGVtZW50cyA9IENvbXBvbmVudHMyLkVsZW1lbnRzLFxuICAgICAgQ29udHJvbGxlciA9IENvbXBvbmVudHMyLkNvbnRyb2xsZXI7XG4gIHZhciBoYXNGb2N1cyA9IENvbnRyb2xsZXIuaGFzRm9jdXMsXG4gICAgICBnZXRJbmRleCA9IENvbnRyb2xsZXIuZ2V0SW5kZXgsXG4gICAgICBnbyA9IENvbnRyb2xsZXIuZ287XG4gIHZhciByZXNvbHZlID0gQ29tcG9uZW50czIuRGlyZWN0aW9uLnJlc29sdmU7XG4gIHZhciBwbGFjZWhvbGRlciA9IEVsZW1lbnRzLnBhZ2luYXRpb247XG4gIHZhciBpdGVtcyA9IFtdO1xuICB2YXIgbGlzdDtcbiAgdmFyIHBhZ2luYXRpb25DbGFzc2VzO1xuXG4gIGZ1bmN0aW9uIG1vdW50KCkge1xuICAgIGRlc3Ryb3koKTtcbiAgICBvbihbRVZFTlRfVVBEQVRFRCwgRVZFTlRfUkVGUkVTSCwgRVZFTlRfRU5EX0lOREVYX0NIQU5HRURdLCBtb3VudCk7XG4gICAgdmFyIGVuYWJsZWQgPSBvcHRpb25zLnBhZ2luYXRpb247XG4gICAgcGxhY2Vob2xkZXIgJiYgZGlzcGxheShwbGFjZWhvbGRlciwgZW5hYmxlZCA/IFwiXCIgOiBcIm5vbmVcIik7XG5cbiAgICBpZiAoZW5hYmxlZCkge1xuICAgICAgb24oW0VWRU5UX01PVkUsIEVWRU5UX1NDUk9MTCwgRVZFTlRfU0NST0xMRURdLCB1cGRhdGUpO1xuICAgICAgY3JlYXRlUGFnaW5hdGlvbigpO1xuICAgICAgdXBkYXRlKCk7XG4gICAgICBlbWl0KEVWRU5UX1BBR0lOQVRJT05fTU9VTlRFRCwge1xuICAgICAgICBsaXN0OiBsaXN0LFxuICAgICAgICBpdGVtczogaXRlbXNcbiAgICAgIH0sIGdldEF0KFNwbGlkZTIuaW5kZXgpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIGlmIChsaXN0KSB7XG4gICAgICByZW1vdmUocGxhY2Vob2xkZXIgPyBzbGljZShsaXN0LmNoaWxkcmVuKSA6IGxpc3QpO1xuICAgICAgcmVtb3ZlQ2xhc3MobGlzdCwgcGFnaW5hdGlvbkNsYXNzZXMpO1xuICAgICAgZW1wdHkoaXRlbXMpO1xuICAgICAgbGlzdCA9IG51bGw7XG4gICAgfVxuXG4gICAgZXZlbnQuZGVzdHJveSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlUGFnaW5hdGlvbigpIHtcbiAgICB2YXIgbGVuZ3RoID0gU3BsaWRlMi5sZW5ndGg7XG4gICAgdmFyIGNsYXNzZXMgPSBvcHRpb25zLmNsYXNzZXMsXG4gICAgICAgIGkxOG4gPSBvcHRpb25zLmkxOG4sXG4gICAgICAgIHBlclBhZ2UgPSBvcHRpb25zLnBlclBhZ2U7XG4gICAgdmFyIG1heCA9IGhhc0ZvY3VzKCkgPyBDb250cm9sbGVyLmdldEVuZCgpICsgMSA6IGNlaWwobGVuZ3RoIC8gcGVyUGFnZSk7XG4gICAgbGlzdCA9IHBsYWNlaG9sZGVyIHx8IGNyZWF0ZShcInVsXCIsIGNsYXNzZXMucGFnaW5hdGlvbiwgRWxlbWVudHMudHJhY2sucGFyZW50RWxlbWVudCk7XG4gICAgYWRkQ2xhc3MobGlzdCwgcGFnaW5hdGlvbkNsYXNzZXMgPSBDTEFTU19QQUdJTkFUSU9OICsgXCItLVwiICsgZ2V0RGlyZWN0aW9uKCkpO1xuICAgIHNldEF0dHJpYnV0ZShsaXN0LCBST0xFLCBcInRhYmxpc3RcIik7XG4gICAgc2V0QXR0cmlidXRlKGxpc3QsIEFSSUFfTEFCRUwsIGkxOG4uc2VsZWN0KTtcbiAgICBzZXRBdHRyaWJ1dGUobGlzdCwgQVJJQV9PUklFTlRBVElPTiwgZ2V0RGlyZWN0aW9uKCkgPT09IFRUQiA/IFwidmVydGljYWxcIiA6IFwiXCIpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXg7IGkrKykge1xuICAgICAgdmFyIGxpID0gY3JlYXRlKFwibGlcIiwgbnVsbCwgbGlzdCk7XG4gICAgICB2YXIgYnV0dG9uID0gY3JlYXRlKFwiYnV0dG9uXCIsIHtcbiAgICAgICAgY2xhc3M6IGNsYXNzZXMucGFnZSxcbiAgICAgICAgdHlwZTogXCJidXR0b25cIlxuICAgICAgfSwgbGkpO1xuICAgICAgdmFyIGNvbnRyb2xzID0gU2xpZGVzLmdldEluKGkpLm1hcChmdW5jdGlvbiAoU2xpZGUpIHtcbiAgICAgICAgcmV0dXJuIFNsaWRlLnNsaWRlLmlkO1xuICAgICAgfSk7XG4gICAgICB2YXIgdGV4dCA9ICFoYXNGb2N1cygpICYmIHBlclBhZ2UgPiAxID8gaTE4bi5wYWdlWCA6IGkxOG4uc2xpZGVYO1xuICAgICAgYmluZChidXR0b24sIFwiY2xpY2tcIiwgYXBwbHkob25DbGljaywgaSkpO1xuXG4gICAgICBpZiAob3B0aW9ucy5wYWdpbmF0aW9uS2V5Ym9hcmQpIHtcbiAgICAgICAgYmluZChidXR0b24sIFwia2V5ZG93blwiLCBhcHBseShvbktleWRvd24sIGkpKTtcbiAgICAgIH1cblxuICAgICAgc2V0QXR0cmlidXRlKGxpLCBST0xFLCBcInByZXNlbnRhdGlvblwiKTtcbiAgICAgIHNldEF0dHJpYnV0ZShidXR0b24sIFJPTEUsIFwidGFiXCIpO1xuICAgICAgc2V0QXR0cmlidXRlKGJ1dHRvbiwgQVJJQV9DT05UUk9MUywgY29udHJvbHMuam9pbihcIiBcIikpO1xuICAgICAgc2V0QXR0cmlidXRlKGJ1dHRvbiwgQVJJQV9MQUJFTCwgZm9ybWF0KHRleHQsIGkgKyAxKSk7XG4gICAgICBzZXRBdHRyaWJ1dGUoYnV0dG9uLCBUQUJfSU5ERVgsIC0xKTtcbiAgICAgIGl0ZW1zLnB1c2goe1xuICAgICAgICBsaTogbGksXG4gICAgICAgIGJ1dHRvbjogYnV0dG9uLFxuICAgICAgICBwYWdlOiBpXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbkNsaWNrKHBhZ2UpIHtcbiAgICBnbyhcIj5cIiArIHBhZ2UsIHRydWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25LZXlkb3duKHBhZ2UsIGUpIHtcbiAgICB2YXIgbGVuZ3RoID0gaXRlbXMubGVuZ3RoO1xuICAgIHZhciBrZXkgPSBub3JtYWxpemVLZXkoZSk7XG4gICAgdmFyIGRpciA9IGdldERpcmVjdGlvbigpO1xuICAgIHZhciBuZXh0UGFnZSA9IC0xO1xuXG4gICAgaWYgKGtleSA9PT0gcmVzb2x2ZShBUlJPV19SSUdIVCwgZmFsc2UsIGRpcikpIHtcbiAgICAgIG5leHRQYWdlID0gKytwYWdlICUgbGVuZ3RoO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSByZXNvbHZlKEFSUk9XX0xFRlQsIGZhbHNlLCBkaXIpKSB7XG4gICAgICBuZXh0UGFnZSA9ICgtLXBhZ2UgKyBsZW5ndGgpICUgbGVuZ3RoO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSBcIkhvbWVcIikge1xuICAgICAgbmV4dFBhZ2UgPSAwO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSBcIkVuZFwiKSB7XG4gICAgICBuZXh0UGFnZSA9IGxlbmd0aCAtIDE7XG4gICAgfVxuXG4gICAgdmFyIGl0ZW0gPSBpdGVtc1tuZXh0UGFnZV07XG5cbiAgICBpZiAoaXRlbSkge1xuICAgICAgZm9jdXMoaXRlbS5idXR0b24pO1xuICAgICAgZ28oXCI+XCIgKyBuZXh0UGFnZSk7XG4gICAgICBwcmV2ZW50KGUsIHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldERpcmVjdGlvbigpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5wYWdpbmF0aW9uRGlyZWN0aW9uIHx8IG9wdGlvbnMuZGlyZWN0aW9uO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0QXQoaW5kZXgpIHtcbiAgICByZXR1cm4gaXRlbXNbQ29udHJvbGxlci50b1BhZ2UoaW5kZXgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICB2YXIgcHJldiA9IGdldEF0KGdldEluZGV4KHRydWUpKTtcbiAgICB2YXIgY3VyciA9IGdldEF0KGdldEluZGV4KCkpO1xuXG4gICAgaWYgKHByZXYpIHtcbiAgICAgIHZhciBidXR0b24gPSBwcmV2LmJ1dHRvbjtcbiAgICAgIHJlbW92ZUNsYXNzKGJ1dHRvbiwgQ0xBU1NfQUNUSVZFKTtcbiAgICAgIHJlbW92ZUF0dHJpYnV0ZShidXR0b24sIEFSSUFfU0VMRUNURUQpO1xuICAgICAgc2V0QXR0cmlidXRlKGJ1dHRvbiwgVEFCX0lOREVYLCAtMSk7XG4gICAgfVxuXG4gICAgaWYgKGN1cnIpIHtcbiAgICAgIHZhciBfYnV0dG9uID0gY3Vyci5idXR0b247XG4gICAgICBhZGRDbGFzcyhfYnV0dG9uLCBDTEFTU19BQ1RJVkUpO1xuICAgICAgc2V0QXR0cmlidXRlKF9idXR0b24sIEFSSUFfU0VMRUNURUQsIHRydWUpO1xuICAgICAgc2V0QXR0cmlidXRlKF9idXR0b24sIFRBQl9JTkRFWCwgXCJcIik7XG4gICAgfVxuXG4gICAgZW1pdChFVkVOVF9QQUdJTkFUSU9OX1VQREFURUQsIHtcbiAgICAgIGxpc3Q6IGxpc3QsXG4gICAgICBpdGVtczogaXRlbXNcbiAgICB9LCBwcmV2LCBjdXJyKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgaXRlbXM6IGl0ZW1zLFxuICAgIG1vdW50OiBtb3VudCxcbiAgICBkZXN0cm95OiBkZXN0cm95LFxuICAgIGdldEF0OiBnZXRBdCxcbiAgICB1cGRhdGU6IHVwZGF0ZVxuICB9O1xufVxuXG52YXIgVFJJR0dFUl9LRVlTID0gW1wiIFwiLCBcIkVudGVyXCJdO1xuXG5mdW5jdGlvbiBTeW5jKFNwbGlkZTIsIENvbXBvbmVudHMyLCBvcHRpb25zKSB7XG4gIHZhciBpc05hdmlnYXRpb24gPSBvcHRpb25zLmlzTmF2aWdhdGlvbixcbiAgICAgIHNsaWRlRm9jdXMgPSBvcHRpb25zLnNsaWRlRm9jdXM7XG4gIHZhciBldmVudHMgPSBbXTtcblxuICBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBTcGxpZGUyLnNwbGlkZXMuZm9yRWFjaChmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICBpZiAoIXRhcmdldC5pc1BhcmVudCkge1xuICAgICAgICBzeW5jKFNwbGlkZTIsIHRhcmdldC5zcGxpZGUpO1xuICAgICAgICBzeW5jKHRhcmdldC5zcGxpZGUsIFNwbGlkZTIpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKGlzTmF2aWdhdGlvbikge1xuICAgICAgbmF2aWdhdGUoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIGV2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgZXZlbnQuZGVzdHJveSgpO1xuICAgIH0pO1xuICAgIGVtcHR5KGV2ZW50cyk7XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdW50KCkge1xuICAgIGRlc3Ryb3koKTtcbiAgICBtb3VudCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3luYyhzcGxpZGUsIHRhcmdldCkge1xuICAgIHZhciBldmVudCA9IEV2ZW50SW50ZXJmYWNlKHNwbGlkZSk7XG4gICAgZXZlbnQub24oRVZFTlRfTU9WRSwgZnVuY3Rpb24gKGluZGV4LCBwcmV2LCBkZXN0KSB7XG4gICAgICB0YXJnZXQuZ28odGFyZ2V0LmlzKExPT1ApID8gZGVzdCA6IGluZGV4KTtcbiAgICB9KTtcbiAgICBldmVudHMucHVzaChldmVudCk7XG4gIH1cblxuICBmdW5jdGlvbiBuYXZpZ2F0ZSgpIHtcbiAgICB2YXIgZXZlbnQgPSBFdmVudEludGVyZmFjZShTcGxpZGUyKTtcbiAgICB2YXIgb24gPSBldmVudC5vbjtcbiAgICBvbihFVkVOVF9DTElDSywgb25DbGljayk7XG4gICAgb24oRVZFTlRfU0xJREVfS0VZRE9XTiwgb25LZXlkb3duKTtcbiAgICBvbihbRVZFTlRfTU9VTlRFRCwgRVZFTlRfVVBEQVRFRF0sIHVwZGF0ZSk7XG4gICAgZXZlbnRzLnB1c2goZXZlbnQpO1xuICAgIGV2ZW50LmVtaXQoRVZFTlRfTkFWSUdBVElPTl9NT1VOVEVELCBTcGxpZGUyLnNwbGlkZXMpO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIHNldEF0dHJpYnV0ZShDb21wb25lbnRzMi5FbGVtZW50cy5saXN0LCBBUklBX09SSUVOVEFUSU9OLCBvcHRpb25zLmRpcmVjdGlvbiA9PT0gVFRCID8gXCJ2ZXJ0aWNhbFwiIDogXCJcIik7XG4gIH1cblxuICBmdW5jdGlvbiBvbkNsaWNrKFNsaWRlKSB7XG4gICAgU3BsaWRlMi5nbyhTbGlkZS5pbmRleCk7XG4gIH1cblxuICBmdW5jdGlvbiBvbktleWRvd24oU2xpZGUsIGUpIHtcbiAgICBpZiAoaW5jbHVkZXMoVFJJR0dFUl9LRVlTLCBub3JtYWxpemVLZXkoZSkpKSB7XG4gICAgICBvbkNsaWNrKFNsaWRlKTtcbiAgICAgIHByZXZlbnQoZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzZXR1cDogYXBwbHkoQ29tcG9uZW50czIuTWVkaWEuc2V0LCB7XG4gICAgICBzbGlkZUZvY3VzOiBpc1VuZGVmaW5lZChzbGlkZUZvY3VzKSA/IGlzTmF2aWdhdGlvbiA6IHNsaWRlRm9jdXNcbiAgICB9LCB0cnVlKSxcbiAgICBtb3VudDogbW91bnQsXG4gICAgZGVzdHJveTogZGVzdHJveSxcbiAgICByZW1vdW50OiByZW1vdW50XG4gIH07XG59XG5cbmZ1bmN0aW9uIFdoZWVsKFNwbGlkZTIsIENvbXBvbmVudHMyLCBvcHRpb25zKSB7XG4gIHZhciBfRXZlbnRJbnRlcmZhY2UxMiA9IEV2ZW50SW50ZXJmYWNlKFNwbGlkZTIpLFxuICAgICAgYmluZCA9IF9FdmVudEludGVyZmFjZTEyLmJpbmQ7XG5cbiAgdmFyIGxhc3RUaW1lID0gMDtcblxuICBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBpZiAob3B0aW9ucy53aGVlbCkge1xuICAgICAgYmluZChDb21wb25lbnRzMi5FbGVtZW50cy50cmFjaywgXCJ3aGVlbFwiLCBvbldoZWVsLCBTQ1JPTExfTElTVEVORVJfT1BUSU9OUyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25XaGVlbChlKSB7XG4gICAgaWYgKGUuY2FuY2VsYWJsZSkge1xuICAgICAgdmFyIGRlbHRhWSA9IGUuZGVsdGFZO1xuICAgICAgdmFyIGJhY2t3YXJkcyA9IGRlbHRhWSA8IDA7XG4gICAgICB2YXIgdGltZVN0YW1wID0gdGltZU9mKGUpO1xuXG4gICAgICB2YXIgX21pbiA9IG9wdGlvbnMud2hlZWxNaW5UaHJlc2hvbGQgfHwgMDtcblxuICAgICAgdmFyIHNsZWVwID0gb3B0aW9ucy53aGVlbFNsZWVwIHx8IDA7XG5cbiAgICAgIGlmIChhYnMoZGVsdGFZKSA+IF9taW4gJiYgdGltZVN0YW1wIC0gbGFzdFRpbWUgPiBzbGVlcCkge1xuICAgICAgICBTcGxpZGUyLmdvKGJhY2t3YXJkcyA/IFwiPFwiIDogXCI+XCIpO1xuICAgICAgICBsYXN0VGltZSA9IHRpbWVTdGFtcDtcbiAgICAgIH1cblxuICAgICAgc2hvdWxkUHJldmVudChiYWNrd2FyZHMpICYmIHByZXZlbnQoZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2hvdWxkUHJldmVudChiYWNrd2FyZHMpIHtcbiAgICByZXR1cm4gIW9wdGlvbnMucmVsZWFzZVdoZWVsIHx8IFNwbGlkZTIuc3RhdGUuaXMoTU9WSU5HKSB8fCBDb21wb25lbnRzMi5Db250cm9sbGVyLmdldEFkamFjZW50KGJhY2t3YXJkcykgIT09IC0xO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBtb3VudDogbW91bnRcbiAgfTtcbn1cblxudmFyIFNSX1JFTU9WQUxfREVMQVkgPSA5MDtcblxuZnVuY3Rpb24gTGl2ZShTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICB2YXIgX0V2ZW50SW50ZXJmYWNlMTMgPSBFdmVudEludGVyZmFjZShTcGxpZGUyKSxcbiAgICAgIG9uID0gX0V2ZW50SW50ZXJmYWNlMTMub247XG5cbiAgdmFyIHRyYWNrID0gQ29tcG9uZW50czIuRWxlbWVudHMudHJhY2s7XG4gIHZhciBlbmFibGVkID0gb3B0aW9ucy5saXZlICYmICFvcHRpb25zLmlzTmF2aWdhdGlvbjtcbiAgdmFyIHNyID0gY3JlYXRlKFwic3BhblwiLCBDTEFTU19TUik7XG4gIHZhciBpbnRlcnZhbCA9IFJlcXVlc3RJbnRlcnZhbChTUl9SRU1PVkFMX0RFTEFZLCBhcHBseSh0b2dnbGUsIGZhbHNlKSk7XG5cbiAgZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgaWYgKGVuYWJsZWQpIHtcbiAgICAgIGRpc2FibGUoIUNvbXBvbmVudHMyLkF1dG9wbGF5LmlzUGF1c2VkKCkpO1xuICAgICAgc2V0QXR0cmlidXRlKHRyYWNrLCBBUklBX0FUT01JQywgdHJ1ZSk7XG4gICAgICBzci50ZXh0Q29udGVudCA9IFwiXFx1MjAyNlwiO1xuICAgICAgb24oRVZFTlRfQVVUT1BMQVlfUExBWSwgYXBwbHkoZGlzYWJsZSwgdHJ1ZSkpO1xuICAgICAgb24oRVZFTlRfQVVUT1BMQVlfUEFVU0UsIGFwcGx5KGRpc2FibGUsIGZhbHNlKSk7XG4gICAgICBvbihbRVZFTlRfTU9WRUQsIEVWRU5UX1NDUk9MTEVEXSwgYXBwbHkodG9nZ2xlLCB0cnVlKSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdG9nZ2xlKGFjdGl2ZSkge1xuICAgIHNldEF0dHJpYnV0ZSh0cmFjaywgQVJJQV9CVVNZLCBhY3RpdmUpO1xuXG4gICAgaWYgKGFjdGl2ZSkge1xuICAgICAgYXBwZW5kKHRyYWNrLCBzcik7XG4gICAgICBpbnRlcnZhbC5zdGFydCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmUoc3IpO1xuICAgICAgaW50ZXJ2YWwuY2FuY2VsKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICByZW1vdmVBdHRyaWJ1dGUodHJhY2ssIFtBUklBX0xJVkUsIEFSSUFfQVRPTUlDLCBBUklBX0JVU1ldKTtcbiAgICByZW1vdmUoc3IpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGlzYWJsZShkaXNhYmxlZCkge1xuICAgIGlmIChlbmFibGVkKSB7XG4gICAgICBzZXRBdHRyaWJ1dGUodHJhY2ssIEFSSUFfTElWRSwgZGlzYWJsZWQgPyBcIm9mZlwiIDogXCJwb2xpdGVcIik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBtb3VudDogbW91bnQsXG4gICAgZGlzYWJsZTogZGlzYWJsZSxcbiAgICBkZXN0cm95OiBkZXN0cm95XG4gIH07XG59XG5cbnZhciBDb21wb25lbnRDb25zdHJ1Y3RvcnMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgTWVkaWE6IE1lZGlhLFxuICBEaXJlY3Rpb246IERpcmVjdGlvbixcbiAgRWxlbWVudHM6IEVsZW1lbnRzLFxuICBTbGlkZXM6IFNsaWRlcyxcbiAgTGF5b3V0OiBMYXlvdXQsXG4gIENsb25lczogQ2xvbmVzLFxuICBNb3ZlOiBNb3ZlLFxuICBDb250cm9sbGVyOiBDb250cm9sbGVyLFxuICBBcnJvd3M6IEFycm93cyxcbiAgQXV0b3BsYXk6IEF1dG9wbGF5LFxuICBDb3ZlcjogQ292ZXIsXG4gIFNjcm9sbDogU2Nyb2xsLFxuICBEcmFnOiBEcmFnLFxuICBLZXlib2FyZDogS2V5Ym9hcmQsXG4gIExhenlMb2FkOiBMYXp5TG9hZCxcbiAgUGFnaW5hdGlvbjogUGFnaW5hdGlvbixcbiAgU3luYzogU3luYyxcbiAgV2hlZWw6IFdoZWVsLFxuICBMaXZlOiBMaXZlXG59KTtcbnZhciBJMThOID0ge1xuICBwcmV2OiBcIlByZXZpb3VzIHNsaWRlXCIsXG4gIG5leHQ6IFwiTmV4dCBzbGlkZVwiLFxuICBmaXJzdDogXCJHbyB0byBmaXJzdCBzbGlkZVwiLFxuICBsYXN0OiBcIkdvIHRvIGxhc3Qgc2xpZGVcIixcbiAgc2xpZGVYOiBcIkdvIHRvIHNsaWRlICVzXCIsXG4gIHBhZ2VYOiBcIkdvIHRvIHBhZ2UgJXNcIixcbiAgcGxheTogXCJTdGFydCBhdXRvcGxheVwiLFxuICBwYXVzZTogXCJQYXVzZSBhdXRvcGxheVwiLFxuICBjYXJvdXNlbDogXCJjYXJvdXNlbFwiLFxuICBzbGlkZTogXCJzbGlkZVwiLFxuICBzZWxlY3Q6IFwiU2VsZWN0IGEgc2xpZGUgdG8gc2hvd1wiLFxuICBzbGlkZUxhYmVsOiBcIiVzIG9mICVzXCJcbn07XG52YXIgREVGQVVMVFMgPSB7XG4gIHR5cGU6IFwic2xpZGVcIixcbiAgcm9sZTogXCJyZWdpb25cIixcbiAgc3BlZWQ6IDQwMCxcbiAgcGVyUGFnZTogMSxcbiAgY2xvbmVTdGF0dXM6IHRydWUsXG4gIGFycm93czogdHJ1ZSxcbiAgcGFnaW5hdGlvbjogdHJ1ZSxcbiAgcGFnaW5hdGlvbktleWJvYXJkOiB0cnVlLFxuICBpbnRlcnZhbDogNWUzLFxuICBwYXVzZU9uSG92ZXI6IHRydWUsXG4gIHBhdXNlT25Gb2N1czogdHJ1ZSxcbiAgcmVzZXRQcm9ncmVzczogdHJ1ZSxcbiAgZWFzaW5nOiBcImN1YmljLWJlemllcigwLjI1LCAxLCAwLjUsIDEpXCIsXG4gIGRyYWc6IHRydWUsXG4gIGRpcmVjdGlvbjogXCJsdHJcIixcbiAgdHJpbVNwYWNlOiB0cnVlLFxuICBmb2N1c2FibGVOb2RlczogXCJhLCBidXR0b24sIHRleHRhcmVhLCBpbnB1dCwgc2VsZWN0LCBpZnJhbWVcIixcbiAgbGl2ZTogdHJ1ZSxcbiAgY2xhc3NlczogQ0xBU1NFUyxcbiAgaTE4bjogSTE4TixcbiAgcmVkdWNlZE1vdGlvbjoge1xuICAgIHNwZWVkOiAwLFxuICAgIHJld2luZFNwZWVkOiAwLFxuICAgIGF1dG9wbGF5OiBcInBhdXNlXCJcbiAgfVxufTtcblxuZnVuY3Rpb24gRmFkZShTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICB2YXIgU2xpZGVzID0gQ29tcG9uZW50czIuU2xpZGVzO1xuXG4gIGZ1bmN0aW9uIG1vdW50KCkge1xuICAgIEV2ZW50SW50ZXJmYWNlKFNwbGlkZTIpLm9uKFtFVkVOVF9NT1VOVEVELCBFVkVOVF9SRUZSRVNIXSwgaW5pdCk7XG4gIH1cblxuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIFNsaWRlcy5mb3JFYWNoKGZ1bmN0aW9uIChTbGlkZSkge1xuICAgICAgU2xpZGUuc3R5bGUoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGVYKC1cIiArIDEwMCAqIFNsaWRlLmluZGV4ICsgXCIlKVwiKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0YXJ0KGluZGV4LCBkb25lKSB7XG4gICAgU2xpZGVzLnN0eWxlKFwidHJhbnNpdGlvblwiLCBcIm9wYWNpdHkgXCIgKyBvcHRpb25zLnNwZWVkICsgXCJtcyBcIiArIG9wdGlvbnMuZWFzaW5nKTtcbiAgICBuZXh0VGljayhkb25lKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbW91bnQ6IG1vdW50LFxuICAgIHN0YXJ0OiBzdGFydCxcbiAgICBjYW5jZWw6IG5vb3BcbiAgfTtcbn1cblxuZnVuY3Rpb24gU2xpZGUoU3BsaWRlMiwgQ29tcG9uZW50czIsIG9wdGlvbnMpIHtcbiAgdmFyIE1vdmUgPSBDb21wb25lbnRzMi5Nb3ZlLFxuICAgICAgQ29udHJvbGxlciA9IENvbXBvbmVudHMyLkNvbnRyb2xsZXIsXG4gICAgICBTY3JvbGwgPSBDb21wb25lbnRzMi5TY3JvbGw7XG4gIHZhciBsaXN0ID0gQ29tcG9uZW50czIuRWxlbWVudHMubGlzdDtcbiAgdmFyIHRyYW5zaXRpb24gPSBhcHBseShzdHlsZSwgbGlzdCwgXCJ0cmFuc2l0aW9uXCIpO1xuICB2YXIgZW5kQ2FsbGJhY2s7XG5cbiAgZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgRXZlbnRJbnRlcmZhY2UoU3BsaWRlMikuYmluZChsaXN0LCBcInRyYW5zaXRpb25lbmRcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChlLnRhcmdldCA9PT0gbGlzdCAmJiBlbmRDYWxsYmFjaykge1xuICAgICAgICBjYW5jZWwoKTtcbiAgICAgICAgZW5kQ2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0YXJ0KGluZGV4LCBkb25lKSB7XG4gICAgdmFyIGRlc3RpbmF0aW9uID0gTW92ZS50b1Bvc2l0aW9uKGluZGV4LCB0cnVlKTtcbiAgICB2YXIgcG9zaXRpb24gPSBNb3ZlLmdldFBvc2l0aW9uKCk7XG4gICAgdmFyIHNwZWVkID0gZ2V0U3BlZWQoaW5kZXgpO1xuXG4gICAgaWYgKGFicyhkZXN0aW5hdGlvbiAtIHBvc2l0aW9uKSA+PSAxICYmIHNwZWVkID49IDEpIHtcbiAgICAgIGlmIChvcHRpb25zLnVzZVNjcm9sbCkge1xuICAgICAgICBTY3JvbGwuc2Nyb2xsKGRlc3RpbmF0aW9uLCBzcGVlZCwgZmFsc2UsIGRvbmUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJhbnNpdGlvbihcInRyYW5zZm9ybSBcIiArIHNwZWVkICsgXCJtcyBcIiArIG9wdGlvbnMuZWFzaW5nKTtcbiAgICAgICAgTW92ZS50cmFuc2xhdGUoZGVzdGluYXRpb24sIHRydWUpO1xuICAgICAgICBlbmRDYWxsYmFjayA9IGRvbmU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIE1vdmUuanVtcChpbmRleCk7XG4gICAgICBkb25lKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgIHRyYW5zaXRpb24oXCJcIik7XG4gICAgU2Nyb2xsLmNhbmNlbCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0U3BlZWQoaW5kZXgpIHtcbiAgICB2YXIgcmV3aW5kU3BlZWQgPSBvcHRpb25zLnJld2luZFNwZWVkO1xuXG4gICAgaWYgKFNwbGlkZTIuaXMoU0xJREUpICYmIHJld2luZFNwZWVkKSB7XG4gICAgICB2YXIgcHJldiA9IENvbnRyb2xsZXIuZ2V0SW5kZXgodHJ1ZSk7XG4gICAgICB2YXIgZW5kID0gQ29udHJvbGxlci5nZXRFbmQoKTtcblxuICAgICAgaWYgKHByZXYgPT09IDAgJiYgaW5kZXggPj0gZW5kIHx8IHByZXYgPj0gZW5kICYmIGluZGV4ID09PSAwKSB7XG4gICAgICAgIHJldHVybiByZXdpbmRTcGVlZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb3B0aW9ucy5zcGVlZDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbW91bnQ6IG1vdW50LFxuICAgIHN0YXJ0OiBzdGFydCxcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufVxuXG52YXIgX1NwbGlkZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIF9TcGxpZGUodGFyZ2V0LCBvcHRpb25zKSB7XG4gICAgdGhpcy5ldmVudCA9IEV2ZW50SW50ZXJmYWNlKCk7XG4gICAgdGhpcy5Db21wb25lbnRzID0ge307XG4gICAgdGhpcy5zdGF0ZSA9IFN0YXRlKENSRUFURUQpO1xuICAgIHRoaXMuc3BsaWRlcyA9IFtdO1xuICAgIHRoaXMuX28gPSB7fTtcbiAgICB0aGlzLl9FID0ge307XG4gICAgdmFyIHJvb3QgPSBpc1N0cmluZyh0YXJnZXQpID8gcXVlcnkoZG9jdW1lbnQsIHRhcmdldCkgOiB0YXJnZXQ7XG4gICAgYXNzZXJ0KHJvb3QsIHJvb3QgKyBcIiBpcyBpbnZhbGlkLlwiKTtcbiAgICB0aGlzLnJvb3QgPSByb290O1xuICAgIG9wdGlvbnMgPSBtZXJnZSh7XG4gICAgICBsYWJlbDogZ2V0QXR0cmlidXRlKHJvb3QsIEFSSUFfTEFCRUwpIHx8IFwiXCIsXG4gICAgICBsYWJlbGxlZGJ5OiBnZXRBdHRyaWJ1dGUocm9vdCwgQVJJQV9MQUJFTExFREJZKSB8fCBcIlwiXG4gICAgfSwgREVGQVVMVFMsIF9TcGxpZGUuZGVmYXVsdHMsIG9wdGlvbnMgfHwge30pO1xuXG4gICAgdHJ5IHtcbiAgICAgIG1lcmdlKG9wdGlvbnMsIEpTT04ucGFyc2UoZ2V0QXR0cmlidXRlKHJvb3QsIERBVEFfQVRUUklCVVRFKSkpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGFzc2VydChmYWxzZSwgXCJJbnZhbGlkIEpTT05cIik7XG4gICAgfVxuXG4gICAgdGhpcy5fbyA9IE9iamVjdC5jcmVhdGUobWVyZ2Uoe30sIG9wdGlvbnMpKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBfU3BsaWRlLnByb3RvdHlwZTtcblxuICBfcHJvdG8ubW91bnQgPSBmdW5jdGlvbiBtb3VudChFeHRlbnNpb25zLCBUcmFuc2l0aW9uKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGUsXG4gICAgICAgIENvbXBvbmVudHMyID0gdGhpcy5Db21wb25lbnRzO1xuICAgIGFzc2VydChzdGF0ZS5pcyhbQ1JFQVRFRCwgREVTVFJPWUVEXSksIFwiQWxyZWFkeSBtb3VudGVkIVwiKTtcbiAgICBzdGF0ZS5zZXQoQ1JFQVRFRCk7XG4gICAgdGhpcy5fQyA9IENvbXBvbmVudHMyO1xuICAgIHRoaXMuX1QgPSBUcmFuc2l0aW9uIHx8IHRoaXMuX1QgfHwgKHRoaXMuaXMoRkFERSkgPyBGYWRlIDogU2xpZGUpO1xuICAgIHRoaXMuX0UgPSBFeHRlbnNpb25zIHx8IHRoaXMuX0U7XG4gICAgdmFyIENvbnN0cnVjdG9ycyA9IGFzc2lnbih7fSwgQ29tcG9uZW50Q29uc3RydWN0b3JzLCB0aGlzLl9FLCB7XG4gICAgICBUcmFuc2l0aW9uOiB0aGlzLl9UXG4gICAgfSk7XG4gICAgZm9yT3duKENvbnN0cnVjdG9ycywgZnVuY3Rpb24gKENvbXBvbmVudCwga2V5KSB7XG4gICAgICB2YXIgY29tcG9uZW50ID0gQ29tcG9uZW50KF90aGlzLCBDb21wb25lbnRzMiwgX3RoaXMuX28pO1xuICAgICAgQ29tcG9uZW50czJba2V5XSA9IGNvbXBvbmVudDtcbiAgICAgIGNvbXBvbmVudC5zZXR1cCAmJiBjb21wb25lbnQuc2V0dXAoKTtcbiAgICB9KTtcbiAgICBmb3JPd24oQ29tcG9uZW50czIsIGZ1bmN0aW9uIChjb21wb25lbnQpIHtcbiAgICAgIGNvbXBvbmVudC5tb3VudCAmJiBjb21wb25lbnQubW91bnQoKTtcbiAgICB9KTtcbiAgICB0aGlzLmVtaXQoRVZFTlRfTU9VTlRFRCk7XG4gICAgYWRkQ2xhc3ModGhpcy5yb290LCBDTEFTU19JTklUSUFMSVpFRCk7XG4gICAgc3RhdGUuc2V0KElETEUpO1xuICAgIHRoaXMuZW1pdChFVkVOVF9SRUFEWSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLnN5bmMgPSBmdW5jdGlvbiBzeW5jKHNwbGlkZSkge1xuICAgIHRoaXMuc3BsaWRlcy5wdXNoKHtcbiAgICAgIHNwbGlkZTogc3BsaWRlXG4gICAgfSk7XG4gICAgc3BsaWRlLnNwbGlkZXMucHVzaCh7XG4gICAgICBzcGxpZGU6IHRoaXMsXG4gICAgICBpc1BhcmVudDogdHJ1ZVxuICAgIH0pO1xuXG4gICAgaWYgKHRoaXMuc3RhdGUuaXMoSURMRSkpIHtcbiAgICAgIHRoaXMuX0MuU3luYy5yZW1vdW50KCk7XG5cbiAgICAgIHNwbGlkZS5Db21wb25lbnRzLlN5bmMucmVtb3VudCgpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5nbyA9IGZ1bmN0aW9uIGdvKGNvbnRyb2wpIHtcbiAgICB0aGlzLl9DLkNvbnRyb2xsZXIuZ28oY29udHJvbCk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8ub24gPSBmdW5jdGlvbiBvbihldmVudHMsIGNhbGxiYWNrKSB7XG4gICAgdGhpcy5ldmVudC5vbihldmVudHMsIGNhbGxiYWNrKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8ub2ZmID0gZnVuY3Rpb24gb2ZmKGV2ZW50cykge1xuICAgIHRoaXMuZXZlbnQub2ZmKGV2ZW50cyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLmVtaXQgPSBmdW5jdGlvbiBlbWl0KGV2ZW50KSB7XG4gICAgdmFyIF90aGlzJGV2ZW50O1xuXG4gICAgKF90aGlzJGV2ZW50ID0gdGhpcy5ldmVudCkuZW1pdC5hcHBseShfdGhpcyRldmVudCwgW2V2ZW50XS5jb25jYXQoc2xpY2UoYXJndW1lbnRzLCAxKSkpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLmFkZCA9IGZ1bmN0aW9uIGFkZChzbGlkZXMsIGluZGV4KSB7XG4gICAgdGhpcy5fQy5TbGlkZXMuYWRkKHNsaWRlcywgaW5kZXgpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLnJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZShtYXRjaGVyKSB7XG4gICAgdGhpcy5fQy5TbGlkZXMucmVtb3ZlKG1hdGNoZXIpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLmlzID0gZnVuY3Rpb24gaXModHlwZSkge1xuICAgIHJldHVybiB0aGlzLl9vLnR5cGUgPT09IHR5cGU7XG4gIH07XG5cbiAgX3Byb3RvLnJlZnJlc2ggPSBmdW5jdGlvbiByZWZyZXNoKCkge1xuICAgIHRoaXMuZW1pdChFVkVOVF9SRUZSRVNIKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3koY29tcGxldGVseSkge1xuICAgIGlmIChjb21wbGV0ZWx5ID09PSB2b2lkIDApIHtcbiAgICAgIGNvbXBsZXRlbHkgPSB0cnVlO1xuICAgIH1cblxuICAgIHZhciBldmVudCA9IHRoaXMuZXZlbnQsXG4gICAgICAgIHN0YXRlID0gdGhpcy5zdGF0ZTtcblxuICAgIGlmIChzdGF0ZS5pcyhDUkVBVEVEKSkge1xuICAgICAgRXZlbnRJbnRlcmZhY2UodGhpcykub24oRVZFTlRfUkVBRFksIHRoaXMuZGVzdHJveS5iaW5kKHRoaXMsIGNvbXBsZXRlbHkpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yT3duKHRoaXMuX0MsIGZ1bmN0aW9uIChjb21wb25lbnQpIHtcbiAgICAgICAgY29tcG9uZW50LmRlc3Ryb3kgJiYgY29tcG9uZW50LmRlc3Ryb3koY29tcGxldGVseSk7XG4gICAgICB9LCB0cnVlKTtcbiAgICAgIGV2ZW50LmVtaXQoRVZFTlRfREVTVFJPWSk7XG4gICAgICBldmVudC5kZXN0cm95KCk7XG4gICAgICBjb21wbGV0ZWx5ICYmIGVtcHR5KHRoaXMuc3BsaWRlcyk7XG4gICAgICBzdGF0ZS5zZXQoREVTVFJPWUVEKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfY3JlYXRlQ2xhc3MoX1NwbGlkZSwgW3tcbiAgICBrZXk6IFwib3B0aW9uc1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX287XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChvcHRpb25zKSB7XG4gICAgICB0aGlzLl9DLk1lZGlhLnNldChvcHRpb25zLCB0cnVlLCB0cnVlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibGVuZ3RoXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fQy5TbGlkZXMuZ2V0TGVuZ3RoKHRydWUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpbmRleFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX0MuQ29udHJvbGxlci5nZXRJbmRleCgpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBfU3BsaWRlO1xufSgpO1xuXG52YXIgU3BsaWRlID0gX1NwbGlkZTtcblNwbGlkZS5kZWZhdWx0cyA9IHt9O1xuU3BsaWRlLlNUQVRFUyA9IFNUQVRFUztcbnZhciBDTEFTU19SRU5ERVJFRCA9IFwiaXMtcmVuZGVyZWRcIjtcbnZhciBSRU5ERVJFUl9ERUZBVUxUX0NPTkZJRyA9IHtcbiAgbGlzdFRhZzogXCJ1bFwiLFxuICBzbGlkZVRhZzogXCJsaVwiXG59O1xuXG52YXIgU3R5bGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdHlsZShpZCwgb3B0aW9ucykge1xuICAgIHRoaXMuc3R5bGVzID0ge307XG4gICAgdGhpcy5pZCA9IGlkO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cblxuICB2YXIgX3Byb3RvMiA9IFN0eWxlLnByb3RvdHlwZTtcblxuICBfcHJvdG8yLnJ1bGUgPSBmdW5jdGlvbiBydWxlKHNlbGVjdG9yLCBwcm9wLCB2YWx1ZSwgYnJlYWtwb2ludCkge1xuICAgIGJyZWFrcG9pbnQgPSBicmVha3BvaW50IHx8IFwiZGVmYXVsdFwiO1xuICAgIHZhciBzZWxlY3RvcnMgPSB0aGlzLnN0eWxlc1ticmVha3BvaW50XSA9IHRoaXMuc3R5bGVzW2JyZWFrcG9pbnRdIHx8IHt9O1xuICAgIHZhciBzdHlsZXMgPSBzZWxlY3RvcnNbc2VsZWN0b3JdID0gc2VsZWN0b3JzW3NlbGVjdG9yXSB8fCB7fTtcbiAgICBzdHlsZXNbcHJvcF0gPSB2YWx1ZTtcbiAgfTtcblxuICBfcHJvdG8yLmJ1aWxkID0gZnVuY3Rpb24gYnVpbGQoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgY3NzID0gXCJcIjtcblxuICAgIGlmICh0aGlzLnN0eWxlcy5kZWZhdWx0KSB7XG4gICAgICBjc3MgKz0gdGhpcy5idWlsZFNlbGVjdG9ycyh0aGlzLnN0eWxlcy5kZWZhdWx0KTtcbiAgICB9XG5cbiAgICBPYmplY3Qua2V5cyh0aGlzLnN0eWxlcykuc29ydChmdW5jdGlvbiAobiwgbSkge1xuICAgICAgcmV0dXJuIF90aGlzMi5vcHRpb25zLm1lZGlhUXVlcnkgPT09IFwibWluXCIgPyArbiAtICttIDogK20gLSArbjtcbiAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChicmVha3BvaW50KSB7XG4gICAgICBpZiAoYnJlYWtwb2ludCAhPT0gXCJkZWZhdWx0XCIpIHtcbiAgICAgICAgY3NzICs9IFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogXCIgKyBicmVha3BvaW50ICsgXCJweCkge1wiO1xuICAgICAgICBjc3MgKz0gX3RoaXMyLmJ1aWxkU2VsZWN0b3JzKF90aGlzMi5zdHlsZXNbYnJlYWtwb2ludF0pO1xuICAgICAgICBjc3MgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGNzcztcbiAgfTtcblxuICBfcHJvdG8yLmJ1aWxkU2VsZWN0b3JzID0gZnVuY3Rpb24gYnVpbGRTZWxlY3RvcnMoc2VsZWN0b3JzKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICB2YXIgY3NzID0gXCJcIjtcbiAgICBmb3JPd24oc2VsZWN0b3JzLCBmdW5jdGlvbiAoc3R5bGVzLCBzZWxlY3Rvcikge1xuICAgICAgc2VsZWN0b3IgPSAoXCIjXCIgKyBfdGhpczMuaWQgKyBcIiBcIiArIHNlbGVjdG9yKS50cmltKCk7XG4gICAgICBjc3MgKz0gc2VsZWN0b3IgKyBcIiB7XCI7XG4gICAgICBmb3JPd24oc3R5bGVzLCBmdW5jdGlvbiAodmFsdWUsIHByb3ApIHtcbiAgICAgICAgaWYgKHZhbHVlIHx8IHZhbHVlID09PSAwKSB7XG4gICAgICAgICAgY3NzICs9IHByb3AgKyBcIjogXCIgKyB2YWx1ZSArIFwiO1wiO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGNzcyArPSBcIn1cIjtcbiAgICB9KTtcbiAgICByZXR1cm4gY3NzO1xuICB9O1xuXG4gIHJldHVybiBTdHlsZTtcbn0oKTtcblxudmFyIFNwbGlkZVJlbmRlcmVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3BsaWRlUmVuZGVyZXIoY29udGVudHMsIG9wdGlvbnMsIGNvbmZpZywgZGVmYXVsdHMpIHtcbiAgICB0aGlzLnNsaWRlcyA9IFtdO1xuICAgIHRoaXMub3B0aW9ucyA9IHt9O1xuICAgIHRoaXMuYnJlYWtwb2ludHMgPSBbXTtcbiAgICBtZXJnZShERUZBVUxUUywgZGVmYXVsdHMgfHwge30pO1xuICAgIG1lcmdlKG1lcmdlKHRoaXMub3B0aW9ucywgREVGQVVMVFMpLCBvcHRpb25zIHx8IHt9KTtcbiAgICB0aGlzLmNvbnRlbnRzID0gY29udGVudHM7XG4gICAgdGhpcy5jb25maWcgPSBhc3NpZ24oe30sIFJFTkRFUkVSX0RFRkFVTFRfQ09ORklHLCBjb25maWcgfHwge30pO1xuICAgIHRoaXMuaWQgPSB0aGlzLmNvbmZpZy5pZCB8fCB1bmlxdWVJZChcInNwbGlkZVwiKTtcbiAgICB0aGlzLlN0eWxlID0gbmV3IFN0eWxlKHRoaXMuaWQsIHRoaXMub3B0aW9ucyk7XG4gICAgdGhpcy5EaXJlY3Rpb24gPSBEaXJlY3Rpb24obnVsbCwgbnVsbCwgdGhpcy5vcHRpb25zKTtcbiAgICBhc3NlcnQodGhpcy5jb250ZW50cy5sZW5ndGgsIFwiUHJvdmlkZSBhdCBsZWFzdCAxIGNvbnRlbnQuXCIpO1xuICAgIHRoaXMuaW5pdCgpO1xuICB9XG5cbiAgU3BsaWRlUmVuZGVyZXIuY2xlYW4gPSBmdW5jdGlvbiBjbGVhbihzcGxpZGUpIHtcbiAgICB2YXIgX0V2ZW50SW50ZXJmYWNlMTQgPSBFdmVudEludGVyZmFjZShzcGxpZGUpLFxuICAgICAgICBvbiA9IF9FdmVudEludGVyZmFjZTE0Lm9uO1xuXG4gICAgdmFyIHJvb3QgPSBzcGxpZGUucm9vdDtcbiAgICB2YXIgY2xvbmVzID0gcXVlcnlBbGwocm9vdCwgXCIuXCIgKyBDTEFTU19DTE9ORSk7XG4gICAgb24oRVZFTlRfTU9VTlRFRCwgZnVuY3Rpb24gKCkge1xuICAgICAgcmVtb3ZlKGNoaWxkKHJvb3QsIFwic3R5bGVcIikpO1xuICAgIH0pO1xuICAgIHJlbW92ZShjbG9uZXMpO1xuICB9O1xuXG4gIHZhciBfcHJvdG8zID0gU3BsaWRlUmVuZGVyZXIucHJvdG90eXBlO1xuXG4gIF9wcm90bzMuaW5pdCA9IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgdGhpcy5wYXJzZUJyZWFrcG9pbnRzKCk7XG4gICAgdGhpcy5pbml0U2xpZGVzKCk7XG4gICAgdGhpcy5yZWdpc3RlclJvb3RTdHlsZXMoKTtcbiAgICB0aGlzLnJlZ2lzdGVyVHJhY2tTdHlsZXMoKTtcbiAgICB0aGlzLnJlZ2lzdGVyU2xpZGVTdHlsZXMoKTtcbiAgICB0aGlzLnJlZ2lzdGVyTGlzdFN0eWxlcygpO1xuICB9O1xuXG4gIF9wcm90bzMuaW5pdFNsaWRlcyA9IGZ1bmN0aW9uIGluaXRTbGlkZXMoKSB7XG4gICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICBwdXNoKHRoaXMuc2xpZGVzLCB0aGlzLmNvbnRlbnRzLm1hcChmdW5jdGlvbiAoY29udGVudCwgaW5kZXgpIHtcbiAgICAgIGNvbnRlbnQgPSBpc1N0cmluZyhjb250ZW50KSA/IHtcbiAgICAgICAgaHRtbDogY29udGVudFxuICAgICAgfSA6IGNvbnRlbnQ7XG4gICAgICBjb250ZW50LnN0eWxlcyA9IGNvbnRlbnQuc3R5bGVzIHx8IHt9O1xuICAgICAgY29udGVudC5hdHRycyA9IGNvbnRlbnQuYXR0cnMgfHwge307XG5cbiAgICAgIF90aGlzNC5jb3Zlcihjb250ZW50KTtcblxuICAgICAgdmFyIGNsYXNzZXMgPSBfdGhpczQub3B0aW9ucy5jbGFzc2VzLnNsaWRlICsgXCIgXCIgKyAoaW5kZXggPT09IDAgPyBDTEFTU19BQ1RJVkUgOiBcIlwiKTtcbiAgICAgIGFzc2lnbihjb250ZW50LmF0dHJzLCB7XG4gICAgICAgIGNsYXNzOiAoY2xhc3NlcyArIFwiIFwiICsgKGNvbnRlbnQuYXR0cnMuY2xhc3MgfHwgXCJcIikpLnRyaW0oKSxcbiAgICAgICAgc3R5bGU6IF90aGlzNC5idWlsZFN0eWxlcyhjb250ZW50LnN0eWxlcylcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkpO1xuXG4gICAgaWYgKHRoaXMuaXNMb29wKCkpIHtcbiAgICAgIHRoaXMuZ2VuZXJhdGVDbG9uZXModGhpcy5zbGlkZXMpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8zLnJlZ2lzdGVyUm9vdFN0eWxlcyA9IGZ1bmN0aW9uIHJlZ2lzdGVyUm9vdFN0eWxlcygpIHtcbiAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgIHRoaXMuYnJlYWtwb2ludHMuZm9yRWFjaChmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICAgIHZhciB3aWR0aCA9IF9yZWYyWzBdLFxuICAgICAgICAgIG9wdGlvbnMgPSBfcmVmMlsxXTtcblxuICAgICAgX3RoaXM1LlN0eWxlLnJ1bGUoXCIgXCIsIFwibWF4LXdpZHRoXCIsIHVuaXQob3B0aW9ucy53aWR0aCksIHdpZHRoKTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8zLnJlZ2lzdGVyVHJhY2tTdHlsZXMgPSBmdW5jdGlvbiByZWdpc3RlclRyYWNrU3R5bGVzKCkge1xuICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgdmFyIFN0eWxlMiA9IHRoaXMuU3R5bGU7XG4gICAgdmFyIHNlbGVjdG9yID0gXCIuXCIgKyBDTEFTU19UUkFDSztcbiAgICB0aGlzLmJyZWFrcG9pbnRzLmZvckVhY2goZnVuY3Rpb24gKF9yZWYzKSB7XG4gICAgICB2YXIgd2lkdGggPSBfcmVmM1swXSxcbiAgICAgICAgICBvcHRpb25zID0gX3JlZjNbMV07XG4gICAgICBTdHlsZTIucnVsZShzZWxlY3RvciwgX3RoaXM2LnJlc29sdmUoXCJwYWRkaW5nTGVmdFwiKSwgX3RoaXM2LmNzc1BhZGRpbmcob3B0aW9ucywgZmFsc2UpLCB3aWR0aCk7XG4gICAgICBTdHlsZTIucnVsZShzZWxlY3RvciwgX3RoaXM2LnJlc29sdmUoXCJwYWRkaW5nUmlnaHRcIiksIF90aGlzNi5jc3NQYWRkaW5nKG9wdGlvbnMsIHRydWUpLCB3aWR0aCk7XG4gICAgICBTdHlsZTIucnVsZShzZWxlY3RvciwgXCJoZWlnaHRcIiwgX3RoaXM2LmNzc1RyYWNrSGVpZ2h0KG9wdGlvbnMpLCB3aWR0aCk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvMy5yZWdpc3Rlckxpc3RTdHlsZXMgPSBmdW5jdGlvbiByZWdpc3Rlckxpc3RTdHlsZXMoKSB7XG4gICAgdmFyIF90aGlzNyA9IHRoaXM7XG5cbiAgICB2YXIgU3R5bGUyID0gdGhpcy5TdHlsZTtcbiAgICB2YXIgc2VsZWN0b3IgPSBcIi5cIiArIENMQVNTX0xJU1Q7XG4gICAgdGhpcy5icmVha3BvaW50cy5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmNCkge1xuICAgICAgdmFyIHdpZHRoID0gX3JlZjRbMF0sXG4gICAgICAgICAgb3B0aW9ucyA9IF9yZWY0WzFdO1xuICAgICAgU3R5bGUyLnJ1bGUoc2VsZWN0b3IsIFwidHJhbnNmb3JtXCIsIF90aGlzNy5idWlsZFRyYW5zbGF0ZShvcHRpb25zKSwgd2lkdGgpO1xuXG4gICAgICBpZiAoIV90aGlzNy5jc3NTbGlkZUhlaWdodChvcHRpb25zKSkge1xuICAgICAgICBTdHlsZTIucnVsZShzZWxlY3RvciwgXCJhc3BlY3QtcmF0aW9cIiwgX3RoaXM3LmNzc0FzcGVjdFJhdGlvKG9wdGlvbnMpLCB3aWR0aCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvMy5yZWdpc3RlclNsaWRlU3R5bGVzID0gZnVuY3Rpb24gcmVnaXN0ZXJTbGlkZVN0eWxlcygpIHtcbiAgICB2YXIgX3RoaXM4ID0gdGhpcztcblxuICAgIHZhciBTdHlsZTIgPSB0aGlzLlN0eWxlO1xuICAgIHZhciBzZWxlY3RvciA9IFwiLlwiICsgQ0xBU1NfU0xJREU7XG4gICAgdGhpcy5icmVha3BvaW50cy5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmNSkge1xuICAgICAgdmFyIHdpZHRoID0gX3JlZjVbMF0sXG4gICAgICAgICAgb3B0aW9ucyA9IF9yZWY1WzFdO1xuICAgICAgU3R5bGUyLnJ1bGUoc2VsZWN0b3IsIFwid2lkdGhcIiwgX3RoaXM4LmNzc1NsaWRlV2lkdGgob3B0aW9ucyksIHdpZHRoKTtcbiAgICAgIFN0eWxlMi5ydWxlKHNlbGVjdG9yLCBcImhlaWdodFwiLCBfdGhpczguY3NzU2xpZGVIZWlnaHQob3B0aW9ucykgfHwgXCIxMDAlXCIsIHdpZHRoKTtcbiAgICAgIFN0eWxlMi5ydWxlKHNlbGVjdG9yLCBfdGhpczgucmVzb2x2ZShcIm1hcmdpblJpZ2h0XCIpLCB1bml0KG9wdGlvbnMuZ2FwKSB8fCBcIjBweFwiLCB3aWR0aCk7XG4gICAgICBTdHlsZTIucnVsZShzZWxlY3RvciArIFwiID4gaW1nXCIsIFwiZGlzcGxheVwiLCBvcHRpb25zLmNvdmVyID8gXCJub25lXCIgOiBcImlubGluZVwiLCB3aWR0aCk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvMy5idWlsZFRyYW5zbGF0ZSA9IGZ1bmN0aW9uIGJ1aWxkVHJhbnNsYXRlKG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMkRGlyZWN0aW9uID0gdGhpcy5EaXJlY3Rpb24sXG4gICAgICAgIHJlc29sdmUgPSBfdGhpcyREaXJlY3Rpb24ucmVzb2x2ZSxcbiAgICAgICAgb3JpZW50ID0gX3RoaXMkRGlyZWN0aW9uLm9yaWVudDtcbiAgICB2YXIgdmFsdWVzID0gW107XG4gICAgdmFsdWVzLnB1c2godGhpcy5jc3NPZmZzZXRDbG9uZXMob3B0aW9ucykpO1xuICAgIHZhbHVlcy5wdXNoKHRoaXMuY3NzT2Zmc2V0R2FwcyhvcHRpb25zKSk7XG5cbiAgICBpZiAodGhpcy5pc0NlbnRlcihvcHRpb25zKSkge1xuICAgICAgdmFsdWVzLnB1c2godGhpcy5idWlsZENzc1ZhbHVlKG9yaWVudCgtNTApLCBcIiVcIikpO1xuICAgICAgdmFsdWVzLnB1c2guYXBwbHkodmFsdWVzLCB0aGlzLmNzc09mZnNldENlbnRlcihvcHRpb25zKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlcy5maWx0ZXIoQm9vbGVhbikubWFwKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIFwidHJhbnNsYXRlXCIgKyByZXNvbHZlKFwiWFwiKSArIFwiKFwiICsgdmFsdWUgKyBcIilcIjtcbiAgICB9KS5qb2luKFwiIFwiKTtcbiAgfTtcblxuICBfcHJvdG8zLmNzc09mZnNldENsb25lcyA9IGZ1bmN0aW9uIGNzc09mZnNldENsb25lcyhvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzJERpcmVjdGlvbjIgPSB0aGlzLkRpcmVjdGlvbixcbiAgICAgICAgcmVzb2x2ZSA9IF90aGlzJERpcmVjdGlvbjIucmVzb2x2ZSxcbiAgICAgICAgb3JpZW50ID0gX3RoaXMkRGlyZWN0aW9uMi5vcmllbnQ7XG4gICAgdmFyIGNsb25lQ291bnQgPSB0aGlzLmdldENsb25lQ291bnQoKTtcblxuICAgIGlmICh0aGlzLmlzRml4ZWRXaWR0aChvcHRpb25zKSkge1xuICAgICAgdmFyIF90aGlzJHBhcnNlQ3NzVmFsdWUgPSB0aGlzLnBhcnNlQ3NzVmFsdWUob3B0aW9uc1tyZXNvbHZlKFwiZml4ZWRXaWR0aFwiKV0pLFxuICAgICAgICAgIHZhbHVlID0gX3RoaXMkcGFyc2VDc3NWYWx1ZS52YWx1ZSxcbiAgICAgICAgICB1bml0MiA9IF90aGlzJHBhcnNlQ3NzVmFsdWUudW5pdDtcblxuICAgICAgcmV0dXJuIHRoaXMuYnVpbGRDc3NWYWx1ZShvcmllbnQodmFsdWUpICogY2xvbmVDb3VudCwgdW5pdDIpO1xuICAgIH1cblxuICAgIHZhciBwZXJjZW50ID0gMTAwICogY2xvbmVDb3VudCAvIG9wdGlvbnMucGVyUGFnZTtcbiAgICByZXR1cm4gb3JpZW50KHBlcmNlbnQpICsgXCIlXCI7XG4gIH07XG5cbiAgX3Byb3RvMy5jc3NPZmZzZXRDZW50ZXIgPSBmdW5jdGlvbiBjc3NPZmZzZXRDZW50ZXIob3B0aW9ucykge1xuICAgIHZhciBfdGhpcyREaXJlY3Rpb24zID0gdGhpcy5EaXJlY3Rpb24sXG4gICAgICAgIHJlc29sdmUgPSBfdGhpcyREaXJlY3Rpb24zLnJlc29sdmUsXG4gICAgICAgIG9yaWVudCA9IF90aGlzJERpcmVjdGlvbjMub3JpZW50O1xuXG4gICAgaWYgKHRoaXMuaXNGaXhlZFdpZHRoKG9wdGlvbnMpKSB7XG4gICAgICB2YXIgX3RoaXMkcGFyc2VDc3NWYWx1ZTIgPSB0aGlzLnBhcnNlQ3NzVmFsdWUob3B0aW9uc1tyZXNvbHZlKFwiZml4ZWRXaWR0aFwiKV0pLFxuICAgICAgICAgIHZhbHVlID0gX3RoaXMkcGFyc2VDc3NWYWx1ZTIudmFsdWUsXG4gICAgICAgICAgdW5pdDIgPSBfdGhpcyRwYXJzZUNzc1ZhbHVlMi51bml0O1xuXG4gICAgICByZXR1cm4gW3RoaXMuYnVpbGRDc3NWYWx1ZShvcmllbnQodmFsdWUgLyAyKSwgdW5pdDIpXTtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWVzID0gW107XG4gICAgdmFyIHBlclBhZ2UgPSBvcHRpb25zLnBlclBhZ2UsXG4gICAgICAgIGdhcCA9IG9wdGlvbnMuZ2FwO1xuICAgIHZhbHVlcy5wdXNoKG9yaWVudCg1MCAvIHBlclBhZ2UpICsgXCIlXCIpO1xuXG4gICAgaWYgKGdhcCkge1xuICAgICAgdmFyIF90aGlzJHBhcnNlQ3NzVmFsdWUzID0gdGhpcy5wYXJzZUNzc1ZhbHVlKGdhcCksXG4gICAgICAgICAgX3ZhbHVlID0gX3RoaXMkcGFyc2VDc3NWYWx1ZTMudmFsdWUsXG4gICAgICAgICAgX3VuaXQgPSBfdGhpcyRwYXJzZUNzc1ZhbHVlMy51bml0O1xuXG4gICAgICB2YXIgZ2FwT2Zmc2V0ID0gKF92YWx1ZSAvIHBlclBhZ2UgLSBfdmFsdWUpIC8gMjtcbiAgICAgIHZhbHVlcy5wdXNoKHRoaXMuYnVpbGRDc3NWYWx1ZShvcmllbnQoZ2FwT2Zmc2V0KSwgX3VuaXQpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWVzO1xuICB9O1xuXG4gIF9wcm90bzMuY3NzT2Zmc2V0R2FwcyA9IGZ1bmN0aW9uIGNzc09mZnNldEdhcHMob3B0aW9ucykge1xuICAgIHZhciBjbG9uZUNvdW50ID0gdGhpcy5nZXRDbG9uZUNvdW50KCk7XG5cbiAgICBpZiAoY2xvbmVDb3VudCAmJiBvcHRpb25zLmdhcCkge1xuICAgICAgdmFyIG9yaWVudCA9IHRoaXMuRGlyZWN0aW9uLm9yaWVudDtcblxuICAgICAgdmFyIF90aGlzJHBhcnNlQ3NzVmFsdWU0ID0gdGhpcy5wYXJzZUNzc1ZhbHVlKG9wdGlvbnMuZ2FwKSxcbiAgICAgICAgICB2YWx1ZSA9IF90aGlzJHBhcnNlQ3NzVmFsdWU0LnZhbHVlLFxuICAgICAgICAgIHVuaXQyID0gX3RoaXMkcGFyc2VDc3NWYWx1ZTQudW5pdDtcblxuICAgICAgaWYgKHRoaXMuaXNGaXhlZFdpZHRoKG9wdGlvbnMpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJ1aWxkQ3NzVmFsdWUob3JpZW50KHZhbHVlICogY2xvbmVDb3VudCksIHVuaXQyKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHBlclBhZ2UgPSBvcHRpb25zLnBlclBhZ2U7XG4gICAgICB2YXIgZ2FwcyA9IGNsb25lQ291bnQgLyBwZXJQYWdlO1xuICAgICAgcmV0dXJuIHRoaXMuYnVpbGRDc3NWYWx1ZShvcmllbnQoZ2FwcyAqIHZhbHVlKSwgdW5pdDIpO1xuICAgIH1cblxuICAgIHJldHVybiBcIlwiO1xuICB9O1xuXG4gIF9wcm90bzMucmVzb2x2ZSA9IGZ1bmN0aW9uIHJlc29sdmUocHJvcCkge1xuICAgIHJldHVybiBjYW1lbFRvS2ViYWIodGhpcy5EaXJlY3Rpb24ucmVzb2x2ZShwcm9wKSk7XG4gIH07XG5cbiAgX3Byb3RvMy5jc3NQYWRkaW5nID0gZnVuY3Rpb24gY3NzUGFkZGluZyhvcHRpb25zLCByaWdodCkge1xuICAgIHZhciBwYWRkaW5nID0gb3B0aW9ucy5wYWRkaW5nO1xuICAgIHZhciBwcm9wID0gdGhpcy5EaXJlY3Rpb24ucmVzb2x2ZShyaWdodCA/IFwicmlnaHRcIiA6IFwibGVmdFwiLCB0cnVlKTtcbiAgICByZXR1cm4gcGFkZGluZyAmJiB1bml0KHBhZGRpbmdbcHJvcF0gfHwgKGlzT2JqZWN0KHBhZGRpbmcpID8gMCA6IHBhZGRpbmcpKSB8fCBcIjBweFwiO1xuICB9O1xuXG4gIF9wcm90bzMuY3NzVHJhY2tIZWlnaHQgPSBmdW5jdGlvbiBjc3NUcmFja0hlaWdodChvcHRpb25zKSB7XG4gICAgdmFyIGhlaWdodCA9IFwiXCI7XG5cbiAgICBpZiAodGhpcy5pc1ZlcnRpY2FsKCkpIHtcbiAgICAgIGhlaWdodCA9IHRoaXMuY3NzSGVpZ2h0KG9wdGlvbnMpO1xuICAgICAgYXNzZXJ0KGhlaWdodCwgJ1wiaGVpZ2h0XCIgaXMgbWlzc2luZy4nKTtcbiAgICAgIGhlaWdodCA9IFwiY2FsYyhcIiArIGhlaWdodCArIFwiIC0gXCIgKyB0aGlzLmNzc1BhZGRpbmcob3B0aW9ucywgZmFsc2UpICsgXCIgLSBcIiArIHRoaXMuY3NzUGFkZGluZyhvcHRpb25zLCB0cnVlKSArIFwiKVwiO1xuICAgIH1cblxuICAgIHJldHVybiBoZWlnaHQ7XG4gIH07XG5cbiAgX3Byb3RvMy5jc3NIZWlnaHQgPSBmdW5jdGlvbiBjc3NIZWlnaHQob3B0aW9ucykge1xuICAgIHJldHVybiB1bml0KG9wdGlvbnMuaGVpZ2h0KTtcbiAgfTtcblxuICBfcHJvdG8zLmNzc1NsaWRlV2lkdGggPSBmdW5jdGlvbiBjc3NTbGlkZVdpZHRoKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5hdXRvV2lkdGggPyBcIlwiIDogdW5pdChvcHRpb25zLmZpeGVkV2lkdGgpIHx8ICh0aGlzLmlzVmVydGljYWwoKSA/IFwiXCIgOiB0aGlzLmNzc1NsaWRlU2l6ZShvcHRpb25zKSk7XG4gIH07XG5cbiAgX3Byb3RvMy5jc3NTbGlkZUhlaWdodCA9IGZ1bmN0aW9uIGNzc1NsaWRlSGVpZ2h0KG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdW5pdChvcHRpb25zLmZpeGVkSGVpZ2h0KSB8fCAodGhpcy5pc1ZlcnRpY2FsKCkgPyBvcHRpb25zLmF1dG9IZWlnaHQgPyBcIlwiIDogdGhpcy5jc3NTbGlkZVNpemUob3B0aW9ucykgOiB0aGlzLmNzc0hlaWdodChvcHRpb25zKSk7XG4gIH07XG5cbiAgX3Byb3RvMy5jc3NTbGlkZVNpemUgPSBmdW5jdGlvbiBjc3NTbGlkZVNpemUob3B0aW9ucykge1xuICAgIHZhciBnYXAgPSB1bml0KG9wdGlvbnMuZ2FwKTtcbiAgICByZXR1cm4gXCJjYWxjKCgxMDAlXCIgKyAoZ2FwICYmIFwiICsgXCIgKyBnYXApICsgXCIpL1wiICsgKG9wdGlvbnMucGVyUGFnZSB8fCAxKSArIChnYXAgJiYgXCIgLSBcIiArIGdhcCkgKyBcIilcIjtcbiAgfTtcblxuICBfcHJvdG8zLmNzc0FzcGVjdFJhdGlvID0gZnVuY3Rpb24gY3NzQXNwZWN0UmF0aW8ob3B0aW9ucykge1xuICAgIHZhciBoZWlnaHRSYXRpbyA9IG9wdGlvbnMuaGVpZ2h0UmF0aW87XG4gICAgcmV0dXJuIGhlaWdodFJhdGlvID8gXCJcIiArIDEgLyBoZWlnaHRSYXRpbyA6IFwiXCI7XG4gIH07XG5cbiAgX3Byb3RvMy5idWlsZENzc1ZhbHVlID0gZnVuY3Rpb24gYnVpbGRDc3NWYWx1ZSh2YWx1ZSwgdW5pdDIpIHtcbiAgICByZXR1cm4gXCJcIiArIHZhbHVlICsgdW5pdDI7XG4gIH07XG5cbiAgX3Byb3RvMy5wYXJzZUNzc1ZhbHVlID0gZnVuY3Rpb24gcGFyc2VDc3NWYWx1ZSh2YWx1ZSkge1xuICAgIGlmIChpc1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgIHZhciBudW1iZXIgPSBwYXJzZUZsb2F0KHZhbHVlKSB8fCAwO1xuICAgICAgdmFyIHVuaXQyID0gdmFsdWUucmVwbGFjZSgvXFxkKihcXC5cXGQqKT8vLCBcIlwiKSB8fCBcInB4XCI7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogbnVtYmVyLFxuICAgICAgICB1bml0OiB1bml0MlxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgdW5pdDogXCJweFwiXG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG8zLnBhcnNlQnJlYWtwb2ludHMgPSBmdW5jdGlvbiBwYXJzZUJyZWFrcG9pbnRzKCkge1xuICAgIHZhciBfdGhpczkgPSB0aGlzO1xuXG4gICAgdmFyIGJyZWFrcG9pbnRzID0gdGhpcy5vcHRpb25zLmJyZWFrcG9pbnRzO1xuICAgIHRoaXMuYnJlYWtwb2ludHMucHVzaChbXCJkZWZhdWx0XCIsIHRoaXMub3B0aW9uc10pO1xuXG4gICAgaWYgKGJyZWFrcG9pbnRzKSB7XG4gICAgICBmb3JPd24oYnJlYWtwb2ludHMsIGZ1bmN0aW9uIChvcHRpb25zLCB3aWR0aCkge1xuICAgICAgICBfdGhpczkuYnJlYWtwb2ludHMucHVzaChbd2lkdGgsIG1lcmdlKG1lcmdlKHt9LCBfdGhpczkub3B0aW9ucyksIG9wdGlvbnMpXSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvMy5pc0ZpeGVkV2lkdGggPSBmdW5jdGlvbiBpc0ZpeGVkV2lkdGgob3B0aW9ucykge1xuICAgIHJldHVybiAhIW9wdGlvbnNbdGhpcy5EaXJlY3Rpb24ucmVzb2x2ZShcImZpeGVkV2lkdGhcIildO1xuICB9O1xuXG4gIF9wcm90bzMuaXNMb29wID0gZnVuY3Rpb24gaXNMb29wKCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMudHlwZSA9PT0gTE9PUDtcbiAgfTtcblxuICBfcHJvdG8zLmlzQ2VudGVyID0gZnVuY3Rpb24gaXNDZW50ZXIob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zLmZvY3VzID09PSBcImNlbnRlclwiKSB7XG4gICAgICBpZiAodGhpcy5pc0xvb3AoKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy50eXBlID09PSBTTElERSkge1xuICAgICAgICByZXR1cm4gIXRoaXMub3B0aW9ucy50cmltU3BhY2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIF9wcm90bzMuaXNWZXJ0aWNhbCA9IGZ1bmN0aW9uIGlzVmVydGljYWwoKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5kaXJlY3Rpb24gPT09IFRUQjtcbiAgfTtcblxuICBfcHJvdG8zLmJ1aWxkQ2xhc3NlcyA9IGZ1bmN0aW9uIGJ1aWxkQ2xhc3NlcygpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICByZXR1cm4gW0NMQVNTX1JPT1QsIENMQVNTX1JPT1QgKyBcIi0tXCIgKyBvcHRpb25zLnR5cGUsIENMQVNTX1JPT1QgKyBcIi0tXCIgKyBvcHRpb25zLmRpcmVjdGlvbiwgb3B0aW9ucy5kcmFnICYmIENMQVNTX1JPT1QgKyBcIi0tZHJhZ2dhYmxlXCIsIG9wdGlvbnMuaXNOYXZpZ2F0aW9uICYmIENMQVNTX1JPT1QgKyBcIi0tbmF2XCIsIENMQVNTX0FDVElWRSwgIXRoaXMuY29uZmlnLmhpZGRlbiAmJiBDTEFTU19SRU5ERVJFRF0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oXCIgXCIpO1xuICB9O1xuXG4gIF9wcm90bzMuYnVpbGRBdHRycyA9IGZ1bmN0aW9uIGJ1aWxkQXR0cnMoYXR0cnMpIHtcbiAgICB2YXIgYXR0ciA9IFwiXCI7XG4gICAgZm9yT3duKGF0dHJzLCBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgYXR0ciArPSB2YWx1ZSA/IFwiIFwiICsgY2FtZWxUb0tlYmFiKGtleSkgKyBcIj1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIlwiIDogXCJcIjtcbiAgICB9KTtcbiAgICByZXR1cm4gYXR0ci50cmltKCk7XG4gIH07XG5cbiAgX3Byb3RvMy5idWlsZFN0eWxlcyA9IGZ1bmN0aW9uIGJ1aWxkU3R5bGVzKHN0eWxlcykge1xuICAgIHZhciBzdHlsZSA9IFwiXCI7XG4gICAgZm9yT3duKHN0eWxlcywgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgIHN0eWxlICs9IFwiIFwiICsgY2FtZWxUb0tlYmFiKGtleSkgKyBcIjpcIiArIHZhbHVlICsgXCI7XCI7XG4gICAgfSk7XG4gICAgcmV0dXJuIHN0eWxlLnRyaW0oKTtcbiAgfTtcblxuICBfcHJvdG8zLnJlbmRlclNsaWRlcyA9IGZ1bmN0aW9uIHJlbmRlclNsaWRlcygpIHtcbiAgICB2YXIgX3RoaXMxMCA9IHRoaXM7XG5cbiAgICB2YXIgdGFnID0gdGhpcy5jb25maWcuc2xpZGVUYWc7XG4gICAgcmV0dXJuIHRoaXMuc2xpZGVzLm1hcChmdW5jdGlvbiAoY29udGVudCkge1xuICAgICAgcmV0dXJuIFwiPFwiICsgdGFnICsgXCIgXCIgKyBfdGhpczEwLmJ1aWxkQXR0cnMoY29udGVudC5hdHRycykgKyBcIj5cIiArIChjb250ZW50Lmh0bWwgfHwgXCJcIikgKyBcIjwvXCIgKyB0YWcgKyBcIj5cIjtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIF9wcm90bzMuY292ZXIgPSBmdW5jdGlvbiBjb3Zlcihjb250ZW50KSB7XG4gICAgdmFyIHN0eWxlcyA9IGNvbnRlbnQuc3R5bGVzLFxuICAgICAgICBfY29udGVudCRodG1sID0gY29udGVudC5odG1sLFxuICAgICAgICBodG1sID0gX2NvbnRlbnQkaHRtbCA9PT0gdm9pZCAwID8gXCJcIiA6IF9jb250ZW50JGh0bWw7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmNvdmVyICYmICF0aGlzLm9wdGlvbnMubGF6eUxvYWQpIHtcbiAgICAgIHZhciBzcmMgPSBodG1sLm1hdGNoKC88aW1nLio/c3JjXFxzKj1cXHMqKFsnXCJdKSguKz8pXFwxLio/Pi8pO1xuXG4gICAgICBpZiAoc3JjICYmIHNyY1syXSkge1xuICAgICAgICBzdHlsZXMuYmFja2dyb3VuZCA9IFwiY2VudGVyL2NvdmVyIG5vLXJlcGVhdCB1cmwoJ1wiICsgc3JjWzJdICsgXCInKVwiO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfcHJvdG8zLmdlbmVyYXRlQ2xvbmVzID0gZnVuY3Rpb24gZ2VuZXJhdGVDbG9uZXMoY29udGVudHMpIHtcbiAgICB2YXIgY2xhc3NlcyA9IHRoaXMub3B0aW9ucy5jbGFzc2VzO1xuICAgIHZhciBjb3VudCA9IHRoaXMuZ2V0Q2xvbmVDb3VudCgpO1xuICAgIHZhciBzbGlkZXMgPSBjb250ZW50cy5zbGljZSgpO1xuXG4gICAgd2hpbGUgKHNsaWRlcy5sZW5ndGggPCBjb3VudCkge1xuICAgICAgcHVzaChzbGlkZXMsIHNsaWRlcyk7XG4gICAgfVxuXG4gICAgcHVzaChzbGlkZXMuc2xpY2UoLWNvdW50KS5yZXZlcnNlKCksIHNsaWRlcy5zbGljZSgwLCBjb3VudCkpLmZvckVhY2goZnVuY3Rpb24gKGNvbnRlbnQsIGluZGV4KSB7XG4gICAgICB2YXIgYXR0cnMgPSBhc3NpZ24oe30sIGNvbnRlbnQuYXR0cnMsIHtcbiAgICAgICAgY2xhc3M6IGNvbnRlbnQuYXR0cnMuY2xhc3MgKyBcIiBcIiArIGNsYXNzZXMuY2xvbmVcbiAgICAgIH0pO1xuICAgICAgdmFyIGNsb25lID0gYXNzaWduKHt9LCBjb250ZW50LCB7XG4gICAgICAgIGF0dHJzOiBhdHRyc1xuICAgICAgfSk7XG4gICAgICBpbmRleCA8IGNvdW50ID8gY29udGVudHMudW5zaGlmdChjbG9uZSkgOiBjb250ZW50cy5wdXNoKGNsb25lKTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8zLmdldENsb25lQ291bnQgPSBmdW5jdGlvbiBnZXRDbG9uZUNvdW50KCkge1xuICAgIGlmICh0aGlzLmlzTG9vcCgpKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICAgICAgaWYgKG9wdGlvbnMuY2xvbmVzKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zLmNsb25lcztcbiAgICAgIH1cblxuICAgICAgdmFyIHBlclBhZ2UgPSBtYXguYXBwbHkodm9pZCAwLCB0aGlzLmJyZWFrcG9pbnRzLm1hcChmdW5jdGlvbiAoX3JlZjYpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMyID0gX3JlZjZbMV07XG4gICAgICAgIHJldHVybiBvcHRpb25zMi5wZXJQYWdlO1xuICAgICAgfSkpO1xuICAgICAgcmV0dXJuIHBlclBhZ2UgKiAoKG9wdGlvbnMuZmxpY2tNYXhQYWdlcyB8fCAxKSArIDEpO1xuICAgIH1cblxuICAgIHJldHVybiAwO1xuICB9O1xuXG4gIF9wcm90bzMucmVuZGVyQXJyb3dzID0gZnVuY3Rpb24gcmVuZGVyQXJyb3dzKCkge1xuICAgIHZhciBodG1sID0gXCJcIjtcbiAgICBodG1sICs9IFwiPGRpdiBjbGFzcz1cXFwiXCIgKyB0aGlzLm9wdGlvbnMuY2xhc3Nlcy5hcnJvd3MgKyBcIlxcXCI+XCI7XG4gICAgaHRtbCArPSB0aGlzLnJlbmRlckFycm93KHRydWUpO1xuICAgIGh0bWwgKz0gdGhpcy5yZW5kZXJBcnJvdyhmYWxzZSk7XG4gICAgaHRtbCArPSBcIjwvZGl2PlwiO1xuICAgIHJldHVybiBodG1sO1xuICB9O1xuXG4gIF9wcm90bzMucmVuZGVyQXJyb3cgPSBmdW5jdGlvbiByZW5kZXJBcnJvdyhwcmV2KSB7XG4gICAgdmFyIF90aGlzJG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgIGNsYXNzZXMgPSBfdGhpcyRvcHRpb25zLmNsYXNzZXMsXG4gICAgICAgIGkxOG4gPSBfdGhpcyRvcHRpb25zLmkxOG47XG4gICAgdmFyIGF0dHJzID0ge1xuICAgICAgY2xhc3M6IGNsYXNzZXMuYXJyb3cgKyBcIiBcIiArIChwcmV2ID8gY2xhc3Nlcy5wcmV2IDogY2xhc3Nlcy5uZXh0KSxcbiAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgICBhcmlhTGFiZWw6IHByZXYgPyBpMThuLnByZXYgOiBpMThuLm5leHRcbiAgICB9O1xuICAgIHJldHVybiBcIjxidXR0b24gXCIgKyB0aGlzLmJ1aWxkQXR0cnMoYXR0cnMpICsgXCI+PHN2ZyB4bWxucz1cXFwiXCIgKyBYTUxfTkFNRV9TUEFDRSArIFwiXFxcIiB2aWV3Qm94PVxcXCIwIDAgXCIgKyBTSVpFICsgXCIgXCIgKyBTSVpFICsgXCJcXFwiIHdpZHRoPVxcXCJcIiArIFNJWkUgKyBcIlxcXCIgaGVpZ2h0PVxcXCJcIiArIFNJWkUgKyBcIlxcXCI+PHBhdGggZD1cXFwiXCIgKyAodGhpcy5vcHRpb25zLmFycm93UGF0aCB8fCBQQVRIKSArIFwiXFxcIiAvPjwvc3ZnPjwvYnV0dG9uPlwiO1xuICB9O1xuXG4gIF9wcm90bzMuaHRtbCA9IGZ1bmN0aW9uIGh0bWwoKSB7XG4gICAgdmFyIF90aGlzJGNvbmZpZyA9IHRoaXMuY29uZmlnLFxuICAgICAgICByb290Q2xhc3MgPSBfdGhpcyRjb25maWcucm9vdENsYXNzLFxuICAgICAgICBsaXN0VGFnID0gX3RoaXMkY29uZmlnLmxpc3RUYWcsXG4gICAgICAgIGFycm93cyA9IF90aGlzJGNvbmZpZy5hcnJvd3MsXG4gICAgICAgIGJlZm9yZVRyYWNrID0gX3RoaXMkY29uZmlnLmJlZm9yZVRyYWNrLFxuICAgICAgICBhZnRlclRyYWNrID0gX3RoaXMkY29uZmlnLmFmdGVyVHJhY2ssXG4gICAgICAgIHNsaWRlciA9IF90aGlzJGNvbmZpZy5zbGlkZXIsXG4gICAgICAgIGJlZm9yZVNsaWRlciA9IF90aGlzJGNvbmZpZy5iZWZvcmVTbGlkZXIsXG4gICAgICAgIGFmdGVyU2xpZGVyID0gX3RoaXMkY29uZmlnLmFmdGVyU2xpZGVyO1xuICAgIHZhciBodG1sID0gXCJcIjtcbiAgICBodG1sICs9IFwiPGRpdiBpZD1cXFwiXCIgKyB0aGlzLmlkICsgXCJcXFwiIGNsYXNzPVxcXCJcIiArIHRoaXMuYnVpbGRDbGFzc2VzKCkgKyBcIiBcIiArIChyb290Q2xhc3MgfHwgXCJcIikgKyBcIlxcXCI+XCI7XG4gICAgaHRtbCArPSBcIjxzdHlsZT5cIiArIHRoaXMuU3R5bGUuYnVpbGQoKSArIFwiPC9zdHlsZT5cIjtcblxuICAgIGlmIChzbGlkZXIpIHtcbiAgICAgIGh0bWwgKz0gYmVmb3JlU2xpZGVyIHx8IFwiXCI7XG4gICAgICBodG1sICs9IFwiPGRpdiBjbGFzcz1cXFwic3BsaWRlX19zbGlkZXJcXFwiPlwiO1xuICAgIH1cblxuICAgIGh0bWwgKz0gYmVmb3JlVHJhY2sgfHwgXCJcIjtcblxuICAgIGlmIChhcnJvd3MpIHtcbiAgICAgIGh0bWwgKz0gdGhpcy5yZW5kZXJBcnJvd3MoKTtcbiAgICB9XG5cbiAgICBodG1sICs9IFwiPGRpdiBjbGFzcz1cXFwic3BsaWRlX190cmFja1xcXCI+XCI7XG4gICAgaHRtbCArPSBcIjxcIiArIGxpc3RUYWcgKyBcIiBjbGFzcz1cXFwic3BsaWRlX19saXN0XFxcIj5cIjtcbiAgICBodG1sICs9IHRoaXMucmVuZGVyU2xpZGVzKCk7XG4gICAgaHRtbCArPSBcIjwvXCIgKyBsaXN0VGFnICsgXCI+XCI7XG4gICAgaHRtbCArPSBcIjwvZGl2PlwiO1xuICAgIGh0bWwgKz0gYWZ0ZXJUcmFjayB8fCBcIlwiO1xuXG4gICAgaWYgKHNsaWRlcikge1xuICAgICAgaHRtbCArPSBcIjwvZGl2PlwiO1xuICAgICAgaHRtbCArPSBhZnRlclNsaWRlciB8fCBcIlwiO1xuICAgIH1cblxuICAgIGh0bWwgKz0gXCI8L2Rpdj5cIjtcbiAgICByZXR1cm4gaHRtbDtcbiAgfTtcblxuICByZXR1cm4gU3BsaWRlUmVuZGVyZXI7XG59KCk7XG5cbmV4cG9ydCB7IENMQVNTRVMsIENMQVNTX0FDVElWRSwgQ0xBU1NfQVJST1csIENMQVNTX0FSUk9XUywgQ0xBU1NfQVJST1dfTkVYVCwgQ0xBU1NfQVJST1dfUFJFViwgQ0xBU1NfQ0xPTkUsIENMQVNTX0NPTlRBSU5FUiwgQ0xBU1NfRk9DVVNfSU4sIENMQVNTX0lOSVRJQUxJWkVELCBDTEFTU19MSVNULCBDTEFTU19MT0FESU5HLCBDTEFTU19ORVhULCBDTEFTU19PVkVSRkxPVywgQ0xBU1NfUEFHSU5BVElPTiwgQ0xBU1NfUEFHSU5BVElPTl9QQUdFLCBDTEFTU19QUkVWLCBDTEFTU19QUk9HUkVTUywgQ0xBU1NfUFJPR1JFU1NfQkFSLCBDTEFTU19ST09ULCBDTEFTU19TTElERSwgQ0xBU1NfU1BJTk5FUiwgQ0xBU1NfU1IsIENMQVNTX1RPR0dMRSwgQ0xBU1NfVE9HR0xFX1BBVVNFLCBDTEFTU19UT0dHTEVfUExBWSwgQ0xBU1NfVFJBQ0ssIENMQVNTX1ZJU0lCTEUsIERFRkFVTFRTLCBFVkVOVF9BQ1RJVkUsIEVWRU5UX0FSUk9XU19NT1VOVEVELCBFVkVOVF9BUlJPV1NfVVBEQVRFRCwgRVZFTlRfQVVUT1BMQVlfUEFVU0UsIEVWRU5UX0FVVE9QTEFZX1BMQVksIEVWRU5UX0FVVE9QTEFZX1BMQVlJTkcsIEVWRU5UX0NMSUNLLCBFVkVOVF9ERVNUUk9ZLCBFVkVOVF9EUkFHLCBFVkVOVF9EUkFHR0VELCBFVkVOVF9EUkFHR0lORywgRVZFTlRfRU5EX0lOREVYX0NIQU5HRUQsIEVWRU5UX0hJRERFTiwgRVZFTlRfSU5BQ1RJVkUsIEVWRU5UX0xBWllMT0FEX0xPQURFRCwgRVZFTlRfTU9VTlRFRCwgRVZFTlRfTU9WRSwgRVZFTlRfTU9WRUQsIEVWRU5UX05BVklHQVRJT05fTU9VTlRFRCwgRVZFTlRfT1ZFUkZMT1csIEVWRU5UX1BBR0lOQVRJT05fTU9VTlRFRCwgRVZFTlRfUEFHSU5BVElPTl9VUERBVEVELCBFVkVOVF9SRUFEWSwgRVZFTlRfUkVGUkVTSCwgRVZFTlRfUkVTSVpFLCBFVkVOVF9SRVNJWkVELCBFVkVOVF9TQ1JPTEwsIEVWRU5UX1NDUk9MTEVELCBFVkVOVF9TSElGVEVELCBFVkVOVF9TTElERV9LRVlET1dOLCBFVkVOVF9VUERBVEVELCBFVkVOVF9WSVNJQkxFLCBFdmVudEJpbmRlciwgRXZlbnRJbnRlcmZhY2UsIEZBREUsIExPT1AsIExUUiwgUlRMLCBSZXF1ZXN0SW50ZXJ2YWwsIFNMSURFLCBTVEFUVVNfQ0xBU1NFUywgU3BsaWRlLCBTcGxpZGVSZW5kZXJlciwgU3RhdGUsIFRUQiwgVGhyb3R0bGUsIFNwbGlkZSBhcyBkZWZhdWx0IH07XG4iXSwibmFtZXMiOlsiX2RlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImkiLCJsZW5ndGgiLCJkZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJfY3JlYXRlQ2xhc3MiLCJDb25zdHJ1Y3RvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsInByb3RvdHlwZSIsIk1FRElBX1BSRUZFUlNfUkVEVUNFRF9NT1RJT04iLCJDUkVBVEVEIiwiTU9VTlRFRCIsIklETEUiLCJNT1ZJTkciLCJTQ1JPTExJTkciLCJEUkFHR0lORyIsIkRFU1RST1lFRCIsIlNUQVRFUyIsImVtcHR5IiwiYXJyYXkiLCJzbGljZSIsImFycmF5TGlrZSIsInN0YXJ0IiwiZW5kIiwiQXJyYXkiLCJjYWxsIiwiYXBwbHkiLCJmdW5jIiwiYmluZCIsImNvbmNhdCIsImFyZ3VtZW50cyIsIm5leHRUaWNrIiwic2V0VGltZW91dCIsIm5vb3AiLCJyYWYiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ0eXBlT2YiLCJ0eXBlIiwic3ViamVjdCIsImlzT2JqZWN0IiwiaXNOdWxsIiwiaXNBcnJheSIsImlzRnVuY3Rpb24iLCJpc1N0cmluZyIsImlzVW5kZWZpbmVkIiwiaXNIVE1MRWxlbWVudCIsIm93bmVyRG9jdW1lbnQiLCJkZWZhdWx0VmlldyIsIndpbmRvdyIsIkhUTUxFbGVtZW50IiwiZSIsInRvQXJyYXkiLCJ2YWx1ZSIsImZvckVhY2giLCJ2YWx1ZXMiLCJpdGVyYXRlZSIsImluY2x1ZGVzIiwiaW5kZXhPZiIsInB1c2giLCJpdGVtcyIsInRvZ2dsZUNsYXNzIiwiZWxtIiwiY2xhc3NlcyIsImFkZCIsIm5hbWUiLCJjbGFzc0xpc3QiLCJhZGRDbGFzcyIsInNwbGl0IiwiYXBwZW5kIiwicGFyZW50IiwiY2hpbGRyZW4iLCJhcHBlbmRDaGlsZCIsImJlZm9yZSIsIm5vZGVzIiwicmVmIiwibm9kZSIsInBhcmVudE5vZGUiLCJpbnNlcnRCZWZvcmUiLCJtYXRjaGVzIiwic2VsZWN0b3IiLCJjaGlsZHJlbjIiLCJmaWx0ZXIiLCJjaGlsZCIsImZpcnN0RWxlbWVudENoaWxkIiwib3duS2V5cyIsImtleXMiLCJmb3JPd24iLCJvYmplY3QiLCJyaWdodCIsInJldmVyc2UiLCJhc3NpZ24iLCJzb3VyY2UiLCJtZXJnZSIsIm9taXQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJlbG1zIiwiYXR0cnMiLCJhdHRyIiwic2V0QXR0cmlidXRlIiwidmFsdWUyIiwiU3RyaW5nIiwiY3JlYXRlIiwidGFnIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic3R5bGUiLCJwcm9wIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImRpc3BsYXkiLCJkaXNwbGF5MiIsImZvY3VzIiwicHJldmVudFNjcm9sbCIsImdldEF0dHJpYnV0ZSIsImhhc0NsYXNzIiwiY2xhc3NOYW1lIiwiY29udGFpbnMiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicmVtb3ZlIiwicmVtb3ZlQ2hpbGQiLCJwYXJzZUh0bWwiLCJodG1sIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwiYm9keSIsInByZXZlbnQiLCJzdG9wUHJvcGFnYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInF1ZXJ5IiwicXVlcnlTZWxlY3RvciIsInF1ZXJ5QWxsIiwicXVlcnlTZWxlY3RvckFsbCIsInJlbW92ZUNsYXNzIiwidGltZU9mIiwidGltZVN0YW1wIiwidW5pdCIsIlBST0pFQ1RfQ09ERSIsIkRBVEFfQVRUUklCVVRFIiwiYXNzZXJ0IiwiY29uZGl0aW9uIiwibWVzc2FnZSIsIkVycm9yIiwibWluIiwiTWF0aCIsIm1heCIsImZsb29yIiwiY2VpbCIsImFicyIsImFwcHJveGltYXRlbHlFcXVhbCIsIngiLCJ5IiwiZXBzaWxvbiIsImJldHdlZW4iLCJudW1iZXIiLCJleGNsdXNpdmUiLCJtaW5pbXVtIiwibWF4aW11bSIsImNsYW1wIiwic2lnbiIsImNhbWVsVG9LZWJhYiIsInN0cmluZyIsInJlcGxhY2UiLCJ0b0xvd2VyQ2FzZSIsImZvcm1hdCIsInJlcGxhY2VtZW50cyIsInJlcGxhY2VtZW50IiwicGFkIiwiaWRzIiwidW5pcXVlSWQiLCJwcmVmaXgiLCJFdmVudEJpbmRlciIsImxpc3RlbmVycyIsInRhcmdldHMiLCJldmVudHMiLCJjYWxsYmFjayIsIm9wdGlvbnMiLCJmb3JFYWNoRXZlbnQiLCJldmVudCIsIm5hbWVzcGFjZSIsImlzRXZlbnRUYXJnZXQiLCJyZW1vdmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJ1bmJpbmQiLCJsaXN0ZW5lciIsImRpc3BhdGNoIiwiZGV0YWlsIiwiYnViYmxlcyIsIkN1c3RvbUV2ZW50IiwiY3JlYXRlRXZlbnQiLCJpbml0Q3VzdG9tRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiZXZlbnRzMiIsImV2ZW50TlMiLCJmcmFnbWVudCIsImRlc3Ryb3kiLCJkYXRhIiwiRVZFTlRfTU9VTlRFRCIsIkVWRU5UX1JFQURZIiwiRVZFTlRfTU9WRSIsIkVWRU5UX01PVkVEIiwiRVZFTlRfQ0xJQ0siLCJFVkVOVF9BQ1RJVkUiLCJFVkVOVF9JTkFDVElWRSIsIkVWRU5UX1ZJU0lCTEUiLCJFVkVOVF9ISURERU4iLCJFVkVOVF9SRUZSRVNIIiwiRVZFTlRfVVBEQVRFRCIsIkVWRU5UX1JFU0laRSIsIkVWRU5UX1JFU0laRUQiLCJFVkVOVF9EUkFHIiwiRVZFTlRfRFJBR0dJTkciLCJFVkVOVF9EUkFHR0VEIiwiRVZFTlRfU0NST0xMIiwiRVZFTlRfU0NST0xMRUQiLCJFVkVOVF9PVkVSRkxPVyIsIkVWRU5UX0RFU1RST1kiLCJFVkVOVF9BUlJPV1NfTU9VTlRFRCIsIkVWRU5UX0FSUk9XU19VUERBVEVEIiwiRVZFTlRfUEFHSU5BVElPTl9NT1VOVEVEIiwiRVZFTlRfUEFHSU5BVElPTl9VUERBVEVEIiwiRVZFTlRfTkFWSUdBVElPTl9NT1VOVEVEIiwiRVZFTlRfQVVUT1BMQVlfUExBWSIsIkVWRU5UX0FVVE9QTEFZX1BMQVlJTkciLCJFVkVOVF9BVVRPUExBWV9QQVVTRSIsIkVWRU5UX0xBWllMT0FEX0xPQURFRCIsIkVWRU5UX1NMSURFX0tFWURPV04iLCJFVkVOVF9TSElGVEVEIiwiRVZFTlRfRU5EX0lOREVYX0NIQU5HRUQiLCJFdmVudEludGVyZmFjZSIsIlNwbGlkZTIiLCJidXMiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiYmluZGVyIiwib24iLCJqb2luIiwiZW1pdCIsIm9mZiIsIlJlcXVlc3RJbnRlcnZhbCIsImludGVydmFsIiwib25JbnRlcnZhbCIsIm9uVXBkYXRlIiwibGltaXQiLCJub3ciLCJEYXRlIiwic3RhcnRUaW1lIiwicmF0ZSIsImlkIiwicGF1c2VkIiwiY291bnQiLCJ1cGRhdGUiLCJwYXVzZSIsInJlc3VtZSIsImNhbmNlbCIsInJld2luZCIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwic2V0IiwidGltZSIsImlzUGF1c2VkIiwiU3RhdGUiLCJpbml0aWFsU3RhdGUiLCJzdGF0ZSIsImlzIiwic3RhdGVzIiwiVGhyb3R0bGUiLCJkdXJhdGlvbiIsIk1lZGlhIiwiQ29tcG9uZW50czIiLCJicmVha3BvaW50cyIsInJlZHVjZWRNb3Rpb24iLCJxdWVyaWVzIiwic2V0dXAiLCJpc01pbiIsIm1lZGlhUXVlcnkiLCJzb3J0IiwibiIsIm0iLCJyZWdpc3RlciIsImNvbXBsZXRlbHkiLCJvcHRpb25zMiIsInF1ZXJ5TGlzdCIsIm1hdGNoTWVkaWEiLCJkZXN0cm95ZWQiLCJkaXJlY3Rpb24iLCJtZXJnZWQiLCJyZWR1Y2UiLCJtZXJnZWQyIiwiZW50cnkiLCJtb3VudCIsInJlZnJlc2giLCJlbmFibGUiLCJvcHRzIiwiYmFzZSIsIm5vdGlmeSIsImdldFByb3RvdHlwZU9mIiwiQVJST1ciLCJBUlJPV19MRUZUIiwiQVJST1dfUklHSFQiLCJBUlJPV19VUCIsIkFSUk9XX0RPV04iLCJMVFIiLCJSVEwiLCJUVEIiLCJPUklFTlRBVElPTl9NQVAiLCJ3aWR0aCIsImxlZnQiLCJYIiwiWSIsIkFycm93TGVmdCIsIkFycm93UmlnaHQiLCJEaXJlY3Rpb24iLCJyZXNvbHZlIiwiYXhpc09ubHkiLCJpbmRleCIsIm1hdGNoIiwib2Zmc2V0IiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJvcmllbnQiLCJST0xFIiwiVEFCX0lOREVYIiwiRElTQUJMRUQiLCJBUklBX1BSRUZJWCIsIkFSSUFfQ09OVFJPTFMiLCJBUklBX0NVUlJFTlQiLCJBUklBX1NFTEVDVEVEIiwiQVJJQV9MQUJFTCIsIkFSSUFfTEFCRUxMRURCWSIsIkFSSUFfSElEREVOIiwiQVJJQV9PUklFTlRBVElPTiIsIkFSSUFfUk9MRURFU0NSSVBUSU9OIiwiQVJJQV9MSVZFIiwiQVJJQV9CVVNZIiwiQVJJQV9BVE9NSUMiLCJBTExfQVRUUklCVVRFUyIsIkNMQVNTX1BSRUZJWCIsIlNUQVRVU19DTEFTU19QUkVGSVgiLCJDTEFTU19ST09UIiwiQ0xBU1NfVFJBQ0siLCJDTEFTU19MSVNUIiwiQ0xBU1NfU0xJREUiLCJDTEFTU19DTE9ORSIsIkNMQVNTX0NPTlRBSU5FUiIsIkNMQVNTX0FSUk9XUyIsIkNMQVNTX0FSUk9XIiwiQ0xBU1NfQVJST1dfUFJFViIsIkNMQVNTX0FSUk9XX05FWFQiLCJDTEFTU19QQUdJTkFUSU9OIiwiQ0xBU1NfUEFHSU5BVElPTl9QQUdFIiwiQ0xBU1NfUFJPR1JFU1MiLCJDTEFTU19QUk9HUkVTU19CQVIiLCJDTEFTU19UT0dHTEUiLCJDTEFTU19UT0dHTEVfUExBWSIsIkNMQVNTX1RPR0dMRV9QQVVTRSIsIkNMQVNTX1NQSU5ORVIiLCJDTEFTU19TUiIsIkNMQVNTX0lOSVRJQUxJWkVEIiwiQ0xBU1NfQUNUSVZFIiwiQ0xBU1NfUFJFViIsIkNMQVNTX05FWFQiLCJDTEFTU19WSVNJQkxFIiwiQ0xBU1NfTE9BRElORyIsIkNMQVNTX0ZPQ1VTX0lOIiwiQ0xBU1NfT1ZFUkZMT1ciLCJTVEFUVVNfQ0xBU1NFUyIsIkNMQVNTRVMiLCJzbGlkZSIsImNsb25lIiwiYXJyb3dzIiwiYXJyb3ciLCJwcmV2IiwibmV4dCIsInBhZ2luYXRpb24iLCJwYWdlIiwic3Bpbm5lciIsImNsb3Nlc3QiLCJmcm9tIiwibm9kZVR5cGUiLCJwYXJlbnRFbGVtZW50IiwiRlJJQ1RJT04iLCJMT0dfSU5URVJWQUwiLCJQT0lOVEVSX0RPV05fRVZFTlRTIiwiUE9JTlRFUl9NT1ZFX0VWRU5UUyIsIlBPSU5URVJfVVBfRVZFTlRTIiwiRWxlbWVudHMiLCJfRXZlbnRJbnRlcmZhY2UiLCJyb290IiwiaTE4biIsImVsZW1lbnRzIiwic2xpZGVzIiwicm9vdENsYXNzZXMiLCJ0cmFja0NsYXNzZXMiLCJ0cmFjayIsImxpc3QiLCJpc1VzaW5nS2V5IiwiY29sbGVjdCIsImluaXQiLCJjYXB0dXJlIiwiZ2V0Q2xhc3NlcyIsImxhYmVsIiwibGFiZWxsZWRieSIsImZpbmQiLCJiYXIiLCJ0b2dnbGUiLCJyb2xlIiwidGFnTmFtZSIsImNhcm91c2VsIiwiZHJhZyIsImlzTmF2aWdhdGlvbiIsIlNMSURFIiwiTE9PUCIsIkZBREUiLCJTbGlkZSQxIiwic2xpZGVJbmRleCIsIkNvbXBvbmVudHMiLCJ1cGRhdGVPbk1vdmUiLCJzbGlkZUZvY3VzIiwic3R5bGVzIiwiaXNDbG9uZSIsImNvbnRhaW5lciIsInNsaWRlTGFiZWwiLCJsaXN0ZW4iLCJzZWxmIiwiaW5pdE5hdmlnYXRpb24iLCJvbk1vdmUiLCJjb250cm9scyIsInNwbGlkZXMiLCJtYXAiLCJTbGlkZTIiLCJzcGxpZGUiLCJTbGlkZXMiLCJnZXRBdCIsInNsaWRlWCIsImN1cnIiLCJ1cGRhdGVBY3Rpdml0eSIsInVwZGF0ZVZpc2liaWxpdHkiLCJhY3RpdmUiLCJpc0FjdGl2ZSIsInZpc2libGUiLCJpc1Zpc2libGUiLCJoaWRkZW4iLCJmb2N1c2FibGVOb2RlcyIsImFjdGl2ZUVsZW1lbnQiLCJzdHlsZSQxIiwidXNlQ29udGFpbmVyIiwiY2xvbmVTdGF0dXMiLCJ0cmFja1JlY3QiLCJzbGlkZVJlY3QiLCJpc1dpdGhpbiIsImRpc3RhbmNlIiwiZGlmZiIsIl9FdmVudEludGVyZmFjZTIiLCJfQ29tcG9uZW50czIkRWxlbWVudHMiLCJTbGlkZXMyIiwiZm9yRWFjaCQxIiwiU2xpZGUxIiwiZ2V0IiwiZXhjbHVkZUNsb25lcyIsImdldEluIiwiQ29udHJvbGxlciIsInRvSW5kZXgiLCJoYXNGb2N1cyIsInBlclBhZ2UiLCJvYnNlcnZlSW1hZ2VzIiwicmVtb3ZlJDEiLCJtYXRjaGVyIiwiaW1hZ2VzIiwiaW1nIiwiZ2V0TGVuZ3RoIiwiaXNFbm91Z2giLCJMYXlvdXQiLCJfRXZlbnRJbnRlcmZhY2UzIiwiX0NvbXBvbmVudHMyJEVsZW1lbnRzMiIsInN0eWxlU2xpZGVzIiwidmVydGljYWwiLCJyb290UmVjdCIsIm92ZXJmbG93IiwicmVzaXplIiwiY3NzUGFkZGluZyIsImZvcmNlIiwibmV3UmVjdCIsImhlaWdodCIsImNzc1RyYWNrSGVpZ2h0IiwiZ2FwIiwiY3NzU2xpZGVXaWR0aCIsImNzc1NsaWRlSGVpZ2h0IiwiaXNPdmVyZmxvdyIsInBhZGRpbmciLCJjc3NIZWlnaHQiLCJoZWlnaHRSYXRpbyIsImF1dG9XaWR0aCIsImZpeGVkV2lkdGgiLCJjc3NTbGlkZVNpemUiLCJmaXhlZEhlaWdodCIsImF1dG9IZWlnaHQiLCJsaXN0U2l6ZSIsInNsaWRlU2l6ZSIsIndpdGhvdXRHYXAiLCJTbGlkZSIsImdldEdhcCIsInRvdGFsU2l6ZSIsInNsaWRlclNpemUiLCJwYXJzZUZsb2F0IiwiZ2V0UGFkZGluZyIsIk1VTFRJUExJRVIiLCJDbG9uZXMiLCJjbG9uZXMiLCJjbG9uZUNvdW50IiwicmVtb3VudCIsIm9ic2VydmUiLCJjb21wdXRlQ2xvbmVDb3VudCIsImdlbmVyYXRlIiwiaXNIZWFkIiwiY2xvbmVEZWVwIiwiY2xvbmVOb2RlIiwiY2xvbmVzMiIsImZpeGVkU2l6ZSIsImZpeGVkQ291bnQiLCJNb3ZlIiwiX0V2ZW50SW50ZXJmYWNlNCIsIl9Db21wb25lbnRzMiRMYXlvdXQiLCJfQ29tcG9uZW50czIkRGlyZWN0aW8iLCJfQ29tcG9uZW50czIkRWxlbWVudHMzIiwiVHJhbnNpdGlvbiIsInJlcG9zaXRpb24iLCJpc0J1c3kiLCJTY3JvbGwiLCJqdW1wIiwibW92ZSIsImRlc3QiLCJjYW5TaGlmdCIsInRyYW5zbGF0ZSIsInNoaWZ0IiwiZ2V0UG9zaXRpb24iLCJ0b1Bvc2l0aW9uIiwicG9zaXRpb24iLCJwcmV2ZW50TG9vcCIsImRlc3RpbmF0aW9uIiwibG9vcCIsImV4Y2VlZGVkTWF4IiwiZ2V0RW5kIiwiZXhjZWVkZWRNaW4iLCJiYWNrd2FyZHMiLCJleGNlc3MiLCJnZXRMaW1pdCIsInNpemUiLCJtaW5EaXN0YW5jZSIsIkluZmluaXR5IiwidHJpbW1pbmciLCJ0cmltIiwidHJpbVNwYWNlIiwic2hpZnRlZCIsImV4Y2VlZGVkTGltaXQiLCJfRXZlbnRJbnRlcmZhY2U1IiwiX0NvbXBvbmVudHMyJFNsaWRlcyIsIm9taXRFbmQiLCJpc0xvb3AiLCJpc1NsaWRlIiwiZ2V0TmV4dCIsImdldEFkamFjZW50IiwiZ2V0UHJldiIsImN1cnJJbmRleCIsImVuZEluZGV4IiwicHJldkluZGV4Iiwic2xpZGVDb3VudCIsInBlck1vdmUiLCJvblJlc2l6ZWQiLCJnbyIsImNvbnRyb2wiLCJhbGxvd1NhbWVJbmRleCIsInBhcnNlIiwic2V0SW5kZXgiLCJzY3JvbGwiLCJzbmFwIiwiX3JlZiIsImluZGljYXRvciIsImNvbXB1dGVEZXN0SW5kZXgiLCJzbmFwUGFnZSIsImNvbXB1dGVNb3ZhYmxlRGVzdEluZGV4IiwidG9QYWdlIiwidG9EZXN0IiwiZ2V0SW5kZXgiLCJ3YWl0Rm9yVHJhbnNpdGlvbiIsIlhNTF9OQU1FX1NQQUNFIiwiUEFUSCIsIlNJWkUiLCJBcnJvd3MiLCJwbGFjZWhvbGRlciIsIndyYXBwZXIiLCJjcmVhdGVkIiwid3JhcHBlckNsYXNzZXMiLCJlbmFibGVkIiwiY3JlYXRlQXJyb3dzIiwiY3JlYXRlQXJyb3ciLCJwcmV2MiIsImFycm93UGF0aCIsIm5leHRJbmRleCIsInByZXZMYWJlbCIsImxhc3QiLCJuZXh0TGFiZWwiLCJmaXJzdCIsImRpc2FibGVkIiwiSU5URVJWQUxfREFUQV9BVFRSSUJVVEUiLCJBdXRvcGxheSIsIl9FdmVudEludGVyZmFjZTYiLCJvbkFuaW1hdGlvbkZyYW1lIiwiX0NvbXBvbmVudHMyJEVsZW1lbnRzNCIsImF1dG9wbGF5IiwiaG92ZXJlZCIsImZvY3VzZWQiLCJzdG9wcGVkIiwicGxheSIsInBhdXNlT25Ib3ZlciIsImF1dG9Ub2dnbGUiLCJwYXVzZU9uRm9jdXMiLCJyZXNldFByb2dyZXNzIiwic3RvcCIsIkNvdmVyIiwiX0V2ZW50SW50ZXJmYWNlNyIsImNvdmVyIiwiY292ZXIyIiwic3JjIiwiQk9VTkNFX0RJRkZfVEhSRVNIT0xEIiwiQk9VTkNFX0RVUkFUSU9OIiwiRlJJQ1RJT05fRkFDVE9SIiwiQkFTRV9WRUxPQ0lUWSIsIk1JTl9EVVJBVElPTiIsIl9FdmVudEludGVyZmFjZTgiLCJmcmljdGlvbiIsImNsZWFyIiwib25TY3JvbGxlZCIsIm5vQ29uc3RyYWluIiwibm9EaXN0YW5jZSIsIm9uRW5kIiwidG8iLCJlYXNpbmciLCJ0IiwiZWFzaW5nRnVuYyIsInBvdyIsIlNDUk9MTF9MSVNURU5FUl9PUFRJT05TIiwicGFzc2l2ZSIsIkRyYWciLCJfRXZlbnRJbnRlcmZhY2U5IiwiX0NvbXBvbmVudHMyJERpcmVjdGlvMiIsImJhc2VQb3NpdGlvbiIsImJhc2VFdmVudCIsInByZXZCYXNlRXZlbnQiLCJpc0ZyZWUiLCJkcmFnZ2luZyIsImV4Y2VlZGVkIiwiY2xpY2tQcmV2ZW50ZWQiLCJvblBvaW50ZXJEb3duIiwib25DbGljayIsImRpc2FibGUiLCJpc1RvdWNoIiwiaXNUb3VjaEV2ZW50IiwiaXNEcmFnZ2FibGUiLCJidXR0b24iLCJvblBvaW50ZXJNb3ZlIiwib25Qb2ludGVyVXAiLCJzYXZlIiwiY2FuY2VsYWJsZSIsImNvbnN0cmFpbiIsImRpZmZDb29yZCIsImV4cGlyZWQiLCJkaWZmVGltZSIsImhhc0V4Y2VlZGVkIiwiaXNTbGlkZXJEaXJlY3Rpb24iLCJzaG91bGRTdGFydCIsInZlbG9jaXR5IiwiY29tcHV0ZVZlbG9jaXR5IiwiY29tcHV0ZURlc3RpbmF0aW9uIiwicmV3aW5kQnlEcmFnIiwidGhyZXNob2xkcyIsImRyYWdNaW5UaHJlc2hvbGQiLCJpc09iaiIsIm1vdXNlIiwidG91Y2giLCJmbGlja1Bvd2VyIiwiZmxpY2tNYXhQYWdlcyIsIm9ydGhvZ29uYWwiLCJjb29yZE9mIiwiZ2V0QmFzZUV2ZW50IiwiY2hhbmdlZFRvdWNoZXMiLCJ0YXJnZXQyIiwibm9EcmFnIiwiVG91Y2hFdmVudCIsImlzRHJhZ2dpbmciLCJOT1JNQUxJWkFUSU9OX01BUCIsIlNwYWNlYmFyIiwiUmlnaHQiLCJMZWZ0IiwiVXAiLCJEb3duIiwibm9ybWFsaXplS2V5IiwiS0VZQk9BUkRfRVZFTlQiLCJLZXlib2FyZCIsIl9FdmVudEludGVyZmFjZTEwIiwia2V5Ym9hcmQiLCJvbktleWRvd24iLCJfZGlzYWJsZWQiLCJTUkNfREFUQV9BVFRSSUJVVEUiLCJTUkNTRVRfREFUQV9BVFRSSUJVVEUiLCJJTUFHRV9TRUxFQ1RPUiIsIkxhenlMb2FkIiwiX0V2ZW50SW50ZXJmYWNlMTEiLCJpc1NlcXVlbnRpYWwiLCJsYXp5TG9hZCIsImVudHJpZXMiLCJsb2FkTmV4dCIsImNoZWNrIiwic3Jjc2V0IiwicHJlbG9hZFBhZ2VzIiwibG9hZCIsIm9uTG9hZCIsIlBhZ2luYXRpb24iLCJwYWdpbmF0aW9uQ2xhc3NlcyIsImNyZWF0ZVBhZ2luYXRpb24iLCJnZXREaXJlY3Rpb24iLCJzZWxlY3QiLCJsaSIsInRleHQiLCJwYWdlWCIsInBhZ2luYXRpb25LZXlib2FyZCIsImRpciIsIm5leHRQYWdlIiwiaXRlbSIsInBhZ2luYXRpb25EaXJlY3Rpb24iLCJfYnV0dG9uIiwiVFJJR0dFUl9LRVlTIiwiU3luYyIsImlzUGFyZW50Iiwic3luYyIsIm5hdmlnYXRlIiwiV2hlZWwiLCJfRXZlbnRJbnRlcmZhY2UxMiIsImxhc3RUaW1lIiwid2hlZWwiLCJvbldoZWVsIiwiZGVsdGFZIiwiX21pbiIsIndoZWVsTWluVGhyZXNob2xkIiwic2xlZXAiLCJ3aGVlbFNsZWVwIiwic2hvdWxkUHJldmVudCIsInJlbGVhc2VXaGVlbCIsIlNSX1JFTU9WQUxfREVMQVkiLCJMaXZlIiwiX0V2ZW50SW50ZXJmYWNlMTMiLCJsaXZlIiwic3IiLCJ0ZXh0Q29udGVudCIsIkNvbXBvbmVudENvbnN0cnVjdG9ycyIsImZyZWV6ZSIsIl9fcHJvdG9fXyIsIkkxOE4iLCJERUZBVUxUUyIsInNwZWVkIiwicmV3aW5kU3BlZWQiLCJGYWRlIiwiZG9uZSIsInRyYW5zaXRpb24iLCJlbmRDYWxsYmFjayIsImdldFNwZWVkIiwidXNlU2Nyb2xsIiwiX1NwbGlkZSIsIl9vIiwiX0UiLCJkZWZhdWx0cyIsIkpTT04iLCJfcHJvdG8iLCJFeHRlbnNpb25zIiwiX3RoaXMiLCJfQyIsIl9UIiwiQ29uc3RydWN0b3JzIiwiQ29tcG9uZW50IiwiY29tcG9uZW50IiwiX3RoaXMkZXZlbnQiLCJTcGxpZGUiLCJDTEFTU19SRU5ERVJFRCIsIlJFTkRFUkVSX0RFRkFVTFRfQ09ORklHIiwibGlzdFRhZyIsInNsaWRlVGFnIiwiU3R5bGUiLCJfcHJvdG8yIiwicnVsZSIsImJyZWFrcG9pbnQiLCJzZWxlY3RvcnMiLCJidWlsZCIsIl90aGlzMiIsImNzcyIsImJ1aWxkU2VsZWN0b3JzIiwiX3RoaXMzIiwiU3BsaWRlUmVuZGVyZXIiLCJjb250ZW50cyIsImNvbmZpZyIsImNsZWFuIiwiX0V2ZW50SW50ZXJmYWNlMTQiLCJfcHJvdG8zIiwicGFyc2VCcmVha3BvaW50cyIsImluaXRTbGlkZXMiLCJyZWdpc3RlclJvb3RTdHlsZXMiLCJyZWdpc3RlclRyYWNrU3R5bGVzIiwicmVnaXN0ZXJTbGlkZVN0eWxlcyIsInJlZ2lzdGVyTGlzdFN0eWxlcyIsIl90aGlzNCIsImNvbnRlbnQiLCJidWlsZFN0eWxlcyIsImdlbmVyYXRlQ2xvbmVzIiwiX3RoaXM1IiwiX3JlZjIiLCJfdGhpczYiLCJTdHlsZTIiLCJfcmVmMyIsIl90aGlzNyIsIl9yZWY0IiwiYnVpbGRUcmFuc2xhdGUiLCJjc3NBc3BlY3RSYXRpbyIsIl90aGlzOCIsIl9yZWY1IiwiX3RoaXMkRGlyZWN0aW9uIiwiY3NzT2Zmc2V0Q2xvbmVzIiwiY3NzT2Zmc2V0R2FwcyIsImlzQ2VudGVyIiwiYnVpbGRDc3NWYWx1ZSIsImNzc09mZnNldENlbnRlciIsIkJvb2xlYW4iLCJfdGhpcyREaXJlY3Rpb24yIiwiZ2V0Q2xvbmVDb3VudCIsImlzRml4ZWRXaWR0aCIsIl90aGlzJHBhcnNlQ3NzVmFsdWUiLCJwYXJzZUNzc1ZhbHVlIiwidW5pdDIiLCJwZXJjZW50IiwiX3RoaXMkRGlyZWN0aW9uMyIsIl90aGlzJHBhcnNlQ3NzVmFsdWUyIiwiX3RoaXMkcGFyc2VDc3NWYWx1ZTMiLCJfdmFsdWUiLCJfdW5pdCIsImdhcE9mZnNldCIsIl90aGlzJHBhcnNlQ3NzVmFsdWU0IiwiZ2FwcyIsImlzVmVydGljYWwiLCJfdGhpczkiLCJidWlsZENsYXNzZXMiLCJidWlsZEF0dHJzIiwicmVuZGVyU2xpZGVzIiwiX3RoaXMxMCIsIl9jb250ZW50JGh0bWwiLCJiYWNrZ3JvdW5kIiwidW5zaGlmdCIsIl9yZWY2IiwicmVuZGVyQXJyb3dzIiwicmVuZGVyQXJyb3ciLCJfdGhpcyRvcHRpb25zIiwiYXJpYUxhYmVsIiwiX3RoaXMkY29uZmlnIiwicm9vdENsYXNzIiwiYmVmb3JlVHJhY2siLCJhZnRlclRyYWNrIiwic2xpZGVyIiwiYmVmb3JlU2xpZGVyIiwiYWZ0ZXJTbGlkZXIiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@splidejs/splide/dist/js/splide.esm.js\n");

/***/ }),

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _classes_StickyHeader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./classes/StickyHeader */ \"./src/js/classes/StickyHeader.js\");\n/* harmony import */ var _classes_StickyHeader__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_classes_StickyHeader__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _components_ElementFullWidthCarousel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/ElementFullWidthCarousel */ \"./src/js/components/ElementFullWidthCarousel.js\");\n/*!\n * Javascript\n * ---------------------------------------------------------------------------------\n */\n\n\nwindow.addEventListener('load', _components_ElementFullWidthCarousel__WEBPACK_IMPORTED_MODULE_1__.ElementFullWidthCarousel);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvYXBwLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQUEsTUFBTSxDQUFOQSxnQkFBQUEsQ0FBQUEsTUFBQUEsRUFBQUEsMEZBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2FwcC5qcz9jZDE4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogSmF2YXNjcmlwdFxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuaW1wb3J0ICcuL2NsYXNzZXMvU3RpY2t5SGVhZGVyJztcbmltcG9ydCB7RWxlbWVudEZ1bGxXaWR0aENhcm91c2VsfSBmcm9tICcuL2NvbXBvbmVudHMvRWxlbWVudEZ1bGxXaWR0aENhcm91c2VsJztcblxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBFbGVtZW50RnVsbFdpZHRoQ2Fyb3VzZWwpO1xuIl0sIm5hbWVzIjpbIndpbmRvdyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/js/app.js\n");

/***/ }),

/***/ "./src/js/classes/StickyHeader.js":
/*!****************************************!*\
  !*** ./src/js/classes/StickyHeader.js ***!
  \****************************************/
/***/ (function() {

eval("function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}\n\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar StickyHeader = /*#__PURE__*/function (_HTMLElement) {\n  _inherits(StickyHeader, _HTMLElement);\n\n  var _super = _createSuper(StickyHeader);\n\n  function StickyHeader() {\n    _classCallCheck(this, StickyHeader);\n\n    return _super.call(this);\n  }\n\n  _createClass(StickyHeader, [{\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      this.header = document.querySelector('[data-header-wrapper]');\n      this.headerBounds = {};\n      this.currentScrollTop = 0;\n      this.preventReveal = false;\n      this.onScrollHandler = this.onScroll.bind(this);\n      window.addEventListener('scroll', this.onScrollHandler, false);\n      this.createObserver();\n    }\n  }, {\n    key: \"createObserver\",\n    value: function createObserver() {\n      var _this = this;\n\n      var observer = new IntersectionObserver(function (entries, observer) {\n        _this.headerBounds = entries[0].intersectionRect;\n        observer.disconnect();\n      });\n      observer.observe(this.header);\n    }\n  }, {\n    key: \"onScroll\",\n    value: function onScroll() {\n      var _this2 = this;\n\n      var scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n      var heightToTrigger = this.headerBounds.bottom * 1.5;\n\n      if (scrollTop > this.currentScrollTop && scrollTop > heightToTrigger) {\n        requestAnimationFrame(this.hide.bind(this));\n      } else if (scrollTop < this.currentScrollTop && scrollTop > heightToTrigger) {\n        if (!this.preventReveal) {\n          requestAnimationFrame(this.reveal.bind(this));\n        } else {\n          window.clearTimeout(this.isScrolling);\n          this.isScrolling = setTimeout(function () {\n            _this2.preventReveal = false;\n          }, 66);\n          requestAnimationFrame(this.hide.bind(this));\n        }\n      } else if (scrollTop <= this.headerBounds.top) {\n        requestAnimationFrame(this.reset.bind(this));\n      }\n\n      this.currentScrollTop = scrollTop;\n    }\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      this.header.classList.add('header-wrapper--hidden', 'header-wrapper--sticky');\n    }\n  }, {\n    key: \"reveal\",\n    value: function reveal() {\n      this.header.classList.add('header-wrapper--sticky', 'animate');\n      this.header.classList.remove('header-wrapper--hidden');\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.header.classList.remove('header-wrapper--hidden', 'header-wrapper--sticky', 'animate');\n    }\n  }]);\n\n  return StickyHeader;\n}( /*#__PURE__*/_wrapNativeSuper(HTMLElement));\n\ncustomElements.define('sticky-header', StickyHeader);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvY2xhc3Nlcy9TdGlja3lIZWFkZXIuanM/Nzg3YyJdLCJuYW1lcyI6WyJTdGlja3lIZWFkZXIiLCJIVE1MRWxlbWVudCIsImRvY3VtZW50Iiwid2luZG93Iiwib2JzZXJ2ZXIiLCJlbnRyaWVzIiwic2Nyb2xsVG9wIiwiaGVpZ2h0VG9UcmlnZ2VyIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwic2V0VGltZW91dCIsImN1c3RvbUVsZW1lbnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFBTUEsWTs7Ozs7QUFDSixXQUFBLFlBQUEsR0FBYztBQUFBLElBQUEsZUFBQSxDQUFBLElBQUEsRUFBQSxZQUFBLENBQUE7O0FBQUEsV0FBQSxNQUFBLENBQUEsSUFBQSxDQUFBLElBQUEsQ0FBQTtBQUViOzs7O1dBRUQsU0FBQSxpQkFBQSxHQUFvQjtBQUNsQixXQUFBLE1BQUEsR0FBY0UsUUFBUSxDQUFSQSxhQUFBQSxDQUFkLHVCQUFjQSxDQUFkO0FBQ0EsV0FBQSxZQUFBLEdBQUEsRUFBQTtBQUNBLFdBQUEsZ0JBQUEsR0FBQSxDQUFBO0FBQ0EsV0FBQSxhQUFBLEdBQUEsS0FBQTtBQUNBLFdBQUEsZUFBQSxHQUF1QixLQUFBLFFBQUEsQ0FBQSxJQUFBLENBQXZCLElBQXVCLENBQXZCO0FBRUFDLE1BQUFBLE1BQU0sQ0FBTkEsZ0JBQUFBLENBQUFBLFFBQUFBLEVBQWtDLEtBQWxDQSxlQUFBQSxFQUFBQSxLQUFBQTtBQUVBLFdBQUEsY0FBQTtBQUNEOzs7V0FFRCxTQUFBLGNBQUEsR0FBaUI7QUFBQSxVQUFBLEtBQUEsR0FBQSxJQUFBOztBQUNmLFVBQUlDLFFBQVEsR0FBRyxJQUFBLG9CQUFBLENBQXlCLFVBQUEsT0FBQSxFQUFBLFFBQUEsRUFBdUI7QUFDN0QsUUFBQSxLQUFJLENBQUosWUFBQSxHQUFvQkMsT0FBTyxDQUFQQSxDQUFPLENBQVBBLENBQXBCLGdCQUFBO0FBQ0FELFFBQUFBLFFBQVEsQ0FBUkEsVUFBQUE7QUFGRixPQUFlLENBQWY7QUFLQUEsTUFBQUEsUUFBUSxDQUFSQSxPQUFBQSxDQUFpQixLQUFqQkEsTUFBQUE7QUFDRDs7O1dBRUQsU0FBQSxRQUFBLEdBQVc7QUFBQSxVQUFBLE1BQUEsR0FBQSxJQUFBOztBQUNULFVBQU1FLFNBQVMsR0FBR0gsTUFBTSxDQUFOQSxXQUFBQSxJQUFzQkQsUUFBUSxDQUFSQSxlQUFBQSxDQUF4QyxTQUFBO0FBQ0EsVUFBTUssZUFBZSxHQUFJLEtBQUEsWUFBQSxDQUFBLE1BQUEsR0FBekIsR0FBQTs7QUFFQSxVQUFJRCxTQUFTLEdBQUcsS0FBWkEsZ0JBQUFBLElBQXFDQSxTQUFTLEdBQWxELGVBQUEsRUFBc0U7QUFDcEVFLFFBQUFBLHFCQUFxQixDQUFDLEtBQUEsSUFBQSxDQUFBLElBQUEsQ0FBdEJBLElBQXNCLENBQUQsQ0FBckJBO0FBREYsT0FBQSxNQUVPLElBQUlGLFNBQVMsR0FBRyxLQUFaQSxnQkFBQUEsSUFBcUNBLFNBQVMsR0FBbEQsZUFBQSxFQUFzRTtBQUMzRSxZQUFJLENBQUMsS0FBTCxhQUFBLEVBQXlCO0FBQ3ZCRSxVQUFBQSxxQkFBcUIsQ0FBQyxLQUFBLE1BQUEsQ0FBQSxJQUFBLENBQXRCQSxJQUFzQixDQUFELENBQXJCQTtBQURGLFNBQUEsTUFFTztBQUNMTCxVQUFBQSxNQUFNLENBQU5BLFlBQUFBLENBQW9CLEtBQXBCQSxXQUFBQTtBQUVBLGVBQUEsV0FBQSxHQUFtQk0sVUFBVSxDQUFDLFlBQU07QUFDbEMsWUFBQSxNQUFJLENBQUosYUFBQSxHQUFBLEtBQUE7QUFEMkIsV0FBQSxFQUE3QixFQUE2QixDQUE3QjtBQUlBRCxVQUFBQSxxQkFBcUIsQ0FBQyxLQUFBLElBQUEsQ0FBQSxJQUFBLENBQXRCQSxJQUFzQixDQUFELENBQXJCQTtBQUNEO0FBWEksT0FBQSxNQVlBLElBQUlGLFNBQVMsSUFBSSxLQUFBLFlBQUEsQ0FBakIsR0FBQSxFQUF3QztBQUM3Q0UsUUFBQUEscUJBQXFCLENBQUMsS0FBQSxLQUFBLENBQUEsSUFBQSxDQUF0QkEsSUFBc0IsQ0FBRCxDQUFyQkE7QUFDRDs7QUFHRCxXQUFBLGdCQUFBLEdBQUEsU0FBQTtBQUNEOzs7V0FFRCxTQUFBLElBQUEsR0FBTztBQUNMLFdBQUEsTUFBQSxDQUFBLFNBQUEsQ0FBQSxHQUFBLENBQUEsd0JBQUEsRUFBQSx3QkFBQTtBQUNEOzs7V0FFRCxTQUFBLE1BQUEsR0FBUztBQUNQLFdBQUEsTUFBQSxDQUFBLFNBQUEsQ0FBQSxHQUFBLENBQUEsd0JBQUEsRUFBQSxTQUFBO0FBQ0EsV0FBQSxNQUFBLENBQUEsU0FBQSxDQUFBLE1BQUEsQ0FBQSx3QkFBQTtBQUNEOzs7V0FFRCxTQUFBLEtBQUEsR0FBUTtBQUNOLFdBQUEsTUFBQSxDQUFBLFNBQUEsQ0FBQSxNQUFBLENBQUEsd0JBQUEsRUFBQSx3QkFBQSxFQUFBLFNBQUE7QUFDRDs7OztpQ0EvRHdCUCxXOztBQWtFM0JTLGNBQWMsQ0FBZEEsTUFBQUEsQ0FBQUEsZUFBQUEsRUFBQUEsWUFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBTdGlja3lIZWFkZXIgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICB0aGlzLmhlYWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWhlYWRlci13cmFwcGVyXScpO1xuICAgIHRoaXMuaGVhZGVyQm91bmRzID0ge307XG4gICAgdGhpcy5jdXJyZW50U2Nyb2xsVG9wID0gMDtcbiAgICB0aGlzLnByZXZlbnRSZXZlYWwgPSBmYWxzZTtcbiAgICB0aGlzLm9uU2Nyb2xsSGFuZGxlciA9IHRoaXMub25TY3JvbGwuYmluZCh0aGlzKTtcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLm9uU2Nyb2xsSGFuZGxlciwgZmFsc2UpO1xuXG4gICAgdGhpcy5jcmVhdGVPYnNlcnZlcigpO1xuICB9XG5cbiAgY3JlYXRlT2JzZXJ2ZXIoKSB7XG4gICAgbGV0IG9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKChlbnRyaWVzLCBvYnNlcnZlcikgPT4ge1xuICAgICAgdGhpcy5oZWFkZXJCb3VuZHMgPSBlbnRyaWVzWzBdLmludGVyc2VjdGlvblJlY3Q7XG4gICAgICBvYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgfSk7XG5cbiAgICBvYnNlcnZlci5vYnNlcnZlKHRoaXMuaGVhZGVyKTtcbiAgfVxuXG4gIG9uU2Nyb2xsKCkge1xuICAgIGNvbnN0IHNjcm9sbFRvcCA9IHdpbmRvdy5wYWdlWU9mZnNldCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wO1xuICAgIGNvbnN0IGhlaWdodFRvVHJpZ2dlciA9ICh0aGlzLmhlYWRlckJvdW5kcy5ib3R0b20gKiAxLjUpO1xuXG4gICAgaWYgKHNjcm9sbFRvcCA+IHRoaXMuY3VycmVudFNjcm9sbFRvcCAmJiBzY3JvbGxUb3AgPiBoZWlnaHRUb1RyaWdnZXIpIHtcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLmhpZGUuYmluZCh0aGlzKSk7XG4gICAgfSBlbHNlIGlmIChzY3JvbGxUb3AgPCB0aGlzLmN1cnJlbnRTY3JvbGxUb3AgJiYgc2Nyb2xsVG9wID4gaGVpZ2h0VG9UcmlnZ2VyKSB7XG4gICAgICBpZiAoIXRoaXMucHJldmVudFJldmVhbCkge1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5yZXZlYWwuYmluZCh0aGlzKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMuaXNTY3JvbGxpbmcpO1xuXG4gICAgICAgIHRoaXMuaXNTY3JvbGxpbmcgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB0aGlzLnByZXZlbnRSZXZlYWwgPSBmYWxzZTtcbiAgICAgICAgfSwgNjYpO1xuXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLmhpZGUuYmluZCh0aGlzKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzY3JvbGxUb3AgPD0gdGhpcy5oZWFkZXJCb3VuZHMudG9wKSB7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5yZXNldC5iaW5kKHRoaXMpKTtcbiAgICB9XG5cblxuICAgIHRoaXMuY3VycmVudFNjcm9sbFRvcCA9IHNjcm9sbFRvcDtcbiAgfVxuXG4gIGhpZGUoKSB7XG4gICAgdGhpcy5oZWFkZXIuY2xhc3NMaXN0LmFkZCgnaGVhZGVyLXdyYXBwZXItLWhpZGRlbicsICdoZWFkZXItd3JhcHBlci0tc3RpY2t5Jyk7XG4gIH1cblxuICByZXZlYWwoKSB7XG4gICAgdGhpcy5oZWFkZXIuY2xhc3NMaXN0LmFkZCgnaGVhZGVyLXdyYXBwZXItLXN0aWNreScsICdhbmltYXRlJyk7XG4gICAgdGhpcy5oZWFkZXIuY2xhc3NMaXN0LnJlbW92ZSgnaGVhZGVyLXdyYXBwZXItLWhpZGRlbicpO1xuICB9XG5cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5oZWFkZXIuY2xhc3NMaXN0LnJlbW92ZSgnaGVhZGVyLXdyYXBwZXItLWhpZGRlbicsICdoZWFkZXItd3JhcHBlci0tc3RpY2t5JywgJ2FuaW1hdGUnKTtcbiAgfVxufVxuXG5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ3N0aWNreS1oZWFkZXInLCBTdGlja3lIZWFkZXIpO1xuIl0sImZpbGUiOiIuL3NyYy9qcy9jbGFzc2VzL1N0aWNreUhlYWRlci5qcy5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/js/classes/StickyHeader.js\n");

/***/ }),

/***/ "./src/js/components/ElementFullWidthCarousel.js":
/*!*******************************************************!*\
  !*** ./src/js/components/ElementFullWidthCarousel.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ElementFullWidthCarousel\": function() { return /* binding */ ElementFullWidthCarousel; }\n/* harmony export */ });\n/* harmony import */ var _splidejs_splide__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @splidejs/splide */ \"./node_modules/@splidejs/splide/dist/js/splide.esm.js\");\n\nvar ElementFullWidthCarousel = function ElementFullWidthCarousel() {\n  var carousels = document.querySelectorAll('[data-element-full-width-carousel]');\n\n  var initCarousel = function initCarousel(carousel) {\n    new _splidejs_splide__WEBPACK_IMPORTED_MODULE_0__[\"default\"](carousel).mount();\n  };\n\n  carousels.forEach(initCarousel);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvY29tcG9uZW50cy9FbGVtZW50RnVsbFdpZHRoQ2Fyb3VzZWwuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUVPLElBQU1BLHdCQUF3QixHQUFHLFNBQTNCQSx3QkFBMkIsR0FBTTtBQUM1QyxNQUFNQyxTQUFTLEdBQUdDLFFBQVEsQ0FBUkEsZ0JBQUFBLENBQWxCLG9DQUFrQkEsQ0FBbEI7O0FBRUEsTUFBTUMsWUFBWSxHQUFHLFNBQWZBLFlBQWUsV0FBWTtBQUMvQjtBQURGOztBQUlBRixFQUFBQSxTQUFTLENBQVRBLE9BQUFBLENBQUFBLFlBQUFBO0FBUEsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvY29tcG9uZW50cy9FbGVtZW50RnVsbFdpZHRoQ2Fyb3VzZWwuanM/YTYzZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU3BsaWRlIGZyb20gJ0BzcGxpZGVqcy9zcGxpZGUnO1xuXG5leHBvcnQgY29uc3QgRWxlbWVudEZ1bGxXaWR0aENhcm91c2VsID0gKCkgPT4ge1xuICBjb25zdCBjYXJvdXNlbHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1lbGVtZW50LWZ1bGwtd2lkdGgtY2Fyb3VzZWxdJyk7XG5cbiAgY29uc3QgaW5pdENhcm91c2VsID0gY2Fyb3VzZWwgPT4ge1xuICAgIG5ldyBTcGxpZGUoY2Fyb3VzZWwpLm1vdW50KCk7XG4gIH1cblxuICBjYXJvdXNlbHMuZm9yRWFjaChpbml0Q2Fyb3VzZWwpO1xufVxuIl0sIm5hbWVzIjpbIkVsZW1lbnRGdWxsV2lkdGhDYXJvdXNlbCIsImNhcm91c2VscyIsImRvY3VtZW50IiwiaW5pdENhcm91c2VsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/js/components/ElementFullWidthCarousel.js\n");

/***/ }),

/***/ "./src/scss/editor.scss":
/*!******************************!*\
  !*** ./src/scss/editor.scss ***!
  \******************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2Nzcy9lZGl0b3Iuc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc2Nzcy9lZGl0b3Iuc2Nzcz81ODZiIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/scss/editor.scss\n");

/***/ }),

/***/ "./src/scss/style.scss":
/*!*****************************!*\
  !*** ./src/scss/style.scss ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2Nzcy9zdHlsZS5zY3NzLmpzIiwibWFwcGluZ3MiOiI7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9zY3NzL3N0eWxlLnNjc3M/NTk1NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/scss/style.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	!function() {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = function(result, chunkIds, fn, priority) {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var chunkIds = deferred[i][0];
/******/ 				var fn = deferred[i][1];
/******/ 				var priority = deferred[i][2];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	!function() {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = function(module) {
/******/ 			var getter = module && module.__esModule ?
/******/ 				function() { return module['default']; } :
/******/ 				function() { return module; };
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	!function() {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"/dist/js/app": 0,
/******/ 			"dist/css/style": 0,
/******/ 			"dist/css/editor": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = function(parentChunkLoadingFunction, data) {
/******/ 			var chunkIds = data[0];
/******/ 			var moreModules = data[1];
/******/ 			var runtime = data[2];
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunk"] = self["webpackChunk"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["dist/css/style","dist/css/editor"], function() { return __webpack_require__("./src/js/app.js"); })
/******/ 	__webpack_require__.O(undefined, ["dist/css/style","dist/css/editor"], function() { return __webpack_require__("./src/scss/editor.scss"); })
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["dist/css/style","dist/css/editor"], function() { return __webpack_require__("./src/scss/style.scss"); })
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;